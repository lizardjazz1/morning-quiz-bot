#handlers/quiz_manager.py
from __future__ import annotations
import asyncio
import logging
from typing import List, Optional, Union, Dict, Any, TYPE_CHECKING
from datetime import timedelta

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, User as TelegramUser, Message, CallbackQuery
)
from telegram.ext import Application, ContextTypes, CommandHandler, ConversationHandler, CallbackQueryHandler, MessageHandler, filters
from telegram.constants import ParseMode, ChatType
from telegram.error import BadRequest

from app_config import AppConfig
from state import BotState, QuizState
from data_manager import DataManager
from modules.category_manager import CategoryManager # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
from modules.score_manager import ScoreManager # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
from modules.quiz_engine import QuizEngine # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
from utils import get_current_utc_time, schedule_job_unique, escape_markdown_v2, is_user_admin_in_update

if TYPE_CHECKING:
    pass # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–∞–π–ø-—Ö–∏–Ω—Ç–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã –∏ –≤—ã–∑—ã–≤–∞—é—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
(CFG_QUIZ_OPTIONS, CFG_QUIZ_NUM_QS) = map(str, range(2))

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback_data
CB_QCFG_ = "qcfg_"
CB_QCFG_NUM_MENU = f"{CB_QCFG_}num_menu"
CB_QCFG_NUM_VAL = f"{CB_QCFG_}num_val" # qcfg_num_val:1, qcfg_num_val:5, etc.
CB_QCFG_CAT_MENU = f"{CB_QCFG_}cat_menu"
CB_QCFG_CAT_VAL = f"{CB_QCFG_}cat_val" # qcfg_cat_val:CategoryName, qcfg_cat_val:random
CB_QCFG_ANNOUNCE = f"{CB_QCFG_}announce"
CB_QCFG_START = f"{CB_QCFG_}start"
CB_QCFG_CANCEL = f"{CB_QCFG_}cancel"
CB_QCFG_BACK = f"{CB_QCFG_}back_to_main_opts" # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –ø–æ–¥–º–µ–Ω—é

class QuizManager:
    def __init__(
        self, app_config: AppConfig, state: BotState, category_manager: CategoryManager,
        score_manager: ScoreManager, data_manager: DataManager, application: Application
    ):
        self.app_config = app_config
        self.state = state
        self.category_manager = category_manager
        self.score_manager = score_manager
        self.data_manager = data_manager
        self.application = application
        self.quiz_engine = QuizEngine(state, app_config) # QuizEngine —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω

    def _get_effective_quiz_params(self, chat_id: int, num_questions_override: Optional[int] = None) -> Dict[str, Any]:
        chat_s = self.data_manager.get_chat_settings(chat_id)

        num_q: int
        if num_questions_override is not None:
            num_q = num_questions_override
        else:
            num_q = chat_s.get("default_num_questions", self.app_config.default_chat_settings.get("default_num_questions", 10))

        quiz_type_for_params_lookup = "single" if num_q == 1 else chat_s.get("default_quiz_type", "session")
        type_cfg = self.app_config.quiz_types_config.get(quiz_type_for_params_lookup, {})

        default_announce_delay = self.app_config.default_chat_settings.get("default_announce_delay_seconds", 5)

        return {
            "quiz_type_key": quiz_type_for_params_lookup,
            "quiz_mode": type_cfg.get("mode", "single_question" if num_q == 1 else "serial_immediate"),
            "num_questions": num_q,
            "open_period_seconds": chat_s.get("default_open_period_seconds", type_cfg.get("default_open_period_seconds", 30)),
            "announce_quiz": chat_s.get("default_announce_quiz", type_cfg.get("announce", False)),
            "announce_delay_seconds": chat_s.get("default_announce_delay_seconds", type_cfg.get("announce_delay_seconds", default_announce_delay)),
            "interval_seconds": type_cfg.get("default_interval_seconds"), # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
            "enabled_categories_chat": chat_s.get("enabled_categories"), # –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∏–ª–∏ None
            "disabled_categories_chat": chat_s.get("disabled_categories", []), # –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω
        }

    async def _initiate_quiz_session(
        self, context: ContextTypes.DEFAULT_TYPE, chat_id: int, initiated_by_user: Optional[TelegramUser],
        quiz_type: str, quiz_mode: str, num_questions: int, open_period_seconds: int,
        announce: bool, announce_delay_seconds: int,
        category_names_for_quiz: Optional[List[str]] = None,
        is_random_categories_mode: bool = False,
        interval_seconds: Optional[int] = None,
        original_command_message_id: Optional[int] = None
    ):
        logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ —á–∞—Ç–µ {chat_id}. –¢–∏–ø: {quiz_type}, –†–µ–∂–∏–º: {quiz_mode}, NQ: {num_questions}, Announce: {announce} ({announce_delay_seconds}s)")

        active_quiz = self.state.get_active_quiz(chat_id)
        if active_quiz and not active_quiz.is_stopping:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤ —á–∞—Ç–µ {chat_id}, –≥–¥–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è.")
            if initiated_by_user: # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –æ—Ç —à–µ–¥—É–ª–µ—Ä–∞
                 await context.bot.send_message(chat_id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∏–¥–µ—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—É—â—É—é (/stopquiz).", parse_mode=None)
            return

        # –õ–æ–≥–∏–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        cat_mode_for_get_questions = "random_from_pool" # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if category_names_for_quiz and not is_random_categories_mode: # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ò —ç—Ç–æ –Ω–µ —Ä–µ–∂–∏–º "—Å–ª—É—á–∞–π–Ω—ã–µ" (—Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö)
            cat_mode_for_get_questions = "specific_only"
        elif is_random_categories_mode: # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω —Ä–µ–∂–∏–º —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–∞–∂–µ –µ—Å–ª–∏ category_names_for_quiz –ø–µ—Ä–µ–¥–∞–Ω—ã, –æ–Ω–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è)
            cat_mode_for_get_questions = "random_from_pool"
        # –ï—Å–ª–∏ category_names_for_quiz –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∏ is_random_categories_mode=False, —Ç–æ —ç—Ç–æ —Ç–æ–∂–µ random_from_pool (—Å–æ–≥–ª–∞—Å–Ω–æ —á–∞—Ç-–Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º)

        questions_for_session = self.category_manager.get_questions(
            num_questions_needed=num_questions,
            chat_id=chat_id, # –î–ª—è —É—á–µ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ (–≤–∫–ª—é—á–µ–Ω–Ω—ã–µ/–≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
            allowed_specific_categories=category_names_for_quiz if cat_mode_for_get_questions == "specific_only" else None,
            mode=cat_mode_for_get_questions
        )

        actual_num_questions_obtained = len(questions_for_session)
        if actual_num_questions_obtained == 0:
            msg_no_q = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if initiated_by_user: await context.bot.send_message(chat_id, msg_no_q, parse_mode=None)
            else: logger.warning(f"{msg_no_q} (–ß–∞—Ç: {chat_id})")
            return

        if actual_num_questions_obtained < num_questions:
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ {num_questions}, –¥–æ—Å—Ç—É–ø–Ω–æ {actual_num_questions_obtained}. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –±—É–¥–µ—Ç —Å {actual_num_questions_obtained} –≤–æ–ø—Ä–æ—Å–∞–º–∏.")
            num_questions = actual_num_questions_obtained # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ

        user_id_int: Optional[int] = int(initiated_by_user.id) if initiated_by_user else None

        quiz_state = QuizState(
            chat_id=chat_id, quiz_type=quiz_type, quiz_mode=quiz_mode,
            questions=questions_for_session, # –ü–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            num_questions_to_ask=num_questions, # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            open_period_seconds=open_period_seconds,
            created_by_user_id=user_id_int,
            original_command_message_id=original_command_message_id,
            interval_seconds=interval_seconds,
            quiz_start_time=get_current_utc_time() # –í—Ä–µ–º—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏
        )
        self.state.add_active_quiz(chat_id, quiz_state)

        announce_msg_id: Optional[int] = None
        if announce and announce_delay_seconds > 0:
            announce_text_parts = [f"üîî –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {announce_delay_seconds} —Å–µ–∫\\!"]
            if initiated_by_user:
                announce_text_parts.insert(0, f"{escape_markdown_v2(initiated_by_user.first_name)} –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\\!")
            try:
                msg = await context.bot.send_message(chat_id, " ".join(announce_text_parts), parse_mode=ParseMode.MARKDOWN_V2)
                announce_msg_id = msg.message_id
                quiz_state.announce_message_id = announce_msg_id
                quiz_state.message_ids_to_delete.add(announce_msg_id) # –î–æ–±–∞–≤–ª—è–µ–º ID –∞–Ω–æ–Ω—Å–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            except Exception as e_announce:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ —á–∞—Ç {chat_id}: {e_announce}")
            
            await asyncio.sleep(announce_delay_seconds)

            # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
            current_quiz_state_after_delay = self.state.get_active_quiz(chat_id)
            if not current_quiz_state_after_delay or current_quiz_state_after_delay.is_stopping or current_quiz_state_after_delay != quiz_state:
                logger.info(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –≤ —á–∞—Ç–µ {chat_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞/–∑–∞–º–µ–Ω–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∞–Ω–æ–Ω—Å–∞.")
                # –ï—Å–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –±—ã–ª–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –¥—Ä—É–≥–æ–π, –Ω–µ —É–¥–∞–ª—è–µ–º –∞–Ω–æ–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ "—Å—Ç–∞—Ä–æ–π" (—Ç–µ–∫—É—â–µ–π) quiz_state
                if announce_msg_id and current_quiz_state_after_delay != quiz_state and announce_msg_id in quiz_state.message_ids_to_delete:
                     quiz_state.message_ids_to_delete.remove(announce_msg_id) # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è –≠–¢–û–ô —Å–µ—Å—Å–∏–∏
                
                # –ï—Å–ª–∏ —ç—Ç–∞ —Å–µ—Å—Å–∏—è (quiz_state) –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ BotState –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–∫–æ–π, –Ω–æ –º—ã –µ—â–µ –∑–¥–µ—Å—å,
                # —Ç–æ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º.
                if current_quiz_state_after_delay != quiz_state and self.state.get_active_quiz(chat_id) == quiz_state:
                     self.state.remove_active_quiz(chat_id) # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–∞ –∫–∞–∫-—Ç–æ –æ—Å—Ç–∞–ª–∞—Å—å
                return
        elif announce: # –ê–Ω–æ–Ω—Å –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
             announce_text_parts = ["üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è\\!"]
             if initiated_by_user:
                announce_text_parts.insert(0, f"{escape_markdown_v2(initiated_by_user.first_name)} –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\\!")
             try:
                 msg = await context.bot.send_message(chat_id, " ".join(announce_text_parts), parse_mode=ParseMode.MARKDOWN_V2)
                 quiz_state.announce_message_id = msg.message_id
                 quiz_state.message_ids_to_delete.add(msg.message_id)
             except Exception as e_announce_now: logger.error(f"–û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–æ–Ω—Å–∞: {e_announce_now}")

        # –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        await self._send_next_question(context, chat_id)

    async def _send_next_question(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
        quiz_state = self.state.get_active_quiz(chat_id)
        if not quiz_state or quiz_state.is_stopping:
            # –ï—Å–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ stop_quiz –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –º–µ—Å—Ç–∞
            return

        if quiz_state.current_question_index >= quiz_state.num_questions_to_ask:
            logger.info(f"–í—Å–µ {quiz_state.num_questions_to_ask} –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ {chat_id}. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–ª–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è.")
            # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ —Ç–∞–π–º–∞—É—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Ä–∞–Ω–Ω–µ–º—É –æ—Ç–≤–µ—Ç—É
            return

        question_data = quiz_state.get_current_question_data()
        if not question_data:
            logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {quiz_state.current_question_index} –≤ {chat_id}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
            await self._finalize_quiz_session(context, chat_id, error_occurred=True, error_message="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞.")
            return

        is_last = (quiz_state.current_question_index == quiz_state.num_questions_to_ask - 1)

        q_num_display = quiz_state.current_question_index + 1
        title_prefix = f"–í–æ–ø—Ä–æ—Å {q_num_display}/{quiz_state.num_questions_to_ask}"
        if quiz_state.quiz_type == "single": title_prefix = "–í–æ–ø—Ä–æ—Å"
        elif quiz_state.quiz_type == "daily": title_prefix = f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å {q_num_display}/{quiz_state.num_questions_to_ask}"
        # –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        current_cat_name = question_data.get('current_category_name_for_quiz', question_data.get('original_category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'))

        poll_id_str = await self.quiz_engine.send_quiz_poll(
            context, chat_id, question_data, title_prefix, quiz_state.open_period_seconds,
            quiz_state.quiz_type, is_last, quiz_state.current_question_index, current_cat_name
        )

        if poll_id_str:
            quiz_state.current_poll_id = poll_id_str
            poll_data_from_state = self.state.get_current_poll_data(poll_id_str) # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª QuizEngine
            if poll_data_from_state:
                quiz_state.current_poll_message_id = poll_data_from_state.get("message_id")
                quiz_state.question_start_time = get_current_utc_time() # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                # –ò–º—è –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞ —ç—Ç–æ–≥–æ –æ–ø—Ä–æ—Å–∞
                poll_data_from_state["job_poll_end_name"] = f"poll_end_chat_{chat_id}_poll_{poll_id_str}"
                quiz_state.current_poll_end_job_name = poll_data_from_state["job_poll_end_name"]
            else:
                logger.error(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è poll_id {poll_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ BotState —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è QuizEngine'–æ–º.")
                # –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
                await self._finalize_quiz_session(context, chat_id, error_occurred=True, error_message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞.")
                return


            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–ø—Ä–æ—Å–∞
            await schedule_job_unique(
                self.application.job_queue, quiz_state.current_poll_end_job_name, self._handle_poll_end_job,
                timedelta(seconds=quiz_state.open_period_seconds + self.app_config.job_grace_period_seconds), # + –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä
                data={"chat_id": chat_id, "ended_poll_id": poll_id_str}
            )
            quiz_state.current_question_index += 1 # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {quiz_state.current_question_index} –≤ {chat_id}.")
            await self._finalize_quiz_session(context, chat_id, error_occurred=True, error_message="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ Telegram.")

    async def _handle_poll_end_job(self, context: ContextTypes.DEFAULT_TYPE):
        job_data = context.job.data # type: ignore
        chat_id: int = job_data["chat_id"]
        ended_poll_id: str = job_data["ended_poll_id"]
        logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª —Ç–∞–π–º–∞—É—Ç –¥–ª—è poll_id {ended_poll_id} –≤ —á–∞—Ç–µ {chat_id}.")

        poll_info = self.state.get_current_poll_data(ended_poll_id) # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ (–≤–∫–ª—é—á–∞—è message_id)

        if not poll_info:
            logger.warning(f"_handle_poll_end_job: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è poll_id {ended_poll_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ BotState. –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å
            active_q = self.state.get_active_quiz(chat_id)
            if active_q and active_q.current_poll_id == ended_poll_id:
                logger.error(f"–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –≤ —á–∞—Ç–µ {chat_id} –æ–∂–∏–¥–∞–ª–∞ poll_id {ended_poll_id}, –Ω–æ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ BotState. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏.")
                await self._finalize_quiz_session(context, chat_id, error_occurred=True, error_message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ.")
            return

        # –ï—Å–ª–∏ –æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–Ω–Ω–∏–º –æ—Ç–≤–µ—Ç–æ–º –≤ serial_immediate —Ä–µ–∂–∏–º–µ)
        if poll_info.get("processed_by_early_answer", False):
            logger.info(f"–û–ø—Ä–æ—Å {ended_poll_id} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–Ω–Ω–∏–º –æ—Ç–≤–µ—Ç–æ–º). –ü—Ä–æ–ø—É—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É.")
            self.state.remove_current_poll(ended_poll_id) # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –∏–∑ BotState
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        await self.quiz_engine.send_solution_if_available(context, chat_id, ended_poll_id)
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –∏–∑ BotState –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.state.remove_current_poll(ended_poll_id)

        quiz_state = self.state.get_active_quiz(chat_id)
        if not quiz_state or quiz_state.is_stopping:
            if quiz_state and quiz_state.is_stopping: # –ï—Å–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                await self._finalize_quiz_session(context, chat_id, was_stopped=True)
            # –ï—Å–ª–∏ quiz_state –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∏–ª–∏ —ç—Ç–æ "–±–ª—É–∂–¥–∞—é—â–∏–π" job
            return

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏, –∞ –Ω–µ —Å—Ç–∞—Ä–æ–≥–æ
        # (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –æ—Ç–º–µ–Ω–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö jobs)
        # –û–¥–Ω–∞–∫–æ, ended_poll_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, —Ç–∞–∫ —á—Ç–æ —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω–æ–π,
        # –µ—Å–ª–∏ poll_id –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω–æ. –ù–æ poll_info.get("open_timestamp") –ø–æ–ª–µ–∑–µ–Ω.
        if quiz_state.quiz_start_time.timestamp() > poll_info.get("open_timestamp", 0) and quiz_state.current_poll_id != ended_poll_id:
             logger.warning(f"–¢–∞–π–º–∞—É—Ç –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –æ–ø—Ä–æ—Å–∞ {ended_poll_id} (–æ—Ç–∫—Ä—ã—Ç {poll_info.get('open_timestamp')}), —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏: {quiz_state.current_poll_id}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
             return


        is_last_q_in_series = poll_info.get("is_last_question_in_series", False) # –§–ª–∞–≥ –∏–∑ QuizEngine

        if is_last_q_in_series:
            logger.info(f"–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å ({ended_poll_id}) –≤ —Å–µ—Ä–∏–∏. –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
            await self._finalize_quiz_session(context, chat_id)
        elif quiz_state.quiz_mode == "serial_immediate":
            logger.info(f"–†–µ–∂–∏–º 'serial_immediate', –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç–µ {chat_id} –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞ {ended_poll_id}.")
            await self._send_next_question(context, chat_id)
        elif quiz_state.quiz_mode == "serial_interval":
            logger.info(f"–†–µ–∂–∏–º 'serial_interval', –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç–µ {chat_id} –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞ {ended_poll_id}.")
            if not quiz_state.next_question_job_name: # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–Ω–Ω–∏–º –æ—Ç–≤–µ—Ç–æ–º)
                await self._schedule_next_question_for_interval(context, chat_id)
        elif quiz_state.quiz_mode == "single_question":
            logger.info(f"–†–µ–∂–∏–º 'single_question', —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id} –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞ {ended_poll_id}.")
            await self._finalize_quiz_session(context, chat_id)
        # –î—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã, –µ—Å–ª–∏ –±—É–¥—É—Ç

    async def _schedule_next_question_for_interval(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
        quiz_state = self.state.get_active_quiz(chat_id)
        if not quiz_state or quiz_state.is_stopping or quiz_state.quiz_mode != "serial_interval" or \
           quiz_state.current_question_index >= quiz_state.num_questions_to_ask or not quiz_state.interval_seconds:
            # –£—Å–ª–æ–≤–∏—è, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω—É–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            return

        job_name = f"next_q_interval_chat_{chat_id}_q_idx_{quiz_state.current_question_index}"
        quiz_state.next_question_job_name = job_name # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã

        await schedule_job_unique(
            self.application.job_queue, job_name, self._trigger_next_question_for_interval,
            timedelta(seconds=quiz_state.interval_seconds), data={"chat_id": chat_id}
        )
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ({quiz_state.current_question_index + 1}/{quiz_state.num_questions_to_ask}) –¥–ª—è —Ä–µ–∂–∏–º–∞ 'serial_interval' –≤ —á–∞—Ç–µ {chat_id} —á–µ—Ä–µ–∑ {quiz_state.interval_seconds} —Å–µ–∫. Job: {job_name}")

    async def _trigger_next_question_for_interval(self, context: ContextTypes.DEFAULT_TYPE):
        job_data = context.job.data # type: ignore
        chat_id: int = job_data["chat_id"]
        logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞–¥–∞—á–∞ _trigger_next_question_for_interval –¥–ª—è —á–∞—Ç–∞ {chat_id}. Job: {context.job.name}") # type: ignore

        quiz_state = self.state.get_active_quiz(chat_id)
        if not quiz_state or quiz_state.is_stopping or quiz_state.quiz_mode != "serial_interval":
            return

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–º—è –∑–∞–¥–∞—á–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å
        if quiz_state.next_question_job_name == context.job.name: # type: ignore
            quiz_state.next_question_job_name = None

        await self._send_next_question(context, chat_id)


    async def _finalize_quiz_session(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int,
                                     was_stopped: bool = False, error_occurred: bool = False, error_message: Optional[str] = None):
        quiz_state = self.state.remove_active_quiz(chat_id) # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if not quiz_state:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è —á–∞—Ç–∞ {chat_id}, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ QuizState –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (—Ç–∏–ø: {quiz_state.quiz_type}, —Ä–µ–∂–∏–º: {quiz_state.quiz_mode}) –≤ —á–∞—Ç–µ {chat_id}. –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {was_stopped}, –û—à–∏–±–∫–∞: {error_occurred}, –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {error_message}")

        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π —Å–µ—Å—Å–∏–µ–π
        if quiz_state.next_question_job_name:
            jobs = self.application.job_queue.get_jobs_by_name(quiz_state.next_question_job_name)
            for job in jobs: job.schedule_removal()
            logger.debug(f"–û—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª): {quiz_state.next_question_job_name}")

        if quiz_state.current_poll_end_job_name: # –ï—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å, –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ —Ç–∞–π–º–∞—É—Ç
            jobs = self.application.job_queue.get_jobs_by_name(quiz_state.current_poll_end_job_name)
            for job in jobs: job.schedule_removal()
            logger.debug(f"–û—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Ç–∞–π–º–∞—É—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞: {quiz_state.current_poll_end_job_name}")

        # –ï—Å–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –∑–∞–∫—Ä—ã—Ç—å
        if was_stopped and quiz_state.current_poll_id and quiz_state.current_poll_message_id:
            try:
                await context.bot.stop_poll(chat_id=chat_id, message_id=quiz_state.current_poll_message_id)
                self.state.remove_current_poll(quiz_state.current_poll_id) # –£–±–∏—Ä–∞–µ–º –µ–≥–æ –∏–∑ BotState
                logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å {quiz_state.current_poll_id} (msg_id: {quiz_state.current_poll_message_id}) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except BadRequest as e_stop_poll:
                if "poll_has_already_been_closed" not in str(e_stop_poll).lower():
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø—Ä–æ—Å {quiz_state.current_poll_id} –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {e_stop_poll}")
            except Exception as e_gen_stop_poll:
                 logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–ø—Ä–æ—Å–∞ {quiz_state.current_poll_id}: {e_gen_stop_poll}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        if error_occurred and not quiz_state.scores: # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏ –Ω–µ—Ç –æ—á–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∞ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞)
            msg_text = f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {error_message}" if error_message else "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏."
            try: await context.bot.send_message(chat_id, msg_text, parse_mode=None)
            except Exception as e_send_err: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {e_send_err}")
        elif quiz_state.quiz_type != "single" or quiz_state.scores or (error_occurred and quiz_state.scores):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–µ—Å—Å–∏–π (–Ω–µ "single"), –∏–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—á–∫–∏, –∏–ª–∏ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞, –Ω–æ –æ—á–∫–∏ —É–∂–µ –µ—Å—Ç—å
            title = "üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            if was_stopped: title = "üìù –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
            elif error_occurred: title = "‚ö†Ô∏è –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å):"

            scores_for_display: List[Dict[str, Any]] = []
            for user_id_str, data in quiz_state.scores.items(): # user_id_str - —Å—Ç—Ä–æ–∫–∞ –∏–∑ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è
                scores_for_display.append({"user_id": int(user_id_str), "name": data["name"], "score": data["score"]})
            scores_for_display.sort(key=lambda x: -x["score"]) # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤

            results_text = self.score_manager.format_scores(
                scores_list=scores_for_display, title=title,
                is_session_score=True, num_questions_in_session=quiz_state.num_questions_to_ask
            )
            try: await context.bot.send_message(chat_id, results_text, parse_mode=ParseMode.MARKDOWN_V2)
            except Exception as e_send_res: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e_send_res}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∞–Ω–æ–Ω—Å—ã, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–∞—Ä—ã–µ –º–µ–Ω—é)
        for msg_id in quiz_state.message_ids_to_delete:
            try: await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except Exception as e_del_msg: logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {e_del_msg}")

        logger.info(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –≤ —á–∞—Ç–µ {chat_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")


    async def _handle_early_answer_for_session(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int, answered_poll_id: str):
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–Ω–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–ø—Ä–æ—Å {answered_poll_id} –≤ —á–∞—Ç–µ {chat_id} (—Ä–µ–∂–∏–º 'serial_immediate').")
        quiz_state = self.state.get_active_quiz(chat_id)
        if not quiz_state or quiz_state.is_stopping or quiz_state.quiz_mode != "serial_immediate" or quiz_state.current_poll_id != answered_poll_id:
            logger.debug(f"–†–∞–Ω–Ω–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ–ø—Ä–æ—Å–∞ {answered_poll_id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω (–Ω–µ —Ç–∞ —Å–µ—Å—Å–∏—è / –Ω–µ —Ç–æ—Ç —Ä–µ–∂–∏–º / –Ω–µ —Ç–æ—Ç –æ–ø—Ä–æ—Å / —Å–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è).")
            return

        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω
        if quiz_state.current_poll_end_job_name:
            jobs = self.application.job_queue.get_jobs_by_name(quiz_state.current_poll_end_job_name)
            for job in jobs: job.schedule_removal()
            logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Ç–∞–π–º–∞—É—Ç–∞ {quiz_state.current_poll_end_job_name} –∏–∑-–∑–∞ —Ä–∞–Ω–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ {answered_poll_id}.")
            quiz_state.current_poll_end_job_name = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–º—è –∑–∞–¥–∞—á–∏

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)
        await self.quiz_engine.send_solution_if_available(context, chat_id, answered_poll_id)
        # –î–∞–Ω–Ω—ã–µ –æ–± –æ–ø—Ä–æ—Å–µ (answered_poll_id) –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ BotState –≤ send_solution_if_available –∏–ª–∏ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
        # self.state.remove_current_poll(answered_poll_id) - —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ QuizEngine –∏–ª–∏ –∑–¥–µ—Å—å

        poll_info = self.state.get_current_poll_data(answered_poll_id) # –ú–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ None, –µ—Å–ª–∏ QuizEngine —É–¥–∞–ª–∏–ª
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
        if poll_info and poll_info.get("is_last_question_in_series", False):
            logger.info(f"–†–∞–Ω–Ω–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å ({answered_poll_id}). –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
            self.state.remove_current_poll(answered_poll_id) # –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—á–∏—â–µ–Ω–æ
            await self._finalize_quiz_session(context, chat_id)
        elif not poll_info and quiz_state.current_question_index >= quiz_state.num_questions_to_ask: # –ï—Å–ª–∏ poll_info —É–∂–µ —É–¥–∞–ª–µ–Ω, –Ω–æ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –∏–Ω–¥–µ–∫—Å—É
             logger.info(f"–†–∞–Ω–Ω–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å (–∏–Ω–¥–µ–∫—Å {quiz_state.current_question_index-1}), poll_info —É–∂–µ —É–¥–∞–ª–µ–Ω. –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
             await self._finalize_quiz_session(context, chat_id)
        else:
            if poll_info: self.state.remove_current_poll(answered_poll_id) # –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—á–∏—â–µ–Ω–æ
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ —Ä–∞–Ω–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ {answered_poll_id} –≤ —á–∞—Ç–µ {chat_id}.")
            await self._send_next_question(context, chat_id)

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è ConversationHandler (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã) ---
    async def quiz_command_entry(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        if not update.message or not update.effective_chat or not update.effective_user:
            return ConversationHandler.END

        chat_id = update.effective_chat.id
        user = update.effective_user

        active_quiz = self.state.get_active_quiz(chat_id)
        if active_quiz and not active_quiz.is_stopping:
            await update.message.reply_text("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∏–¥–µ—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ: /stopquiz.", parse_mode=None)
            return ConversationHandler.END

        args = context.args if context.args else []
        parsed_num_q: Optional[int] = None
        parsed_categories: List[str] = [] # –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        parsed_announce_flag: Optional[bool] = None

        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: [—á–∏—Å–ª–æ_–≤–æ–ø—Ä–æ—Å–æ–≤] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è1] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è2] ... [announce]
        temp_args = list(args)
        if temp_args and temp_args[-1].lower() == "announce":
            parsed_announce_flag = True
            temp_args.pop()
        
        if temp_args and temp_args[0].isdigit():
            try:
                num_val = int(temp_args[0])
                if 1 <= num_val <= self.app_config.max_questions_per_session:
                    parsed_num_q = num_val
                    temp_args.pop(0) # –£–±–∏—Ä–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                else:
                    await update.message.reply_text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ {self.app_config.max_questions_per_session}.", parse_mode=None)
                    return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            except ValueError:
                # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —á–∏—Å–ª–æ, –Ω–æ –Ω–µ "announce", –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                pass 
        
        # –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã - —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if temp_args:
            # –ï—Å–ª–∏ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –∏ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–ª–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            full_cat_str = " ".join(temp_args)
            if self.category_manager.is_valid_category(full_cat_str):
                parsed_categories.append(full_cat_str)
            else: # –ò–Ω–∞—á–µ, –∫–∞–∂–¥—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–∏–ª–∏ –ø–æ–ø—ã—Ç–∫–∞)
                parsed_categories.extend(temp_args)

        is_quick_launch = parsed_num_q is not None or bool(parsed_categories)

        if is_quick_launch:
            params = self._get_effective_quiz_params(chat_id, parsed_num_q)
            final_announce = parsed_announce_flag if parsed_announce_flag is not None else params["announce_quiz"]
            
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö. –ò–Ω–∞—á–µ - —Ä–µ–∂–∏–º —Å–ª—É—á–∞–π–Ω—ã—Ö.
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∫–∞–∑–∞–Ω—ã, is_random_categories_mode –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False.
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ù–ï —É–∫–∞–∑–∞–Ω—ã, is_random_categories_mode –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True.
            await self._initiate_quiz_session(
                context, chat_id, user,
                params["quiz_type_key"], params["quiz_mode"],
                params["num_questions"], # params —É–∂–µ —É—á—Ç–µ—Ç parsed_num_q
                params["open_period_seconds"],
                final_announce,
                params["announce_delay_seconds"],
                category_names_for_quiz=parsed_categories if parsed_categories else None,
                is_random_categories_mode=not bool(parsed_categories), # True, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ parsed_categories –ø—É—Å—Ç
                interval_seconds=params.get("interval_seconds"),
                original_command_message_id=update.message.message_id
            )
            return ConversationHandler.END # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫, –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω—É–∂–µ–Ω

        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ /quiz announce
        if parsed_announce_flag is True and not parsed_num_q and not parsed_categories:
            params = self._get_effective_quiz_params(chat_id) # –ë–µ—Ä–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞—Ç–∞
            await self._initiate_quiz_session(
                context, chat_id, user,
                params["quiz_type_key"], params["quiz_mode"],
                params["num_questions"], params["open_period_seconds"],
                True, # Announce = True, —Ç–∞–∫ –∫–∞–∫ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ
                params["announce_delay_seconds"],
                is_random_categories_mode=True, # –°–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                interval_seconds=params.get("interval_seconds"),
                original_command_message_id=update.message.message_id
            )
            return ConversationHandler.END

        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        params_for_interactive = self._get_effective_quiz_params(chat_id)
        context.chat_data['quiz_cfg_progress'] = {
            'num_questions': params_for_interactive["num_questions"],
            'category_name': "random", # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "random"
            'announce': params_for_interactive["announce_quiz"],
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è –≤ –ø—Ä–æ—Å—Ç–æ–º –º–µ–Ω—é, –Ω–æ –Ω—É–∂–Ω—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            'open_period_seconds': params_for_interactive["open_period_seconds"],
            'announce_delay_seconds': params_for_interactive["announce_delay_seconds"],
            'quiz_type_key': params_for_interactive["quiz_type_key"], # –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
            'quiz_mode': params_for_interactive["quiz_mode"],
            'interval_seconds': params_for_interactive.get("interval_seconds"),
            'original_command_message_id': update.message.message_id, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            'chat_id': chat_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ update.message –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        }
        await self._send_quiz_cfg_message(update, context)
        return CFG_QUIZ_OPTIONS

    async def _send_quiz_cfg_message(self, update_or_query: Union[Update, CallbackQuery], context: ContextTypes.DEFAULT_TYPE) -> None:
        cfg = context.chat_data.get('quiz_cfg_progress')
        if not cfg:
            logger.error("–î–∞–Ω–Ω—ã–µ 'quiz_cfg_progress' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ chat_data –¥–ª—è _send_quiz_cfg_message.")
            # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–ª–±—ç–∫
            if isinstance(update_or_query, CallbackQuery):
                await update_or_query.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            return

        num_q_display = cfg['num_questions']
        cat_display_text = '–°–ª—É—á–∞–π–Ω—ã–µ' if cfg['category_name'] == 'random' else cfg['category_name']
        cat_button_text = cat_display_text[:15] + "..." if len(cat_display_text) > 18 else cat_display_text # –î–ª—è –∫–Ω–æ–ø–∫–∏

        announce_text = '–í–∫–ª' if cfg['announce'] else '–í—ã–∫–ª'
        delay_text = f" (–∑–∞–¥–µ—Ä–∂–∫–∞ {cfg['announce_delay_seconds']} —Å–µ–∫)" if cfg['announce'] else ""

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º \\ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
        text = (f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã*\n\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: `{num_q_display}`\n"
                f"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: `{escape_markdown_v2(cat_display_text)}`\n"
                f"üì¢ –ê–Ω–æ–Ω—Å: `{announce_text}`{escape_markdown_v2(delay_text)}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ\\.") # –ò–°–ü–†–ê–í–õ–ï–ù–û: \\.

        kb_layout = [
            [InlineKeyboardButton(f"–í–æ–ø—Ä–æ—Å—ã: {num_q_display}", callback_data=CB_QCFG_NUM_MENU),
             InlineKeyboardButton(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_button_text}", callback_data=CB_QCFG_CAT_MENU)], # –ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏, —Ç.–∫. —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            [InlineKeyboardButton(f"–ê–Ω–æ–Ω—Å: {announce_text}", callback_data=CB_QCFG_ANNOUNCE)],
            [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data=CB_QCFG_START)],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CB_QCFG_CANCEL)]
        ]
        markup = InlineKeyboardMarkup(kb_layout)

        message_to_edit_id = context.chat_data.get('_quiz_cfg_msg_id')
        
        current_message: Optional[Message] = None
        is_callback = isinstance(update_or_query, CallbackQuery)

        if is_callback and update_or_query.message:
            current_message = update_or_query.message
        elif isinstance(update_or_query, Update) and update_or_query.message: # –ï—Å–ª–∏ —ç—Ç–æ Update –æ—Ç MessageHandler
            current_message = update_or_query.message

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        if current_message and message_to_edit_id == current_message.message_id:
            try:
                await current_message.edit_text(text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN_V2)
                if is_callback: await update_or_query.answer()
                return
            except BadRequest as e_br:
                if "Message is not modified" not in str(e_br).lower():
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (BadRequest): {e_br}\n–¢–µ–∫—Å—Ç: {text}")
                if is_callback: await update_or_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ
                return
            except Exception as e_edit: # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (edit): {e_edit}\n–¢–µ–∫—Å—Ç: {text}")
                if is_callback: await update_or_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é.", show_alert=True)
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–µ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                return

        # –ï—Å–ª–∏ ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ (–µ—Å–ª–∏ –±—ã–ª–æ) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if message_to_edit_id and (not current_message or message_to_edit_id != current_message.message_id):
             target_chat_id_for_delete = (current_message.chat_id if current_message 
                                         else cfg.get('chat_id', update_or_query.effective_chat.id if update_or_query.effective_chat else None))
             if target_chat_id_for_delete:
                try: 
                    await context.bot.delete_message(target_chat_id_for_delete, message_to_edit_id)
                    logger.debug(f"–°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {message_to_edit_id} —É–¥–∞–ª–µ–Ω–æ.")
                except Exception as e_del_old: 
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {message_to_edit_id}: {e_del_old}")
             context.chat_data['_quiz_cfg_msg_id'] = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∞—Ä–æ–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ


        target_chat_id_for_send = (current_message.chat_id if current_message 
                                   else cfg.get('chat_id', update_or_query.effective_chat.id if update_or_query.effective_chat else None))
        if not target_chat_id_for_send:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            if is_callback: await update_or_query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç.", show_alert=True)
            return

        try:
            sent_msg = await context.bot.send_message(target_chat_id_for_send, text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN_V2)
            context.chat_data['_quiz_cfg_msg_id'] = sent_msg.message_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if is_callback: await update_or_query.answer()
        except Exception as e_send_new:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e_send_new}\n–¢–µ–∫—Å—Ç: {text}")
            if is_callback: await update_or_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é.", show_alert=True)


    async def handle_quiz_cfg_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        query = update.callback_query
        if not query or not query.data: return CFG_QUIZ_OPTIONS # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

        action = query.data
        cfg = context.chat_data.get('quiz_cfg_progress')

        if not cfg: # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã
            await query.answer("–°–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /quiz.", show_alert=True)
            if query.message:
                try: await query.message.delete() # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                except Exception as e_del_expired: logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é (–∏—Å—Ç–µ–∫—à–∞—è —Å–µ—Å—Å–∏—è): {e_del_expired}")
            return ConversationHandler.END

        # –û–±–Ω–æ–≤–ª—è–µ–º chat_id –≤ cfg –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Ç–µ—Ä—è–Ω –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∫–æ–ª–±—ç–∫
        if query.message and 'chat_id' not in cfg:
            cfg['chat_id'] = query.message.chat_id


        if action == CB_QCFG_BACK:
            await self._send_quiz_cfg_message(query, context) # query –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            return CFG_QUIZ_OPTIONS

        elif action == CB_QCFG_NUM_MENU:
            kb_num = [[InlineKeyboardButton("1", callback_data=f"{CB_QCFG_NUM_VAL}:1"),
                       InlineKeyboardButton("5", callback_data=f"{CB_QCFG_NUM_VAL}:5"),
                       InlineKeyboardButton("10", callback_data=f"{CB_QCFG_NUM_VAL}:10")],
                      [InlineKeyboardButton("–î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ...", callback_data=f"{CB_QCFG_NUM_VAL}:custom")],
                      [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_QCFG_BACK)]]
            try:
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:", reply_markup=InlineKeyboardMarkup(kb_num), parse_mode=None)
                await query.answer()
            except Exception as e_edit_num_menu:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e_edit_num_menu}")
                await query.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é.", show_alert=True)
            return CFG_QUIZ_OPTIONS

        elif action.startswith(CB_QCFG_NUM_VAL):
            val_str = action.split(":", 1)[1]
            if val_str == "custom":
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º \\ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2 —Å–∏–º–≤–æ–ª–æ–≤
                    await query.edit_message_text(
                        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ \\(–æ—Ç 1 –¥–æ {self.app_config.max_questions_per_session}\\)\\.\n"
                        f"–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã\\.", 
                        reply_markup=None, 
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                    await query.answer()
                except Exception as e_edit_custom_num:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e_edit_custom_num}")
                    await query.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", show_alert=True)
                return CFG_QUIZ_NUM_QS # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
            else:
                try:
                    num = int(val_str)
                    if 1 <= num <= self.app_config.max_questions_per_session: 
                        cfg['num_questions'] = num
                    else: 
                        await query.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ: {num}. –î–æ–ø—É—Å—Ç–∏–º–æ –æ—Ç 1 –¥–æ {self.app_config.max_questions_per_session}.", show_alert=True)
                except ValueError: 
                    await query.answer(f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —á–∏—Å–ª–∞: {val_str}.", show_alert=True)
                await self._send_quiz_cfg_message(query, context) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
                return CFG_QUIZ_OPTIONS

        elif action == CB_QCFG_CAT_MENU:
            available_cats = self.category_manager.get_all_category_names() # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞
            cat_kb_list = [[InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ", callback_data=f"{CB_QCFG_CAT_VAL}:random")]]
            for cat_name in available_cats[:self.app_config.max_interactive_categories_to_show]: # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, –Ω–µ Markdown
                cat_kb_list.append([InlineKeyboardButton(cat_name, callback_data=f"{CB_QCFG_CAT_VAL}:{cat_name}")])
            if len(available_cats) > self.app_config.max_interactive_categories_to_show:
                 cat_kb_list.append([InlineKeyboardButton(f"(–µ—â–µ {len(available_cats) - self.app_config.max_interactive_categories_to_show}...)", callback_data="qcfg_noop")]) # noop - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
            cat_kb_list.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_QCFG_BACK)])
            
            try:
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(cat_kb_list), parse_mode=None)
                await query.answer()
            except Exception as e_edit_cat_menu:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e_edit_cat_menu}")
                await query.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é.", show_alert=True)
            return CFG_QUIZ_OPTIONS

        elif action.startswith(CB_QCFG_CAT_VAL):
            cfg['category_name'] = action.split(":", 1)[1] # 'random' –∏–ª–∏ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await self._send_quiz_cfg_message(query, context)
            return CFG_QUIZ_OPTIONS
        
        elif action == "qcfg_noop": # –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "(–µ—â–µ ...)"
            await query.answer() # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–±—ç–∫–∞
            return CFG_QUIZ_OPTIONS


        elif action == CB_QCFG_ANNOUNCE:
            cfg['announce'] = not cfg['announce']
            await self._send_quiz_cfg_message(query, context)
            return CFG_QUIZ_OPTIONS

        elif action == CB_QCFG_START:
            final_cfg = context.chat_data.pop('quiz_cfg_progress') # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            quiz_cfg_msg_id = context.chat_data.pop('_quiz_cfg_msg_id', None) # –£–¥–∞–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é
            
            start_message_text = "üöÄ –ó–∞–ø—É—Å–∫–∞—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É..."
            if query.message and quiz_cfg_msg_id == query.message.message_id :
                try: 
                    await query.edit_message_text(start_message_text, reply_markup=None, parse_mode=None)
                except Exception as e_edit_start: 
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e_edit_start}. –û—Ç–ø—Ä–∞–≤–ª—é –Ω–æ–≤–æ–µ.")
                    try: await context.bot.send_message(final_cfg['chat_id'], start_message_text, parse_mode=None)
                    except Exception as e_send_start: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e_send_start}")
            elif query.message: # –ï—Å–ª–∏ ID –Ω–µ —Å–æ–≤–ø–∞–ª–∏, –Ω–æ –µ—Å—Ç—å query.message (–Ω–∞–ø—Ä–∏–º–µ—Ä, —é–∑–µ—Ä –Ω–∞–∂–∞–ª —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É)
                 try: 
                    await context.bot.send_message(final_cfg['chat_id'], start_message_text, parse_mode=None)
                    # –ú–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–¥–∞–ª–∏—Ç—å query.message, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Ç–æ, —á—Ç–æ –º—ã –æ–∂–∏–¥–∞–ª–∏
                    if quiz_cfg_msg_id != query.message.message_id: await query.message.delete()
                 except Exception as e_fallback_start: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (fallback): {e_fallback_start}")
            else: # –ï—Å–ª–∏ query.message –Ω–µ—Ç (–æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π –¥–ª—è –∫–æ–ª–±—ç–∫–∞ –æ—Ç –∫–Ω–æ–ø–∫–∏)
                 try: await context.bot.send_message(final_cfg['chat_id'], start_message_text, parse_mode=None)
                 except Exception as e_send_start_no_q_msg: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ (–Ω–µ—Ç query.message): {e_send_start_no_q_msg}")

            await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ final_cfg
            final_num_q = final_cfg['num_questions']
            # quiz_type_key –∏ quiz_mode –±–µ—Ä—É—Ç—Å—è –∏–∑ cfg, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ _get_effective_quiz_params
            # –∏ –º–æ–≥–ª–∏ –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –µ—Å–ª–∏ –±—ã –ª–æ–≥–∏–∫–∞ –±—ã–ª–∞ —Å–ª–æ–∂–Ω–µ–µ (–Ω–æ –∑–¥–µ—Å—å –æ–Ω–∏ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è –≤ –º–µ–Ω—é)
            final_quiz_type_key = final_cfg.get('quiz_type_key', "single" if final_num_q == 1 else "session")
            final_quiz_mode = final_cfg.get('quiz_mode', "single_question" if final_num_q == 1 else "serial_immediate")


            await self._initiate_quiz_session(
                context, final_cfg['chat_id'], query.from_user,
                final_quiz_type_key, final_quiz_mode, final_num_q,
                final_cfg['open_period_seconds'], final_cfg['announce'], final_cfg['announce_delay_seconds'],
                category_names_for_quiz=[final_cfg['category_name']] if final_cfg['category_name'] != "random" else None,
                is_random_categories_mode=(final_cfg['category_name'] == "random"),
                interval_seconds=final_cfg.get('interval_seconds'),
                original_command_message_id=final_cfg.get('original_command_message_id')
            )
            return ConversationHandler.END

        elif action == CB_QCFG_CANCEL:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –æ—Ç–º–µ–Ω—ã
            return await self.cancel_quiz_cfg_command(update, context)

        # –ï—Å–ª–∏ –∫–æ–ª–±—ç–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ)
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return CFG_QUIZ_OPTIONS


    async def handle_typed_num_questions(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        if not update.message or not update.message.text: return CFG_QUIZ_NUM_QS # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        
        cfg = context.chat_data.get('quiz_cfg_progress')
        if not cfg:
            await update.message.reply_text("–°–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /quiz.", parse_mode=None)
            return ConversationHandler.END

        try:
            num = int(update.message.text.strip())
            if 1 <= num <= self.app_config.max_questions_per_session:
                cfg['num_questions'] = num
                try: await update.message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —á–∏—Å–ª–æ–º
                except Exception as e_del_num: logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∏—Å–ª–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤: {e_del_num}")
                
                await self._send_quiz_cfg_message(update, context) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
                return CFG_QUIZ_OPTIONS
            else:
                await update.message.reply_text(
                    f"–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ {self.app_config.max_questions_per_session}\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã\\.",
                    parse_mode=ParseMode.MARKDOWN_V2
                )
        except ValueError:
            await update.message.reply_text("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã\\.", parse_mode=ParseMode.MARKDOWN_V2)
        
        return CFG_QUIZ_NUM_QS # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —á–∏—Å–ª–∞, –µ—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω

    async def cancel_quiz_cfg_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –ø—Ä–∏—à–ª–∞ –æ—Ç –∫–Ω–æ–ø–∫–∏
        final_message_text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–∞."
        
        quiz_cfg_msg_id = context.chat_data.pop('_quiz_cfg_msg_id', None) # –£–¥–∞–ª—è–µ–º ID –∏–∑ chat_data
        chat_id_for_ops = context.chat_data.get('quiz_cfg_progress', {}).get('chat_id') # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ cfg

        if not chat_id_for_ops and query and query.message : chat_id_for_ops = query.message.chat_id
        if not chat_id_for_ops and update.message : chat_id_for_ops = update.message.chat_id


        if query: # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
            await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
            if query.message and quiz_cfg_msg_id == query.message.message_id:
                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ —Å–∞–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                try: await query.edit_message_text(final_message_text, reply_markup=None, parse_mode=None)
                except Exception as e_edit_cancel: logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e_edit_cancel}")
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏–ª–∏ ID –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
                if quiz_cfg_msg_id and chat_id_for_ops:
                    try: await context.bot.delete_message(chat_id_for_ops, quiz_cfg_msg_id)
                    except Exception as e_del_old_cfg: logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ (–∫–Ω–æ–ø–∫–∞): {e_del_old_cfg}")
                if chat_id_for_ops: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ, –µ—Å–ª–∏ –µ—Å—Ç—å chat_id
                    try: await context.bot.send_message(chat_id_for_ops, final_message_text, parse_mode=None)
                    except Exception as e_send_cancel_btn: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã (–∫–Ω–æ–ø–∫–∞): {e_send_cancel_btn}")

        elif update.message: # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /cancel
            if chat_id_for_ops:
                 await context.bot.send_message(chat_id_for_ops, final_message_text, parse_mode=None)
            else: # –ï—Å–ª–∏ chat_id –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã)
                 await update.message.reply_text(final_message_text, parse_mode=None)

            if quiz_cfg_msg_id and chat_id_for_ops: # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
                try: await context.bot.delete_message(chat_id_for_ops, quiz_cfg_msg_id)
                except Exception as e_del_cfg_cmd: logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ (–∫–æ–º–∞–Ω–¥–∞): {e_del_cfg_cmd}")

        context.chat_data.pop('quiz_cfg_progress', None) # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.info(f"–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω (—á–∞—Ç: {chat_id_for_ops if chat_id_for_ops else 'N/A'}).")
        return ConversationHandler.END

    # --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ---
    async def stop_quiz_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if not update.effective_chat or not update.effective_user or not update.message: return
        chat_id = update.effective_chat.id
        user_who_stopped = update.effective_user

        quiz_state = self.state.get_active_quiz(chat_id)
        if not quiz_state or quiz_state.is_stopping:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.", parse_mode=None)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        can_stop = await is_user_admin_in_update(update, context)
        # –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –∫—Ä–æ–º–µ "daily" (–µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
        if not can_stop and quiz_state.created_by_user_id == user_who_stopped.id:
            if quiz_state.quiz_type != "daily": 
                can_stop = True
        
        if not can_stop:
            await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä (–∫—Ä–æ–º–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã) –º–æ–≥—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.", parse_mode=None)
            return

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_who_stopped.full_name} (ID: {user_who_stopped.id}) –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤ —á–∞—Ç–µ {chat_id}.")
        quiz_state.is_stopping = True # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º \\ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2 —Å–∏–º–≤–æ–ª–æ–≤
        await update.message.reply_text(
            f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {escape_markdown_v2(user_who_stopped.first_name)}\\. –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤\\.\\.\\.", 
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ (–ø–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Ç.–¥.)
        await self._finalize_quiz_session(context, chat_id, was_stopped=True)


    def get_handlers(self) -> list:
        # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è ConversationHandler
        # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ—Ç cancel_quiz_cfg_command —Å–ø–µ—Ü–∏—Ñ–∏—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
        # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–π /cancel, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ common_handlers –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∏–Ω–∞—á–µ.
        cancel_handler_for_conv = CommandHandler(self.app_config.commands.cancel, self.cancel_quiz_cfg_command)

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler(self.app_config.commands.quiz, self.quiz_command_entry)],
            states={
                CFG_QUIZ_OPTIONS: [CallbackQueryHandler(self.handle_quiz_cfg_callback, pattern=f"^{CB_QCFG_}")],
                CFG_QUIZ_NUM_QS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_typed_num_questions)],
            },
            fallbacks=[cancel_handler_for_conv], # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π cancel –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
            per_chat=True, 
            per_user=True, # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –¥–∏–∞–ª–æ–≥–æ–≤
            per_message=True, # –í–ê–ñ–ù–û –¥–ª—è CallbackQueryHandler, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å PTBUserWarning –∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            name="quiz_interactive_setup_conv", # –ò–º—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            persistent=True, # –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ (–µ—Å–ª–∏ PicklePersistence –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
            allow_reentry=True # –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–æ–π—Ç–∏ –≤ –¥–∏–∞–ª–æ–≥ —Å–Ω–æ–≤–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, /quiz –µ—â–µ —Ä–∞–∑)
        )
        return [
            conv_handler,
            CommandHandler(self.app_config.commands.stop_quiz, self.stop_quiz_command)
        ]

