#handlers/common_handlers.py
import logging
from typing import List, Optional

from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, ConversationHandler # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω ConversationHandler
from telegram.constants import ParseMode

from app_config import AppConfig
from state import BotState
from utils import escape_markdown_v2
from modules.category_manager import CategoryManager

logger = logging.getLogger(__name__)

class CommonHandlers:
    def __init__(self, app_config: AppConfig, category_manager: CategoryManager, bot_state: BotState):
        self.app_config = app_config
        self.category_manager = category_manager
        self.bot_state = bot_state # bot_state —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥–∞–º–∏ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if not update.effective_user or not update.message:
            return

        user = update.effective_user
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {escape_markdown_v2(user.first_name)}\\! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω\\.\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/{self.app_config.commands.quiz} \\- {escape_markdown_v2('–Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É')}\n"
            f"/{self.app_config.commands.top} \\- {escape_markdown_v2('–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —á–∞—Ç–∞')}\n"
            f"/{self.app_config.commands.categories} \\- {escape_markdown_v2('–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}\n"
            f"/{self.app_config.commands.help} \\- {escape_markdown_v2('–ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É')}"
        )
        try:
            sent_msg = await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN_V2)
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            bot_state = context.bot_data.get('bot_state')
            if bot_state:
                bot_state.add_message_for_deletion(update.effective_chat.id, sent_msg.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ start_command: {e}")


    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if not update.message:
            return

        help_full_text = (
            f"*{escape_markdown_v2('–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:')}*\n\n"
            f"*{escape_markdown_v2('üìù –í–∏–∫—Ç–æ—Ä–∏–Ω–∞')}*\n"
            f"/{self.app_config.commands.quiz} \\- {escape_markdown_v2('–Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É (–º–æ–∂–Ω–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)')}\n"
            f"{escape_markdown_v2('–ü—Ä–∏–º–µ—Ä—ã:')}\n"
            f"`/{self.app_config.commands.quiz} 5` \\- {escape_markdown_v2('–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∏–∑ 5 –≤–æ–ø—Ä–æ—Å–æ–≤')}\n"
            f"`/{self.app_config.commands.quiz} {escape_markdown_v2('–ù–∞–∑–≤–∞–Ω–∏–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏')}` \\- {escape_markdown_v2('–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}\n"
            f"`/{self.app_config.commands.quiz} 10 {escape_markdown_v2('–ù–∞–∑–≤–∞–Ω–∏–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏')}` \\- {escape_markdown_v2('–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç')}\n"
            f"`/{self.app_config.commands.quiz} announce` \\- {escape_markdown_v2('–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å –∞–Ω–æ–Ω—Å–æ–º')}\n"
            f"/{self.app_config.commands.stop_quiz} \\- {escape_markdown_v2('–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É (–∞–¥–º–∏–Ω/–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä)')}\n\n"

            f"*{escape_markdown_v2('üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏')}*\n"
            f"/{self.app_config.commands.categories} \\- {escape_markdown_v2('–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤')}\n\n"

            f"*{escape_markdown_v2('üìä –†–µ–π—Ç–∏–Ω–≥ –∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')}*\n"
            f"/{self.app_config.commands.top} \\- {escape_markdown_v2('–ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞')}\n"
            f"/{self.app_config.commands.global_top} \\- {escape_markdown_v2('–ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥')}\n"
            f"/{self.app_config.commands.mystats} \\- {escape_markdown_v2('–ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')}\n\n"

            f"*{escape_markdown_v2('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞)')}*\n"
            f"/{getattr(self.app_config.commands, 'admin_settings', 'adminsettings')} \\- {escape_markdown_v2('–æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞')}\n"
            f"/{getattr(self.app_config.commands, 'view_chat_config', 'viewchatconfig')} \\- {escape_markdown_v2('–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞')}\n\n"


            f"*{escape_markdown_v2('‚ùì –û–±—â–∏–µ')}*\n"
            f"/{self.app_config.commands.help} \\- {escape_markdown_v2('–ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É')}\n"
            f"/{self.app_config.commands.start} \\- {escape_markdown_v2('–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º')}\n"
            f"/{self.app_config.commands.cancel} \\- {escape_markdown_v2('–æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)')}"
        )
        try:
            sent_msg = await update.message.reply_text(help_full_text, parse_mode=ParseMode.MARKDOWN_V2)
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            bot_state = context.bot_data.get('bot_state')
            if bot_state:
                bot_state.add_message_for_deletion(update.effective_chat.id, sent_msg.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ help_command: {e}")

    async def categories_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if not update.message: return
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞)
        categories_data = self.category_manager.get_all_category_names(with_question_counts=True)

        if not categories_data:
            try:
                sent_msg = await update.message.reply_text(escape_markdown_v2("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."), parse_mode=ParseMode.MARKDOWN_V2)
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                bot_state = context.bot_data.get('bot_state')
                if bot_state:
                    bot_state.add_message_for_deletion(update.effective_chat.id, sent_msg.message_id)
            except Exception as e:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ categories_command (–Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π): {e}")
            return

        response_lines = [f"*{escape_markdown_v2('üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ (–∫–æ–ª-–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤):')}*"]
        for cat_info in sorted(categories_data, key=lambda x: x.get('name', '').lower()):
            cat_name_escaped = escape_markdown_v2(cat_info.get('name', 'N/A'))
            q_count = cat_info.get('count', 0)
            response_lines.append(f"{escape_markdown_v2('-')} `{cat_name_escaped}` {escape_markdown_v2(f'({q_count})')}")

        full_message = "\n".join(response_lines)

        try:
            if len(full_message) > 4096:
                logger.warning("–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–∞—Å—Ç—è–º–∏.")
                part_buffer = response_lines[0] + "\n"
                for line_idx, line_content in enumerate(response_lines[1:], 1):
                    if len(part_buffer) + len(line_content) + 1 > 4000:
                        sent_msg = await update.message.reply_text(part_buffer.strip(), parse_mode=ParseMode.MARKDOWN_V2)
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                        bot_state = context.bot_data.get('bot_state')
                        if bot_state:
                            bot_state.add_message_for_deletion(update.effective_chat.id, sent_msg.message_id)
                        part_buffer = line_content
                    else:
                        part_buffer += "\n" + line_content
                if part_buffer.strip():
                    sent_msg = await update.message.reply_text(part_buffer.strip(), parse_mode=ParseMode.MARKDOWN_V2)
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    bot_state = context.bot_data.get('bot_state')
                    if bot_state:
                        bot_state.add_message_for_deletion(update.effective_chat.id, sent_msg.message_id)
            else:
                sent_msg = await update.message.reply_text(full_message, parse_mode=ParseMode.MARKDOWN_V2)
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                bot_state = context.bot_data.get('bot_state')
                if bot_state:
                    bot_state.add_message_for_deletion(update.effective_chat.id, sent_msg.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞—á–∞–ª–æ): {full_message[:500]}")
            try:
                sent_msg = await update.message.reply_text(
                    escape_markdown_v2("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                bot_state = context.bot_data.get('bot_state')
                if bot_state:
                    bot_state.add_message_for_deletion(update.effective_chat.id, sent_msg.message_id)
            except Exception as e_fallback:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ fallback-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è categories_command: {e_fallback}")


    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
        if not update.message or not update.effective_user or not update.effective_chat:
             return ConversationHandler.END # type: ignore [attr-defined]

        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        cancel_message = escape_markdown_v2("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω–∞. –ï—Å–ª–∏ –≤—ã –±—ã–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ, –æ–Ω –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è.")
        try:
            sent_msg = await update.message.reply_text(cancel_message, parse_mode=ParseMode.MARKDOWN_V2)
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            bot_state = context.bot_data.get('bot_state')
            if bot_state:
                bot_state.add_message_for_deletion(update.effective_chat.id, sent_msg.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ cancel_command —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —á–∞—Ç–µ {chat_id} –≤—ã–∑–≤–∞–ª /{self.app_config.commands.cancel}.")
        return ConversationHandler.END # type: ignore [attr-defined]

    def get_handlers(self) -> List[CommandHandler]:
        handlers_list = [
            CommandHandler(self.app_config.commands.start, self.start_command),
            CommandHandler(self.app_config.commands.help, self.help_command),
            CommandHandler(self.app_config.commands.categories, self.categories_command),
            CommandHandler(self.app_config.commands.cancel, self.cancel_command),
        ]
        return handlers_list
