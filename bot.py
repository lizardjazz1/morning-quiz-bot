#bot.py
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = os.path.dirname(os.path.abspath(__file__))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

import logging
import asyncio
from typing import Optional # –î–æ–±–∞–≤–ª–µ–Ω Optional

from telegram import Update, BotCommand
from telegram.ext import (
    Application, CommandHandler,
    CallbackQueryHandler, ContextTypes, PicklePersistence, ConversationHandler,
    Defaults
)
from telegram.constants import ParseMode
from telegram.error import BadRequest

# –ú–æ–¥—É–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app_config import AppConfig
from state import BotState
from data_manager import DataManager
from poll_answer_handler import CustomPollAnswerHandler
from utils import escape_markdown_v2

# –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ª–æ–≥–∏–∫–∏
from modules.category_manager import CategoryManager
from modules.score_manager import ScoreManager

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤
from handlers.quiz_manager import QuizManager
from handlers.rating_handlers import RatingHandlers
from handlers.config_handlers import ConfigHandlers
from handlers.daily_quiz_scheduler import DailyQuizScheduler
from handlers.common_handlers import CommonHandlers
from handlers.cleanup_handler import schedule_cleanup_job

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
TEMP_LOG_LEVEL_STR = os.getenv("LOG_LEVEL", "INFO").upper()
LOG_LEVEL_MAP = {
    "DEBUG": logging.DEBUG, "INFO": logging.INFO,
    "WARNING": logging.WARNING, "ERROR": logging.ERROR,
    "CRITICAL": logging.CRITICAL
}
TEMP_LOG_LEVEL_DEFAULT = LOG_LEVEL_MAP.get(TEMP_LOG_LEVEL_STR, logging.INFO)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=TEMP_LOG_LEVEL_DEFAULT,
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logging.getLogger("telegram.ext.ExtBot").setLevel(logging.INFO)
logging.getLogger("telegram.bot").setLevel(logging.INFO)
logging.getLogger("telegram.net.TelegramRetryer").setLevel(logging.INFO)
logging.getLogger("telegram.net.HTTPXRequest").setLevel(logging.INFO)
logging.getLogger("apscheduler").setLevel(logging.INFO)


logger = logging.getLogger(__name__)

def update_logging_level(app_config):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    new_level = LOG_LEVEL_MAP.get(app_config.log_level_str, logging.INFO)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    logging.getLogger().setLevel(new_level)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logging.getLogger("__main__").setLevel(new_level)
    logging.getLogger("app_config").setLevel(new_level)
    logging.getLogger("state").setLevel(new_level)
    logging.getLogger("data_manager").setLevel(new_level)
    logging.getLogger("handlers").setLevel(new_level)
    logging.getLogger("modules").setLevel(new_level)
    
    logger.info(f"üîß –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω: {app_config.log_level_str} (—Ä–µ–∂–∏–º: {app_config.debug_mode and 'TESTING' or 'PRODUCTION'})")

async def main() -> None:
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application_instance: Optional[Application] = None # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    data_manager_instance: Optional[DataManager] = None

    try:
        logger.debug("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ AppConfig...")
        app_config = AppConfig()
        if not app_config.bot_token:
            logger.critical("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ BOT_TOKEN –≤ .env –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return
        logger.debug(f"AppConfig –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {app_config.debug_mode}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        update_logging_level(app_config)

        bot_state = BotState(app_config=app_config)
        data_manager = DataManager(state=bot_state, app_config=app_config)
        data_manager.load_all_data()
        data_manager_instance = data_manager
        
        # –ü–µ—Ä–µ–¥–∞–µ–º data_manager –≤ BotState –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        bot_state.data_manager = data_manager

        category_manager = CategoryManager(state=bot_state, app_config=app_config, data_manager=data_manager)
        score_manager = ScoreManager(app_config=app_config, state=bot_state, data_manager=data_manager)

        persistence_path = os.path.join(app_config.data_dir, app_config.persistence_file_name)
        persistence = PicklePersistence(filepath=persistence_path)
        defaults = Defaults(parse_mode=ParseMode.MARKDOWN_V2)

        application_builder = (
            Application.builder()
            .token(app_config.bot_token)
            .persistence(persistence)
            .defaults(defaults)
            .concurrent_updates(True)
            .read_timeout(30)
            .connect_timeout(30)
            .write_timeout(30)
            .pool_timeout(20)
        )
        application_instance = application_builder.build() # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π application
        logger.info("–û–±—ä–µ–∫—Ç Application —Å–æ–∑–¥–∞–Ω.")

        # –ü–µ—Ä–µ–¥–∞–µ–º application –≤ BotState –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        bot_state.application = application_instance

        application_instance.bot_data['bot_state'] = bot_state
        application_instance.bot_data['app_config'] = app_config
        application_instance.bot_data['data_manager'] = data_manager
        logger.debug(f"üîß data_manager –¥–æ–±–∞–≤–ª–µ–Ω –≤ application.bot_data: {data_manager}")
        logger.debug(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ bot_data: {list(application_instance.bot_data.keys())}")

        common_handlers_instance = CommonHandlers(app_config=app_config, category_manager=category_manager, bot_state=bot_state)
        quiz_manager = QuizManager(
            app_config=app_config, state=bot_state, category_manager=category_manager,
            score_manager=score_manager, data_manager=data_manager, application=application_instance
        )
        rating_handlers = RatingHandlers(app_config=app_config, score_manager=score_manager)
        config_handlers = ConfigHandlers(
            app_config=app_config, data_manager=data_manager,
            category_manager=category_manager, application=application_instance
        )
        poll_answer_handler_instance = CustomPollAnswerHandler(
            app_config=app_config, state=bot_state, score_manager=score_manager,
            data_manager=data_manager, quiz_manager=quiz_manager
        )
        daily_quiz_scheduler = DailyQuizScheduler(
            app_config=app_config, state=bot_state, data_manager=data_manager,
            quiz_manager=quiz_manager, application=application_instance
        )
        if hasattr(config_handlers, 'set_daily_quiz_scheduler'):
            config_handlers.set_daily_quiz_scheduler(daily_quiz_scheduler)

        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ PTB...")
        application_instance.add_handlers(quiz_manager.get_handlers())
        application_instance.add_handlers(rating_handlers.get_handlers())
        application_instance.add_handlers(common_handlers_instance.get_handlers())
        application_instance.add_handlers(config_handlers.get_handlers())
        application_instance.add_handler(poll_answer_handler_instance.get_handler())

        async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
            logger.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
            if isinstance(update, Update) and update.effective_chat:
                error_message_user = escape_markdown_v2(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è."
                )
                try:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id, text=error_message_user,
                        parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True
                    )
                except Exception as e_send_err_notify:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e_send_err_notify}")

        application_instance.add_error_handler(error_handler)
        logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ PTB –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

        bot_commands = [
            BotCommand(app_config.commands.quiz, "üèÅ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"),
            BotCommand(app_config.commands.top, "üèÜ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥"),
            BotCommand(app_config.commands.global_top, "üèÜ –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥"),
            BotCommand(app_config.commands.mystats, "üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"),
            BotCommand(app_config.commands.categories, "üìö –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"),
            BotCommand(app_config.commands.help, "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
            BotCommand(app_config.commands.stop_quiz, "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"),
            BotCommand(app_config.commands.cancel, "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
        ]
        admin_cmds = [
            (app_config.commands.admin_settings, "[–ê–¥–º–∏–Ω] ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"),
            (app_config.commands.add_admin, "[–ê–¥–º–∏–Ω] ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
            (app_config.commands.reloadcfg, "[–ê–¥–º–∏–Ω] üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
        ]
        for cmd, desc in admin_cmds:
            if cmd: bot_commands.append(BotCommand(cmd, desc))
        try:
            await application_instance.bot.set_my_commands(bot_commands)
            logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        except Exception as e_set_cmd:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e_set_cmd}")

        await application_instance.initialize()
        await daily_quiz_scheduler.schedule_all_daily_quizzes_from_startup()

        if application_instance.updater:
            logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (polling) —Å —É—Ä–æ–≤–Ω–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {logging.getLevelName(logger.getEffectiveLevel())}")
            await application_instance.updater.start_polling(
                allowed_updates=Update.ALL_TYPES
            )
            await application_instance.start()
            
            # –î–æ–±–∞–≤–ª—è–µ–º data_manager –≤ bot_data –ø–æ—Å–ª–µ start() (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ bot_data –æ—á–∏—â–∞–µ—Ç—Å—è)
            application_instance.bot_data['data_manager'] = data_manager
            logger.debug(f"üîß data_manager –¥–æ–±–∞–≤–ª–µ–Ω –≤ bot_data –ø–æ—Å–ª–µ start(): {data_manager}")
            logger.debug(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ bot_data –ø–æ—Å–ª–µ start(): {list(application_instance.bot_data.keys())}")
            
            schedule_cleanup_job(application_instance.job_queue, bot_state)
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            while application_instance.updater.running:
                await asyncio.sleep(1)
            logger.info("Updater –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–Ω—É—Ç—Ä–∏ main).")
        else:
            logger.error("Updater –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
            return

    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ (KeyboardInterrupt/SystemExit –≤ main).")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main: {e}", exc_info=True)
    finally:
        logger.info("–ë–ª–æ–∫ finally –≤ main() –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        if application_instance: # –ò—Å–ø–æ–ª—å–∑—É–µ–º application_instance
            if application_instance.updater and application_instance.updater.running:
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Updater –≤ main().finally...")
                await application_instance.updater.stop()
                logger.info("Updater –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ main().finally.")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            try:
                if hasattr(application_instance, 'running') and application_instance.running:
                    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Application –≤ main().finally...")
                    await application_instance.stop()
                    logger.info("Application –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ main().finally.")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Application: {e}")

            logger.info("–ó–∞–ø—É—Å–∫ Application.shutdown() –≤ main().finally...")
            try:
                await application_instance.shutdown()
                logger.info("Application.shutdown() –∑–∞–≤–µ—Ä—à–µ–Ω –≤ main().finally.")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ shutdown Application: {e}")
        else:
            logger.warning("–≠–∫–∑–µ–º–ø–ª—è—Ä Application –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ —à–∞–≥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ PTB –≤ main().finally.")

        if data_manager_instance:
            logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö DataManager –≤ main().finally...")
            data_manager_instance.save_all_data()
            logger.info("–î–∞–Ω–Ω—ã–µ DataManager —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ main().finally.")
        else:
            logger.warning("–≠–∫–∑–µ–º–ø–ª—è—Ä DataManager –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ main().finally.")
        logger.info("–ë–ª–æ–∫ finally –≤ main() –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "Event loop is closed" in str(e): # –≠—Ç–∞ –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å, –µ—Å–ª–∏ —Ü–∏–∫–ª –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≥–¥–µ-—Ç–æ –µ—â–µ
            logger.info(f"–¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π asyncio —É–∂–µ –∑–∞–∫—Ä—ã—Ç: {e}")
        else: # –î—Ä—É–≥–∏–µ RuntimeErrors
            logger.critical(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è RuntimeError –Ω–∞ —Å–∞–º–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}", exc_info=True)
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ (KeyboardInterrupt/SystemExit –Ω–∞ —É—Ä–æ–≤–Ω–µ __main__).")
    finally:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–±–ª–æ–∫ finally –≤ __main__).")

