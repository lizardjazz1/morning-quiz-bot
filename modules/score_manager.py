# modules/score_manager.py
import logging
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime, timezone # datetime –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è now_utc

from telegram import User as TelegramUser

from app_config import AppConfig
from state import BotState
from data_manager import DataManager
from utils import escape_markdown_v2, pluralize, get_username_or_firstname # get_username_or_firstname –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

logger = logging.getLogger(__name__)

class ScoreManager:
    def __init__(self, app_config: AppConfig, state: BotState, data_manager: DataManager):
        self.app_config = app_config
        self.state = state
        self.data_manager = data_manager

    async def update_score_and_get_motivation(
        self, chat_id: int, user: TelegramUser, poll_id: str, is_correct: bool,
        quiz_type_of_poll: str
    ) -> Tuple[bool, Optional[str]]:
        user_id_str = str(user.id)
        chat_id_str = str(chat_id)

        # –ò–ó–ú–ï–ù–ï–ù–û: –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –¥–ª—è state. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç first_name.
        user_first_name = user.first_name
        if user_first_name and user_first_name.strip():
            user_name_for_state = user_first_name.strip()
        elif user.username:
            user_name_for_state = f"@{user.username}"
        else:
            user_name_for_state = f"User {user_id_str}"

        score_updated_in_global_state = False
        motivational_message_text: Optional[str] = None

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (QuizState.scores)
        active_quiz = self.state.get_active_quiz(chat_id)
        if active_quiz:
            active_quiz.scores.setdefault(user_id_str, {"name": user_name_for_state, "score": 0, "answered_this_session": set()})
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º—è –≤ —Å–µ—Å—Å–∏–∏ —Ç–æ–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ —Å–º–µ–Ω–∏–ª
            if active_quiz.scores[user_id_str].get("name") != user_name_for_state:
                 active_quiz.scores[user_id_str]["name"] = user_name_for_state

            if poll_id not in active_quiz.scores[user_id_str]["answered_this_session"]:
                if is_correct:
                    active_quiz.scores[user_id_str]["score"] += 1
                active_quiz.scores[user_id_str]["answered_this_session"].add(poll_id)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ (BotState.user_scores)
        self.state.user_scores.setdefault(chat_id_str, {})
        self.state.user_scores[chat_id_str].setdefault(user_id_str, {
            "name": user_name_for_state,
            "score": 0,
            "answered_polls": set(),
            "first_answer_time": None,
            "last_answer_time": None,
            "milestones_achieved": set()
        })

        current_user_data_global = self.state.user_scores[chat_id_str][user_id_str]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º state, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if current_user_data_global.get("name") != user_name_for_state:
            current_user_data_global["name"] = user_name_for_state
            score_updated_in_global_state = True # –°—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å

        if poll_id not in current_user_data_global["answered_polls"]:
            if is_correct:
                current_user_data_global["score"] += 1
            score_updated_in_global_state = True
            current_user_data_global["answered_polls"].add(poll_id)

            now_utc = datetime.now(timezone.utc)
            if current_user_data_global["first_answer_time"] is None:
                current_user_data_global["first_answer_time"] = now_utc.isoformat()
            current_user_data_global["last_answer_time"] = now_utc.isoformat()

            # –õ–æ–≥–∏–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_username_or_firstname –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è,
            # —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–ø–æ–∫–∞–∑ @username –µ—Å–ª–∏ –µ—Å—Ç—å).
            name_for_motivation = get_username_or_firstname(user)
            current_score_for_motivation = current_user_data_global["score"]
            milestones_config = self.app_config.parsed_motivational_messages

            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –æ—á–∫–∞–º, –Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –ø–æ—Ä–æ–≥–∞
            # –°–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö, —Ç–∞–∫ –∏ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ (–æ—á–∫–∏) –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å "–∫—Ä—É–ø–Ω—ã–µ" –∏–∑–º–µ–Ω–µ–Ω–∏—è
            sorted_milestones_keys = sorted(milestones_config.keys(), key=abs, reverse=True)

            found_milestone_for_message = None

            for score_threshold in sorted_milestones_keys:
                # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏: –¥–æ—Å—Ç–∏–≥–∞—é—Ç—Å—è –ø—Ä–∏ score >= threshold
                if score_threshold > 0 and current_score_for_motivation >= score_threshold:
                    found_milestone_for_message = score_threshold
                    break
                # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏: –¥–æ—Å—Ç–∏–≥–∞—é—Ç—Å—è –ø—Ä–∏ score <= threshold
                elif score_threshold < 0 and current_score_for_motivation <= score_threshold:
                    found_milestone_for_message = score_threshold
                    break
                # –ü–æ—Ä–æ–≥ 0: –µ—Å–ª–∏ –¥—Ä—É–≥–∏—Ö –Ω–µ –ø–æ–¥–æ—à–ª–æ –∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è 0
                elif score_threshold == 0 and current_score_for_motivation == 0 :
                    found_milestone_for_message = score_threshold
                    # –Ω–µ break, —Ç.–∫. –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –Ω–∏–∂–µ 0

            if found_milestone_for_message is not None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ä–æ–≥–∞
                milestone_id_str = f"motivational_{chat_id_str}_{user_id_str}_{found_milestone_for_message}" # –ë–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                achieved_milestones_set = current_user_data_global.setdefault("milestones_achieved", set())

                should_send_message = False
                if found_milestone_for_message > 0 and current_score_for_motivation >= found_milestone_for_message:
                    should_send_message = True
                elif found_milestone_for_message < 0 and current_score_for_motivation <= found_milestone_for_message:
                    should_send_message = True

                if should_send_message and milestone_id_str not in achieved_milestones_set:
                    motivational_message_text = self.app_config.parsed_motivational_messages[found_milestone_for_message].format(
                        user_name=escape_markdown_v2(name_for_motivation),
                        user_score=current_score_for_motivation
                    )
                    achieved_milestones_set.add(milestone_id_str)
                    score_updated_in_global_state = True
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_str} ({user_name_for_state}) –≤ —á–∞—Ç–µ {chat_id_str} –¥–æ—Å—Ç–∏–≥ —Ä—É–±–µ–∂–∞ {found_milestone_for_message} ({current_score_for_motivation} –æ—á–∫–æ–≤). –°–æ–æ–±—â–µ–Ω–∏–µ: '{motivational_message_text[:50]}...'")
                    # break # –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
        else: # poll_id —É–∂–µ –±—ã–ª –≤ answered_polls, –Ω–æ –∏–º—è –º–æ–≥–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
            if not score_updated_in_global_state: # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∞ –æ—á–∫–∏ –Ω–µ—Ç
                 pass # score_updated_in_global_state —É–∂–µ true, –µ—Å–ª–∏ –∏–º—è –º–µ–Ω—è–ª–æ—Å—å

        if score_updated_in_global_state:
            self.data_manager.save_user_data()

        return score_updated_in_global_state, motivational_message_text

    def get_rating_icon(self, score: int) -> str:
        if score > 0:
            if score >= 1000: return "üåü"  # –õ–µ–≥–µ–Ω–¥–∞
            elif score >= 500: return "üèÜ"  # –ß–µ–º–ø–∏–æ–Ω
            elif score >= 100: return "üëë"  # –õ–∞–ø–æ—á–∫–∞
            elif score >= 50: return "üî•"  # –û–≥–æ–Ω—å
            elif score >= 10: return "üëç"  # –ù–æ–≤–∏—á–æ–∫ —Å –æ—á–∫–∞–º–∏
            else: return "üôÇ"             # –ú–∞–ª–æ –æ—á–∫–æ–≤ (1-9)
        elif score < 0:
            return "üíÄ"  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        else:  # player_score == 0
            return "üòê"  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ

    def format_scores(
        self,
        scores_list: List[Dict[str, Any]],
        title: str,
        is_session_score: bool = False,
        num_questions_in_session: Optional[int] = None
    ) -> str:
        logger.debug(f"format_scores –≤—ã–∑–≤–∞–Ω. Title: '{title}', is_session: {is_session_score}, num_q_sess: {num_questions_in_session}, items: {len(scores_list)}")

        escaped_title = escape_markdown_v2(title)
        if not scores_list:
            empty_message = "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
            if is_session_score:
                empty_message = "–ù–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –æ—á–∫–æ–≤ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏."
            return f"*{escaped_title}*\n\n{escape_markdown_v2(empty_message)}"

        lines = [f"*{escaped_title}*"]

        if is_session_score and num_questions_in_session is not None:
            # –í —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–º —Å—á–µ—Ç–µ –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º X/Y, –ø–æ—ç—Ç–æ–º—É —Å—á–µ—Ç –≤ —Å–∫–æ–±–∫–∞—Ö –Ω–µ –Ω—É–∂–µ–Ω
            # lines.append(escape_markdown_v2(f"(–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ—Å—Å–∏–∏: {num_questions_in_session})"))
            pass # –£–±—Ä–∞–Ω–æ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É

        lines.append("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

        place_icons = ["ü•á", "ü•à", "ü•â"] # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∏–∂–µ

        for i, entry in enumerate(scores_list):
            user_id_for_name = entry.get("user_id", "??") # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –¥–ª—è fallback –∏–º–µ–Ω–∏
            user_name_raw = entry.get('name', f'–ò–≥—Ä–æ–∫ {user_id_for_name}')
            score_val = entry.get('score', 0)

            line_parts: List[str] = []

            # 1. –ú–µ—Å—Ç–æ (–∏–∫–æ–Ω–∫–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä)
            if i < len(place_icons) and score_val > 0: # –ú–µ–¥–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–ø-3 —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º
                line_parts.append(place_icons[i])
            else:
                line_parts.append(f"{escape_markdown_v2(str(i + 1))}\.") # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É

            # 2. –ò–∫–æ–Ω–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ (—ç–º–æ–¥–∑–∏) - —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è score, –∞ –Ω–µ —Ä–∞–Ω–≥–æ–º
            rating_icon = self.get_rating_icon(score_val)
            line_parts.append(rating_icon)

            # 3. –ò–º—è –∏ –æ—á–∫–∏ - –ò–ó–ú–ï–ù–ï–ù–ê –õ–û–ì–ò–ö–ê –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –≠–¢–û–ô –ß–ê–°–¢–ò
            escaped_user_name = escape_markdown_v2(user_name_raw)

            final_name_score_segment: str
            if is_session_score and num_questions_in_session is not None:
                # –§–æ—Ä–º–∞—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤: "–ò–º—è: X/Y"
                score_display_for_session = f"{score_val}/{num_questions_in_session}"
                # escape_markdown_v2 –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ —á–∏—Å–ª—É –∏ –∑–Ω–∞–∫—É /, —Ç.–∫. –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —á–∞—Å—Ç—å—é —Ñ–æ—Ä–º–∞—Ç–∞
                final_name_score_segment = f"{escaped_user_name}: `{escape_markdown_v2(score_display_for_session)}`" # –ß–∏—Å–ª–∞ –≤ –∫–æ–¥–µ
            else:
                # –û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç "–ò–º—è - X –æ—á–∫–æ–≤" (–¥–ª—è –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ –±–µ–∑ X/Y)
                # –¢–µ–∫—Å—Ç –æ—á–∫–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º ("1 –æ—á–∫–æ", "2 –æ—á–∫–∞", "5 –æ—á–∫–æ–≤")
                player_score_pluralized_text = pluralize(score_val, "–æ—á–∫–æ", "–æ—á–∫–∞", "–æ—á–∫–æ–≤")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—Ç—å —Å–æ —Å—á–µ—Ç–æ–º –¥–ª—è –≤—ã–≤–æ–¥–∞
                score_display_part: str
                if score_val < 0:
                    # –î–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—É—Å –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–ª—é—Ä–∞–ª–∏–∑–∞—Ü–∏–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ pluralize(score_val) –≤–µ—Ä–Ω–µ—Ç —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ "74 –æ—á–∫–∞" –¥–ª—è score_val=-74
                    score_display_part = f"- {escape_markdown_v2(player_score_pluralized_text)}" # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—É—Å –∏ –ø—Ä–æ–±–µ–ª
                else:
                    score_display_part = escape_markdown_v2(player_score_pluralized_text)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω–µ—á–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç "–ò–º—è: `–°—á–µ—Ç`"
                final_name_score_segment = f"{escaped_user_name}: `{score_display_part}`" # –ß–∏—Å–ª–∞ –≤ –∫–æ–¥–µ

            line_parts.append(final_name_score_segment)
            lines.append(" ".join(line_parts))

        return "\n".join(lines)

    def get_chat_rating(self, chat_id: int, top_n: int = 10) -> List[Dict[str, Any]]:
        chat_id_str = str(chat_id)
        if chat_id_str not in self.state.user_scores or not self.state.user_scores[chat_id_str]:
            return []

        scores_in_chat = self.state.user_scores[chat_id_str]
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏ (–¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–≤–Ω—ã—Ö –æ—á–∫–∞—Ö)
        # data.get('name', '') or f"User {uid}" ensures name exists for sorting
        sorted_users = sorted(
            scores_in_chat.items(),
            key=lambda item: (-item[1].get("score", 0), item[1].get("name", f"User {item[0]}")),
        )

        top_users_list = []
        for i, (user_id_str, data) in enumerate(sorted_users[:top_n]):
            user_name = data.get("name", f"User {user_id_str}") # –£–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ
            score = data.get("score", 0)
            try:
                user_id_int = int(user_id_str)
            except ValueError:
                user_id_int = 0 # Fallback, should not happen if user_id_str is always int
            top_users_list.append({"user_id": user_id_int, "name": user_name, "score": score})
        return top_users_list

    def get_global_rating(self, top_n: int = 10) -> List[Dict[str, Any]]:
        global_scores_agg: Dict[str, Dict[str, Any]] = {} # user_id_str -> {"name": ..., "score": ...}

        for chat_id_str, users_in_chat_dict in self.state.user_scores.items():
            for user_id_str, user_data_dict in users_in_chat_dict.items():
                user_score = user_data_dict.get("score", 0)
                user_name = user_data_dict.get("name", f"User {user_id_str}") # –ò–º—è —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ

                if user_id_str not in global_scores_agg:
                    global_scores_agg[user_id_str] = {"name": user_name, "score": 0}

                global_scores_agg[user_id_str]["score"] += user_score
                # –ò–º—è –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–≤–æ–π –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏; –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –µ—Å–ª–∏ –∏–º—è –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ
                # –ù–æ —Ç–∞–∫ –∫–∞–∫ –∏–º—è —Ç–µ–ø–µ—Ä—å first_name, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ –¥–ª—è user_id
                if global_scores_agg[user_id_str]["name"] == f"User {user_id_str}" and user_name != f"User {user_id_str}":
                    global_scores_agg[user_id_str]["name"] = user_name


        sorted_global_users = sorted(
            global_scores_agg.items(),
            key=lambda item: (-item[1].get("score", 0), item[1].get("name", f"User {item[0]}")),
        )

        top_global_list = []
        for i, (user_id_str, data) in enumerate(sorted_global_users[:top_n]):
            try:
                user_id_int = int(user_id_str)
            except ValueError:
                user_id_int = 0
            top_global_list.append({
                "user_id": user_id_int,
                "name": data.get("name", f"User {user_id_str}"),
                "score": data.get("score", 0)
            })
        return top_global_list

    def get_user_stats_in_chat(self, chat_id: int, user_id: str) -> Optional[Dict[str, Any]]:
        chat_id_str = str(chat_id)
        user_scores_chat = self.state.user_scores.get(chat_id_str, {}).get(user_id)
        if not user_scores_chat:
            return None

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –∏–∑–≤–Ω–µ
        stats = {
            "name": user_scores_chat.get("name", f"User {user_id}"),
            "score": user_scores_chat.get("score", 0),
            "answered_polls_count": len(user_scores_chat.get("answered_polls", set())), # –¢–µ–ø–µ—Ä—å set –≤ state
            "first_answer_time": user_scores_chat.get("first_answer_time"),
            "last_answer_time": user_scores_chat.get("last_answer_time"),
        }
        # –£–¥–∞–ª—è–µ–º —Å–∞–º set –∏–∑ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
        # stats.pop("answered_polls", None) # –£–∂–µ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ len –±–µ—Ä–µ—Ç—Å—è
        # stats.pop("milestones_achieved", None) # –£–∂–µ –Ω–µ –Ω—É–∂–Ω–æ
        return stats

    def get_global_user_stats(self, user_id: str) -> Optional[Dict[str, Any]]:
        total_score = 0
        total_answered_polls = 0
        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Ç–∞—Ö, –µ—Å–ª–∏ –ª–æ–≥–∏–∫–∞ user_name_for_state –±—ã–ª–∞ –¥—Ä—É–≥–æ–π.
        # –° –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç first_name) –∏–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º.
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–µ-–¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è.
        display_name: Optional[str] = None
        first_answer_overall: Optional[str] = None
        last_answer_overall: Optional[str] = None

        found_user_data = False
        for chat_data in self.state.user_scores.values():
            user_chat_data = chat_data.get(user_id)
            if user_chat_data:
                found_user_data = True
                total_score += user_chat_data.get("score", 0)
                answered_in_chat = user_chat_data.get("answered_polls", set())
                total_answered_polls += len(answered_in_chat) if isinstance(answered_in_chat, set) else 0

                current_name = user_chat_data.get("name")
                if display_name is None or display_name.startswith("User "): # –û–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –±–æ–ª–µ–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –∏–º—è
                    if current_name and not current_name.startswith("User "):
                        display_name = current_name

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
                fat_str = user_chat_data.get("first_answer_time")
                lat_str = user_chat_data.get("last_answer_time")
                if fat_str:
                    try:
                        fat_dt = datetime.fromisoformat(fat_str)
                        if first_answer_overall is None or fat_dt < datetime.fromisoformat(first_answer_overall):
                            first_answer_overall = fat_str
                    except ValueError:
                         logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç first_answer_time –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ: {fat_str}")

                if lat_str:
                    try:
                        lat_dt = datetime.fromisoformat(lat_str)
                        if last_answer_overall is None or lat_dt > datetime.fromisoformat(last_answer_overall):
                            last_answer_overall = lat_str
                    except ValueError:
                        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç last_answer_time –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ: {lat_str}")

        if not found_user_data:
            return None

        if display_name is None: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏–≥–¥–µ –Ω–µ –∏–º–µ–ª –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
            display_name = f"User {user_id}"

        # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        average_score_per_poll = (total_score / total_answered_polls) if total_answered_polls > 0 else 0.0

        return {
            "name": display_name,
            "total_score": total_score,
            "answered_polls": total_answered_polls,
            "average_score_per_poll": average_score_per_poll,
            "first_answer_time_overall": first_answer_overall,
            "last_answer_time_overall": last_answer_overall,
        }

