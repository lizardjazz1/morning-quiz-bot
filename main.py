import logging
import os
import json
from telegram import Update, Poll
from telegram.ext import ApplicationBuilder, CommandHandler, PollAnswerHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from dotenv import load_dotenv
import random
import threading

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
def load_questions():
    try:
        with open('questions.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def load_user_data():
    if not os.path.exists('users.json'):
        save_user_data({})
    try:
        with open('users.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def save_user_data(data):
    with open('users.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –¥–ª—è Replit
def keep_alive():
    print("‚è∞ –ë–æ—Ç –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    threading.Timer(7200, keep_alive).start()

keep_alive()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
quiz_data = load_questions()
user_scores = load_user_data()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
current_poll = {}  # {poll_id: {"chat_id": ..., "correct_index": ..., "quiz_session": True/False}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∫–≤–∏–∑–∞ –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
current_quiz_session = {}  # {chat_id: {"questions": [...], "correct_answers": {}, "current_index": 0, "active": True, "final_message_id": ...}}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    user_id = update.effective_user.id
    user_name = update.effective_user.full_name
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id not in user_scores:
        user_scores[chat_id] = {}
    if str(user_id) not in user_scores.get(chat_id, {}):
        user_scores[chat_id][str(user_id)] = {"name": user_name, "score": 0}
        save_user_data(user_scores)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —É—Ç—Ä–µ–Ω–Ω—é—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–ø—Ä–æ—Å–∞!")
    logging.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
    # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    active_chats = context.bot_data.get("active_chats", set())
    active_chats.add(chat_id)
    context.bot_data["active_chats"] = active_chats

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ –æ–¥–Ω–æ–º—É —á–∞—Ç—É –∏–ª–∏ –≤—Å–µ–º)
async def send_quiz(context: ContextTypes.DEFAULT_TYPE, chat_id=None):
    active_chats = context.bot_data.get("active_chats", set())
    if not active_chats:
        logging.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return
    categories = list(quiz_data.keys())
    category = random.choice(categories)
    question_data = random.choice(quiz_data[category])
    options = question_data["options"]
    correct_answer = question_data["correct"]
    for cid in active_chats:
        try:
            message = await context.bot.send_poll(
                chat_id=cid,
                question=question_data["question"],
                options=options,
                type=Poll.QUIZ,
                correct_option_id=options.index(correct_answer),
                is_anonymous=False
            )
            poll_id = message.poll.id
            correct_index = options.index(correct_answer)
            current_poll[poll_id] = {
                "chat_id": cid,
                "correct_index": correct_index,
                "message_id": message.message_id,
                "quiz_session": False
            }
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç {cid}: {e}")

# –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞
def get_quiz_questions(count=10):
    all_questions = []
    for category in quiz_data.values():
        all_questions.extend(category)
    return random.sample(all_questions, min(count, len(all_questions)))

# –ö–æ–º–∞–Ω–¥–∞ /quiz ‚Äî –≤—Ä—É—á–Ω—É—é –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¢–û–õ–¨–ö–û –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
async def manual_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    if chat_id not in context.bot_data.get("active_chats", set()):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /start")
        return
    await update.message.reply_text("üß† –ó–∞–ø—É—Å–∫–∞—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤—Ä—É—á–Ω—É—é...")
    await send_quiz(context, chat_id=chat_id)

# –ö–æ–º–∞–Ω–¥–∞ /quiz10 ‚Äî —Å–µ—Ä–∏—è –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
async def start_quiz10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    if chat_id not in context.bot_data.get("active_chats", set()):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /start")
        return
    questions = get_quiz_questions(10)
    if not questions:
        await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑ ‚Äî –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ üòï")
        return
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    current_quiz_session[chat_id] = {
        "questions": questions,
        "correct_answers": {},
        "current_index": 0,
        "active": True
    }
    await update.message.reply_text("üìö –°–µ—Ä–∏—è –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å! üß†")
    await send_next_quiz_question(chat_id, context)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–∏–∏
async def send_next_quiz_question(chat_id, context):
    session = current_quiz_session.get(chat_id)
    if not session or session["current_index"] >= len(session["questions"]):
        await show_final_results(chat_id, context)
        return
    question_data = session["questions"][session["current_index"]]
    options = question_data["options"]
    correct_answer = question_data["correct"]
    try:
        message = await context.bot.send_poll(
            chat_id=chat_id,
            question=f"üìå –í–æ–ø—Ä–æ—Å {session['current_index'] + 1}:\n{question_data['question']}",
            options=options,
            type=Poll.QUIZ,
            correct_option_id=options.index(correct_answer),
            is_anonymous=False
        )
        poll_id = message.poll.id
        correct_index = options.index(correct_answer)
        current_poll[poll_id] = {
            "chat_id": chat_id,
            "correct_index": correct_index,
            "message_id": message.message_id,
            "quiz_session": True  # –≠—Ç–æ —á–∞—Å—Ç—å —Å–µ—Ä–∏–∏
        }
        session["current_index"] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç {chat_id}: {e}")
        await context.bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å
async def handle_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.poll_answer
    poll_id = answer.poll_id
    user_id = str(answer.user.id)
    option = answer.option_ids[0]  # –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    user_name = answer.user.full_name
    poll_info = current_poll.get(poll_id)
    if not poll_info:
        return
    chat_id = poll_info["chat_id"]
    correct_index = poll_info["correct_index"]
    is_quiz_session = poll_info.get("quiz_session", False)
    # –£–±–∏—Ä–∞–µ–º –æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    del current_poll[poll_id]
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user_scores, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if chat_id not in user_scores:
        user_scores[chat_id] = {}
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    if option == correct_index:
        if user_id not in user_scores[chat_id]:
            user_scores[chat_id][user_id] = {"name": user_name, "score": 1}
        else:
            user_scores[chat_id][user_id]["score"] += 1
        await context.bot.send_message(chat_id=chat_id, text=f"{user_name}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ! üëè")
        save_user_data(user_scores)
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å —Å–µ—Ä–∏–∏ –∫–≤–∏–∑–æ–≤
    if is_quiz_session and chat_id in current_quiz_session:
        session = current_quiz_session[chat_id]
        if user_id not in session["correct_answers"]:
            session["correct_answers"][user_id] = {"name": user_name, "count": 0}
        if option == correct_index:
            session["correct_answers"][user_id]["count"] += 1
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await send_next_quiz_question(chat_id, context)

# –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
async def show_final_results(chat_id, context):
    session = current_quiz_session.get(chat_id)
    if not session:
        return

    results = sorted(session["correct_answers"].items(), key=lambda x: x[1]['count'], reverse=True)
    result_text = "üèÅ –í–æ—Ç –∫–∞–∫ –≤—ã –ø—Ä–æ—à–ª–∏ –∫–≤–∏–∑ –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
    for idx, (uid, data) in enumerate(results, 1):
        total = data["count"]
        emoji = "‚ú®" if total == 10 else "üëè" if total >= 7 else "üëç" if total >= 5 else "üôÇ"
        result_text += f"{idx}. {data['name']} ‚Äî {total}/10 {emoji}\n"
    result_text += "\nüî• –ú–æ–ª–æ–¥—Ü—ã! –¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ –µ—â—ë –±–æ–ª—å—à–µ!"

    if "final_message_id" in session:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=session["final_message_id"],
                text=result_text
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        message = await context.bot.send_message(chat_id=chat_id, text=result_text)
        session["final_message_id"] = message.message_id

# –ö–æ–º–∞–Ω–¥–∞ /rating ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
async def rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    scores = user_scores.get(chat_id, {})
    if not scores:
        await update.message.reply_text("–ù–∏–∫—Ç–æ –µ—â—ë –Ω–µ –æ—Ç–≤–µ—á–∞–ª.")
        return
    sorted_scores = sorted(scores.items(), key=lambda x: x[1]['score'], reverse=True)
    rating_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n"
    for idx, (uid, data) in enumerate(sorted_scores, 1):
        rating_text += f"{idx}. {data['name']} ‚Äî {data['score']} –æ—á–∫–æ–≤\n"
    await update.message.reply_text(rating_text)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    print("üîß –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    if not TOKEN:
        raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env")
    print(f"‚úÖ –¢–æ–∫–µ–Ω: {TOKEN[:5]}...{TOKEN[-5:]}")
    application = ApplicationBuilder().token(TOKEN).build()
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("quiz", manual_quiz))
    application.add_handler(CommandHandler("quiz10", start_quiz10))
    application.add_handler(CommandHandler("rating", rating))
    application.add_handler(PollAnswerHandler(handle_poll_answer))
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = BackgroundScheduler()
    scheduler.add_job(send_quiz, 'cron', hour=8, minute=0, args=[application])  # –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 8:00
    scheduler.start()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()