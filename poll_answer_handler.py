# poll_answer_handler.py
from typing import Dict, Any
from telegram import Update, PollAnswer, User as TelegramUser
from telegram.ext import ContextTypes

from config import logger
import state
from data_manager import save_user_data
from quiz_logic import send_next_question_in_session
# quiz_logic.send_solution_if_available –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–∞–π–º–∞—É—Ç–æ–≤
from utils import pluralize # MODIFIED: pluralize_points -> pluralize

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
MOTIVATIONAL_MESSAGES = {
    -1000: "üíÄ –î–∞ —Ç—ã –±–ª–∏–Ω –∏–∑–¥–µ–≤–∞–µ—à—å—Å—è, —Ç–∞–∫–æ–µ –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–æ–±—â–µ! –ü–æ–ø—Ä–æ–±—É–π –Ω–µ –≤—ã—Ç–≤–æ—Ä—è—Ç—å –±–æ–ª—å—à–µ!",
    -500: "üòµ –ù—É –∏ –Ω—É–±, –ø—Ä—è–º —Å –ø–æ—Ä–æ–≥–∞ –ø–∞–¥–∞–µ—Ç... –ü–æ–ø—Ä–∞–≤—å—Å—è —É–∂–µ!",
    -200: "ü§¶‚Äç‚ôÇÔ∏è –û–ø—è—Ç—å –ø—Ä–æ–º–∞—Ö? –ö–∞–∂–µ—Ç—Å—è, —Ç–µ–±–µ –ø–æ—Ä–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.",
    -50: "üôÉ –ù—É –Ω–∏—á–µ–≥–æ, –¥–∞–∂–µ —É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –±—ã–≤–∞—é—Ç –ø–ª–æ—Ö–∏–µ –¥–Ω–∏... –ø—Ä–∞–≤–¥–∞?",
    10: "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–µ—Ä–≤—ã–º–∏ 10 –æ—á–∫–∞–º–∏! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
    25: "üåü 25 –æ—á–∫–æ–≤! –¢—ã —É–∂–µ –æ–ø—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫!",
    50: "üî• 50 –æ—á–∫–æ–≤! –¢—ã –ø—Ä–æ—Å—Ç–æ –æ–≥–æ–Ω—å! üî•",
    100: "üëë 100 –æ—á–∫–æ–≤! –ú–æ—è —Ç—ã –ª–∞–ø–æ—á–∫–∞, —É–º–Ω–µ–Ω—å–∫–æ—Å—Ç—å - —ç—Ç–æ –ø—Ä–æ —Ç–µ–±—è!",
    200: "üöÄ 200 –æ—á–∫–æ–≤! –¢—ã –≤–∑–ª–µ—Ç–∞–µ—à—å –∫ –≤–µ—Ä—à–∏–Ω–∞–º –∑–Ω–∞–Ω–∏–π!",
    300: "üíé 300 –æ—á–∫–æ–≤! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–ª–º–∞–∑ –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!",
    500: "üèÜ 500 –æ—á–∫–æ–≤! –ù–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω!",
    750: "üåà 750 –æ—á–∫–æ–≤! –î–∞–ª –¥–∞–ª —É—à—ë–ª!",
    1000: "‚ú® 1000 –æ—á–∫–æ–≤! –¢—ã –ª–µ–≥–µ–Ω–¥–∞!",
    1500: "üî• 1500 –æ—á–∫–æ–≤! –û–≥–æ–Ω—å –Ω–µ–∏—Å—Ç–æ—â–∏–º–æ–π —ç–Ω–µ—Ä–≥–∏–∏!",
    2000: "üöÄ 2000 –æ—á–∫–æ–≤! –°–≤–µ—Ä—Ö–∑–≤–µ–∑–¥–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!",
    3000: "üëë 3000 –æ—á–∫–æ–≤! –¶–∞—Ä—å –∏ –±–æ–≥ –∑–Ω–∞–Ω–∏–π!",
    5000: "üí• 5000 –æ—á–∫–æ–≤! –≠-—ç-—ç—Ç–æ —Ç—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å–µ–ª–µ–Ω–Ω–æ–π?!",
}

async def _ensure_user_initialized(chat_id_str: str, user: TelegramUser) -> Dict[str, Any]:
    user_id_str = str(user.id)
    state.user_scores.setdefault(chat_id_str, {})
    user_data = state.user_scores[chat_id_str].setdefault(user_id_str, {
        "name": user.full_name, "score": 0,
        "answered_polls": set(), "milestones_achieved": set()
    })
    user_data["name"] = user.full_name # Always update name, in case it changed
    if not isinstance(user_data.get("answered_polls"), set): # Ensure sets for older data
        user_data["answered_polls"] = set(user_data.get("answered_polls", []))
    if not isinstance(user_data.get("milestones_achieved"), set):
        user_data["milestones_achieved"] = set(user_data.get("milestones_achieved", []))
    return user_data

async def _process_global_score_and_motivation(
    global_user_data: Dict[str, Any],
    user: TelegramUser,
    chat_id_str: str,
    answered_poll_id: str,
    is_answer_correct: bool,
    context: ContextTypes.DEFAULT_TYPE
) -> bool:
    score_updated_this_time = False
    user_id_str = str(user.id)
    previous_score = global_user_data["score"]

    if answered_poll_id not in global_user_data["answered_polls"]:
        score_change = 1 if is_answer_correct else -1
        global_user_data["score"] += score_change
        global_user_data["answered_polls"].add(answered_poll_id)
        save_user_data() # Save after any change to global score or milestones
        score_updated_this_time = True

        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} ({user_id_str}) –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ poll {answered_poll_id} "
            f"{'–ø—Ä–∞–≤–∏–ª—å–Ω–æ' if is_answer_correct else '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'} –≤ —á–∞—Ç–µ {chat_id_str}. "
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞: {('+1' if score_change > 0 else '-1')} –æ—á–∫–æ. "
            f"–û–±—â–∏–π —Å—á–µ—Ç: {global_user_data['score']}."
        )

        current_score = global_user_data["score"]
        milestones_achieved_set = global_user_data["milestones_achieved"]

        for threshold in sorted(MOTIVATIONAL_MESSAGES.keys()):
            if threshold in milestones_achieved_set:
                continue # Already achieved this milestone
            
            send_motivational_message = False
            # Check for positive thresholds: crossed from below
            if threshold > 0 and previous_score < threshold <= current_score:
                send_motivational_message = True
            # Check for negative thresholds: crossed from above (e.g. score went from -10 to -55, previous_score > threshold >= current_score)
            elif threshold < 0 and previous_score > threshold >= current_score:
                 send_motivational_message = True

            if send_motivational_message:
                motivational_text = f"{user.first_name}, {MOTIVATIONAL_MESSAGES[threshold]}"
                logger.debug(f"Attempting to send motivational message to {user_id_str} in {chat_id_str}. Text: '{motivational_text}'")
                try:
                    await context.bot.send_message(chat_id=chat_id_str, text=motivational_text)
                    milestones_achieved_set.add(threshold)
                    save_user_data() # Save after adding a milestone
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {threshold} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
    else:
        logger.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} ({user_id_str}) —É–∂–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ poll {answered_poll_id}. "
            "–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –Ω–µ –∏–∑–º–µ–Ω–µ–Ω —ç—Ç–∏–º –æ—Ç–≤–µ—Ç–æ–º."
        )
    return score_updated_this_time

async def _send_single_quiz_feedback(
    user: TelegramUser,
    chat_id_str: str,
    is_answer_correct: bool,
    global_user_score: int,
    context: ContextTypes.DEFAULT_TYPE
):
    result_text = "–≤–µ—Ä–Ω–æ! ‚úÖ" if is_answer_correct else "–Ω–µ–≤–µ—Ä–Ω–æ. ‚ùå"
    # MODIFIED: pluralize_points -> pluralize, providing specific forms for "–æ—á–∫–æ"
    score_text = pluralize(global_user_score, "–æ—á–∫–æ", "–æ—á–∫–∞", "–æ—á–∫–æ–≤")
    reply_text = (
        f"{user.first_name}, {result_text}\n"
        f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ: {score_text}."
    )
    logger.debug(f"Attempting to send single quiz result to {str(user.id)} in {chat_id_str}. Text: '{reply_text}'")
    try:
        await context.bot.send_message(chat_id=chat_id_str, text=reply_text)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –¥–ª—è /quiz –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {str(user.id)} –≤ —á–∞—Ç {chat_id_str}: {e}", exc_info=True)

async def _handle_quiz10_session_poll_answer(
    user: TelegramUser,
    answered_poll_id: str,
    poll_info_from_state: Dict[str, Any],
    is_answer_correct: bool,
    question_session_idx: int,
    context: ContextTypes.DEFAULT_TYPE
):
    user_id_str = str(user.id)
    # This is the chat_id where the /quiz10 session is running, usually same as poll_info_from_state["chat_id"]
    session_chat_id_from_poll = poll_info_from_state.get("associated_quiz_session_chat_id") 

    if not session_chat_id_from_poll:
        logger.error(f"Poll {answered_poll_id} marked as quiz_session, but associated_quiz_session_chat_id is missing.")
        return

    active_session = state.current_quiz_session.get(session_chat_id_from_poll)
    if not active_session:
        logger.warning(
            f"–°–µ—Å—Å–∏—è /quiz10 –¥–ª—è —á–∞—Ç–∞ {session_chat_id_from_poll} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, "
            f"—Ö–æ—Ç—è poll {answered_poll_id} —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–µ. –û—Ç–≤–µ—Ç –æ—Ç {user.full_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞."
        )
        return

    # Initialize or get session-specific scores for the user
    session_scores_root = active_session.setdefault("session_scores", {})
    session_user_data = session_scores_root.setdefault(
        user_id_str, 
        {"name": user.full_name, "score": 0, "answered_this_session_polls": set()}
    )
    session_user_data["name"] = user.full_name # Update name
    if not isinstance(session_user_data.get("answered_this_session_polls"), set): # Ensure set
         session_user_data["answered_this_session_polls"] = set(session_user_data.get("answered_this_session_polls", []))


    # Update session score only if this is the first time user answers THIS poll in THIS session
    if answered_poll_id not in session_user_data["answered_this_session_polls"]:
        session_score_change = 1 if is_answer_correct else -1
        session_user_data["score"] += session_score_change
        session_user_data["answered_this_session_polls"].add(answered_poll_id)
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} ({user_id_str}) –ø–æ–ª—É—á–∏–ª "
            f"{('+1' if session_score_change > 0 else '-1')} –æ—á–∫–æ –≤ —Å–µ—Å—Å–∏–∏ /quiz10 {session_chat_id_from_poll} "
            f"–∑–∞ poll {answered_poll_id} (–≤–æ–ø—Ä–æ—Å {question_session_idx + 1}). " # +1 for 1-based indexing for logs
            f"–°–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç: {session_user_data['score']}."
        )
    # else: user already answered this poll in this session, session score not changed again

    # Logic for early transition to next question / handling last question
    # This should only happen if the answered poll is the *current* one for the session
    if active_session.get("current_poll_id") == answered_poll_id:
        is_last_q = poll_info_from_state.get("is_last_question", False)
        
        # next_q_triggered_by_answer: —Ñ–ª–∞–≥, —á—Ç–æ–±—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç–∏–≤—à–∏–π –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ—Ö–æ–¥/–ª–æ–≥–∏–∫—É
        if not poll_info_from_state.get("next_q_triggered_by_answer", False):
            poll_info_from_state["next_q_triggered_by_answer"] = True # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ª–æ–≥–∏–∫—É
            
            if not is_last_q:
                logger.info(
                    f"–î–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ù–ï –ø–æ—Å–ª–µ–¥–Ω–∏–π poll {answered_poll_id} (–≤–æ–ø—Ä–æ—Å {question_session_idx + 1}) "
                    f"–≤ —Å–µ—Å—Å–∏–∏ {session_chat_id_from_poll}. –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ù–ï–ú–ï–î–õ–ï–ù–ù–û. "
                    f"–¢–µ–∫—É—â–∏–π poll {answered_poll_id} –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–æ —Å–≤–æ–µ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞, –ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ –Ω–µ–º—É –±—É–¥–µ—Ç —Ç–æ–≥–¥–∞ –∂–µ."
                )
                # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç poll –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–æ—Å—Ä–æ—á–Ω–æ,
                # —á—Ç–æ–±—ã handle_current_poll_end –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                poll_info_from_state["processed_by_early_answer"] = True 
                
                # –ù–ï —É–¥–∞–ª—è–µ–º poll_info_from_state –∏–∑ state.current_poll –∑–¥–µ—Å—å.
                # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º send_solution_if_available –∑–¥–µ—Å—å.
                # handle_current_poll_end –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –ø–æ—è—Å–Ω–µ–Ω–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–∏ poll_info.
                await send_next_question_in_session(context, session_chat_id_from_poll)
            else: # This is the last question
                logger.info(
                    f"–î–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ü–û–°–õ–ï–î–ù–ò–ô poll {answered_poll_id} (–≤–æ–ø—Ä–æ—Å {question_session_idx + 1}) "
                    f"–≤ —Å–µ—Å—Å–∏–∏ {session_chat_id_from_poll}. –≠—Ç–æ—Ç poll {answered_poll_id} –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–æ —Å–≤–æ–µ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞. "
                    f"–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ø–æ —Ç–∞–π–º–∞—É—Ç—É —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."
                )
                # –¢–∞–∫–∂–µ –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ–±—ã handle_current_poll_end –∑–Ω–∞–ª (—Ö–æ—Ç—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç—Ç–æ –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
                poll_info_from_state["processed_by_early_answer"] = True
                # –¢–∞–π–º–∞—É—Ç-job (handle_current_poll_end) —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∏ –≤—ã–∑–æ–≤–µ—Ç show_quiz_session_results.
    else:
        logger.debug(
            f"–û—Ç–≤–µ—Ç –Ω–∞ poll {answered_poll_id} –≤ —Å–µ—Å—Å–∏–∏ {session_chat_id_from_poll} –ø–æ–ª—É—á–µ–Ω, "
            f"–Ω–æ —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π poll —Å–µ—Å—Å–∏–∏ —É–∂–µ {active_session.get('current_poll_id')}. "
            "–î–æ—Å—Ä–æ—á–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —ç—Ç–∏–º –æ—Ç–≤–µ—Ç–æ–º."
        )

async def handle_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.poll_answer:
        logger.debug("handle_poll_answer: update.poll_answer is None, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
        return

    poll_answer: PollAnswer = update.poll_answer
    user: TelegramUser = poll_answer.user
    answered_poll_id: str = poll_answer.poll_id

    poll_info_from_state = state.current_poll.get(answered_poll_id)
    if not poll_info_from_state:
        logger.debug(
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è poll_id {answered_poll_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ state.current_poll. "
            f"–û—Ç–≤–µ—Ç –æ—Ç {user.full_name} ({user.id}) –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω (–æ–ø—Ä–æ—Å –º–æ–≥ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω/—É–¥–∞–ª–µ–Ω)."
        )
        return

    chat_id_str = poll_info_from_state["chat_id"]
    question_session_idx = poll_info_from_state.get("question_session_index", -1)

    global_user_data = await _ensure_user_initialized(chat_id_str, user)
    
    is_answer_correct = (len(poll_answer.option_ids) == 1 and 
                         poll_answer.option_ids[0] == poll_info_from_state["correct_index"])


    score_updated_this_time = await _process_global_score_and_motivation(
        global_user_data, user, chat_id_str, answered_poll_id, is_answer_correct, context
    )

    is_quiz10_session_poll = poll_info_from_state.get("quiz_session", False)
    is_daily_quiz_poll = poll_info_from_state.get("daily_quiz", False)

    if not is_quiz10_session_poll and not is_daily_quiz_poll and score_updated_this_time:
        await _send_single_quiz_feedback(
            user, chat_id_str, is_answer_correct, global_user_data["score"], context
        )
    
    if is_quiz10_session_poll:
        await _handle_quiz10_session_poll_answer(
            user, answered_poll_id, poll_info_from_state, is_answer_correct, question_session_idx, context
        )
