import logging
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from dotenv import load_dotenv
import random

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤
quiz_questions = [
    {
        "question": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?",
        "options": ["3", "4", "5", "6"],
        "correct": "4"
    },
    {
        "question": "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ—à–∏–≤–∞–Ω–∏–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ –∏ —Å–∏–Ω–µ–≥–æ?",
        "options": ["–ó–µ–ª—ë–Ω—ã–π", "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "–û—Ä–∞–Ω–∂–µ–≤—ã–π", "–ß—ë—Ä–Ω—ã–π"],
        "correct": "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π"
    },
    {
        "question": "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?",
        "options": ["–õ–æ–Ω–¥–æ–Ω", "–ú–æ—Å–∫–≤–∞", "–ü–∞—Ä–∏–∂", "–†–∏–º"],
        "correct": "–ü–∞—Ä–∏–∂"
    }
]

current_quiz = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
    active_chats = context.bot_data.get("active_chats", set())
    active_chats.add(chat_id)
    context.bot_data["active_chats"] = active_chats

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É—Ç—Ä–µ–Ω–Ω—é—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!")
    logging.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async def send_quiz(context: ContextTypes.DEFAULT_TYPE):
    active_chats = context.bot_data.get("active_chats", set())
    
    if not active_chats:
        logging.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return

    question_data = random.choice(quiz_questions)
    options = question_data["options"]
    keyboard = [[InlineKeyboardButton(option, callback_data=option)] for option in options]
    reply_markup = InlineKeyboardMarkup(keyboard)

    for chat_id in active_chats:
        try:
            message = await context.bot.send_message(chat_id=chat_id, text=question_data["question"], reply_markup=reply_markup)
            current_quiz[chat_id] = {"message_id": message.message_id, "correct": question_data["correct"]}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = str(query.message.chat_id)
    user_answer = query.data
    correct_answer = current_quiz.get(chat_id, {}).get("correct")

    if user_answer == correct_answer:
        await query.edit_message_text(text="–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëè")
    else:
        await query.edit_message_text(text=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    if not TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env")

    application = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_click))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = BackgroundScheduler()
    scheduler.add_job(send_quiz, 'cron', hour=8, minute=0, args=[application])  # –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 8:00
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()