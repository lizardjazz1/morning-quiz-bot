# quiz_logic.py
import random
from typing import List, Dict, Any, Tuple
from datetime import timedelta
from telegram import Update, Poll # Update –Ω—É–∂–µ–Ω –¥–ª—è ContextTypes.DEFAULT_TYPE, Poll –¥–ª—è —Ç–∏–ø–æ–≤
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from config import (logger, NUMBER_OF_QUESTIONS_IN_SESSION,
                    DEFAULT_POLL_OPEN_PERIOD, FINAL_ANSWER_WINDOW_SECONDS, JOB_GRACE_PERIOD)
import state # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ quiz_data, current_quiz_session, current_poll
from utils import pluralize_points # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–æ—á–∫–∏"
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_player_display –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å–µ—Å—Å–∏–∏
from handlers.rating_handlers import get_player_display

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ---

# get_random_questions: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ command_handlers.py (/quiz, /quiz10).
def get_random_questions(category: str, count: int = 1) -> List[Dict[str, Any]]:
    cat_q_list = state.quiz_data.get(category)
    if not isinstance(cat_q_list, list) or not cat_q_list:
        return []
    return [q.copy() for q in random.sample(cat_q_list, min(count, len(cat_q_list)))]

# get_random_questions_from_all: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ command_handlers.py (/quiz, /quiz10).
def get_random_questions_from_all(count: int) -> List[Dict[str, Any]]:
    all_q = [q.copy() for questions_in_category in state.quiz_data.values() if isinstance(questions_in_category, list) for q in questions_in_category]
    if not all_q:
        return []
    return random.sample(all_q, min(count, len(all_q)))

# prepare_poll_options: –ì–æ—Ç–æ–≤–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ (Poll).
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ command_handlers.py (/quiz) –∏ –∑–¥–µ—Å—å –∂–µ –≤ send_next_question_in_session.
def prepare_poll_options(q_details: Dict[str, Any]) -> Tuple[str, List[str], int, List[str]]:
    q_text, opts_orig = q_details["question"], q_details["options"]
    correct_answer_text = opts_orig[q_details["correct_option_index"]] # –¢–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

    opts_shuffled = list(opts_orig) # –ö–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    random.shuffle(opts_shuffled)

    try:
        new_correct_idx = opts_shuffled.index(correct_answer_text)
    except ValueError: # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ '{correct_answer_text}' –≤ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏—è—Ö: {opts_shuffled}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å.")
        return q_text, list(opts_orig), q_details["correct_option_index"], list(opts_orig)

    return q_text, opts_shuffled, new_correct_idx, list(opts_orig) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π

async def send_solution_if_available(context: ContextTypes.DEFAULT_TYPE, chat_id_str: str, question_details: Dict[str, Any], q_index_for_log: int = -1):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ."""
    solution = question_details.get("solution")
    # –î–ª—è –ª–æ–≥–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –≤–µ—Ä—Å–∏—é –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    q_text_for_header = question_details.get("question", "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É")
    log_q_ref_text = f"¬´{q_text_for_header[:30]}...¬ª" if len(q_text_for_header) > 30 else f"¬´{q_text_for_header}¬ª"
    # –î–ª—è –ª–æ–≥–∞: –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω (q_index_for_log != -1)
    log_q_ref_suffix = f" (–≤–æ–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏ {q_index_for_log + 1})" if q_index_for_log != -1 else ""
    log_q_ref = f"{log_q_ref_text}{log_q_ref_suffix}"


    if solution:
        try:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º: –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è
            solution_message = f"üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É {log_q_ref_text}:\n{solution}"

            MAX_MESSAGE_LENGTH = 4096 # Telegram message length limit
            if len(solution_message) > MAX_MESSAGE_LENGTH:
                truncate_at = MAX_MESSAGE_LENGTH - 3 # –î–ª—è "..."
                solution_message = solution_message[:truncate_at] + "..."
                logger.warning(f"–ü–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {log_q_ref} –≤ —á–∞—Ç–µ {chat_id_str} –±—ã–ª–æ —É—Å–µ—á–µ–Ω–æ –¥–æ {MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")

            await context.bot.send_message(chat_id=chat_id_str, text=solution_message)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {log_q_ref} –≤ —á–∞—Ç–µ {chat_id_str}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {log_q_ref} –≤ —á–∞—Ç–µ {chat_id_str}: {e}", exc_info=True)

# --- –õ–æ–≥–∏–∫–∞ —Å–µ—Å—Å–∏–∏ /quiz10 ---

# send_next_question_in_session: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏ /quiz10.
async def send_next_question_in_session(context: ContextTypes.DEFAULT_TYPE, chat_id_str: str):
    session = state.current_quiz_session.get(chat_id_str)
    if not session:
        logger.warning(f"send_next_question_in_session: –°–µ—Å—Å–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
        return

    if job := session.get("next_question_job"): # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç job, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        try:
            job.schedule_removal()
        except Exception:
            pass # Job –º–æ–≥ –±—ã—Ç—å —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω
        session["next_question_job"] = None

    current_q_idx = session["current_index"]
    actual_num_q = session["actual_num_questions"]

    if current_q_idx >= actual_num_q:
        logger.info(f"–í—Å–µ {actual_num_q} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ—Å—Å–∏–∏ {chat_id_str} –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏.")
        # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤–æ–ø—Ä–æ—Å—É –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ handle_current_poll_end –∏–ª–∏ poll_answer_handler (–ø—Ä–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–º –æ—Ç–≤–µ—Ç–µ)
        await show_quiz_session_results(context, chat_id_str)
        return

    q_details = session["questions"][current_q_idx]
    is_last_question = (current_q_idx == actual_num_q - 1)
    poll_open_period = FINAL_ANSWER_WINDOW_SECONDS if is_last_question else DEFAULT_POLL_OPEN_PERIOD

    poll_question_text_for_api = q_details['question']

    full_poll_question_header = f"–í–æ–ø—Ä–æ—Å {current_q_idx + 1}/{actual_num_q}"
    if original_cat := q_details.get("original_category"):
        full_poll_question_header += f" (–ö–∞—Ç: {original_cat})"
    full_poll_question_header += f"\n{poll_question_text_for_api}"

    MAX_POLL_QUESTION_LENGTH = 255 # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç Telegram
    if len(full_poll_question_header) > MAX_POLL_QUESTION_LENGTH:
        truncate_at = MAX_POLL_QUESTION_LENGTH - 3
        full_poll_question_header = full_poll_question_header[:truncate_at] + "..."
        logger.warning(f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è poll –≤ —á–∞—Ç–µ {chat_id_str} –±—ã–ª —É—Å–µ—á–µ–Ω –¥–æ {MAX_POLL_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")

    _, poll_options, poll_correct_option_id, _ = prepare_poll_options(q_details)

    try:
        sent_poll_msg = await context.bot.send_poll(
            chat_id=chat_id_str,
            question=full_poll_question_header,
            options=poll_options,
            type=Poll.QUIZ,
            correct_option_id=poll_correct_option_id,
            open_period=poll_open_period,
            is_anonymous=False
        )

        session["current_poll_id"] = sent_poll_msg.poll.id
        session["current_index"] += 1 # –ò–Ω–¥–µ–∫—Å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –∑–¥–µ—Å—å, —É–∫–∞–∑—ã–≤–∞—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å

        state.current_poll[sent_poll_msg.poll.id] = {
            "chat_id": chat_id_str,
            "message_id": sent_poll_msg.message_id,
            "correct_index": poll_correct_option_id,
            "quiz_session": True,
            "question_details": q_details, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏, –≤–∫–ª—é—á–∞—è solution
            "associated_quiz_session_chat_id": chat_id_str,
            "is_last_question": is_last_question,
            "next_q_triggered_by_answer": False,
            "question_session_index": current_q_idx # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–µ—Å—Å–∏–∏
        }
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å {current_q_idx + 1}/{actual_num_q} —Å–µ—Å—Å–∏–∏ {chat_id_str}. Poll ID: {sent_poll_msg.poll.id}")

        job_delay_seconds = poll_open_period + JOB_GRACE_PERIOD
        job_name = f"poll_end_timeout_{chat_id_str}_{sent_poll_msg.poll.id}"

        if context.job_queue:
            existing_jobs = context.job_queue.get_jobs_by_name(job_name)
            for old_job in existing_jobs:
                old_job.schedule_removal() # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                logger.debug(f"–£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è/—Å—Ç–∞—Ä—ã–π job: {old_job.name}")

            next_question_timeout_job = context.job_queue.run_once(
                handle_current_poll_end, # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                timedelta(seconds=job_delay_seconds),
                data={"chat_id": chat_id_str, "ended_poll_id": sent_poll_msg.poll.id},
                name=job_name
            )
            session["next_question_job"] = next_question_timeout_job
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Ç–µ {chat_id_str}: {e}", exc_info=True)
        await show_quiz_session_results(context, chat_id_str, error_occurred=True)

# handle_current_poll_end: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –ø–æ —Ç–∞–π–º-–∞—É—Ç—É –≤ —Å–µ—Å—Å–∏–∏ /quiz10.
async def handle_current_poll_end(context: ContextTypes.DEFAULT_TYPE):
    if not context.job or not context.job.data: # type: ignore
        logger.error("handle_current_poll_end –≤—ã–∑–≤–∞–Ω –±–µ–∑ job data.")
        return

    job_data = context.job.data # type: ignore
    chat_id_str: str = job_data["chat_id"]
    ended_poll_id: str = job_data["ended_poll_id"]

    poll_info_that_ended = state.current_poll.pop(ended_poll_id, None)
    q_idx_from_poll_info = poll_info_that_ended.get("question_session_index", -1) if poll_info_that_ended else -1
    logger.info(f"Job 'handle_current_poll_end' —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —á–∞—Ç–∞ {chat_id_str}, poll_id {ended_poll_id} (–≤–æ–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏ ~{q_idx_from_poll_info + 1}).")

    session = state.current_quiz_session.get(chat_id_str)
    if not session:
        logger.warning(f"–°–µ—Å—Å–∏—è {chat_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ job –¥–ª—è poll {ended_poll_id}. –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω.")
        if poll_info_that_ended and poll_info_that_ended.get("question_details"):
            await send_solution_if_available(context, chat_id_str, poll_info_that_ended["question_details"], q_idx_from_poll_info)
        return

    if not poll_info_that_ended:
        logger.warning(f"Poll {ended_poll_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state.current_poll –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ job (–≤–µ—Ä–æ—è—Ç–Ω–æ, –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–æ—Å—Ä–æ—á–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º). Job –¥–ª—è {chat_id_str} –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return

    if poll_info_that_ended.get("next_q_triggered_by_answer"):
        logger.info(f"Job –¥–ª—è poll {ended_poll_id} (–≤–æ–ø—Ä–æ—Å {q_idx_from_poll_info + 1}) —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–æ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å/–ø–æ—è—Å–Ω–µ–Ω–∏–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç–≤–µ—Ç–æ–º. Job –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É
    await send_solution_if_available(context, chat_id_str, poll_info_that_ended["question_details"], q_idx_from_poll_info)

    is_last_q_from_poll_info = poll_info_that_ended.get("is_last_question", False)
    if is_last_q_from_poll_info:
        logger.info(f"–í—Ä–µ–º—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–∏–Ω–¥–µ–∫—Å {q_idx_from_poll_info}) —Å–µ—Å—Å–∏–∏ {chat_id_str} –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        await show_quiz_session_results(context, chat_id_str)
    else:
        if session["current_index"] == q_idx_from_poll_info + 1:
             logger.info(f"–¢–∞–π–º-–∞—É—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {q_idx_from_poll_info + 1} –≤ —Å–µ—Å—Å–∏–∏ {chat_id_str} (poll {ended_poll_id}). –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π.")
             await send_next_question_in_session(context, chat_id_str)
        else:
            logger.warning(f"Job –¥–ª—è poll {ended_poll_id} –≤ —Å–µ—Å—Å–∏–∏ {chat_id_str} –∑–∞–≤–µ—Ä—à–µ–Ω. "
                           f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞: current_index –≤ —Å–µ—Å—Å–∏–∏={session['current_index']}, "
                           f"–∏–Ω–¥–µ–∫—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞={q_idx_from_poll_info}. "
                           "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç—Ç–∏–º job'–æ–º, —Ç–∞–∫ –∫–∞–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ —Ä–∞—Å—Ö–æ–¥–∏—Ç—Å—è —Å –æ–∂–∏–¥–∞–µ–º—ã–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞.")


# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–≤–∏–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è
async def handle_single_quiz_poll_end(context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ (/quiz) –ø–æ —Ç–∞–π–º-–∞—É—Ç—É.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –∏ –æ—á–∏—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ –∏–∑ state.
    """
    if not context.job or not context.job.data: # type: ignore
        logger.error("handle_single_quiz_poll_end: Job data missing.")
        return

    job_data = context.job.data # type: ignore
    chat_id_str: str = job_data["chat_id_str"]
    poll_id: str = job_data["poll_id"]

    logger.info(f"Job 'handle_single_quiz_poll_end' —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è poll_id {poll_id} –≤ —á–∞—Ç–µ {chat_id_str}.")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ—â–µ –≤ state.current_poll.
    # –í–ê–ñ–ù–û: .pop() –µ–≥–æ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π, –µ—Å–ª–∏ job –∫–∞–∫-—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –¥–≤–∞–∂–¥—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–∞—é—Ç—Å—è –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å
    poll_info = state.current_poll.pop(poll_id, None)

    if poll_info:
        question_details = poll_info.get("question_details")
        is_quiz_session_poll = poll_info.get("quiz_session", False)

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π –∫–≤–∏–∑
        if not is_quiz_session_poll and question_details and question_details.get("solution"):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é send_solution_if_available
                # q_index_for_log = -1 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∫–≤–∏–∑–æ–≤, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏
                await send_solution_if_available(context, chat_id_str, question_details)
                logger.info(f"–ü–æ—è—Å–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–≤–∏–∑–∞ (poll {poll_id}) –≤ —á–∞—Ç–µ {chat_id_str} –ø–æ —Ç–∞–π–º–∞—É—Ç—É.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–≤–∏–∑–∞ (poll {poll_id}) –≤ —á–∞—Ç–µ {chat_id_str} –ø–æ —Ç–∞–π–º–∞—É—Ç—É: {e}", exc_info=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—Ä–æ—Å–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ state.current_poll –≤—ã–∑–æ–≤–æ–º .pop() –≤—ã—à–µ.
        logger.info(f"–û–¥–∏–Ω–æ—á–Ω—ã–π –∫–≤–∏–∑ (poll {poll_id}) –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ state.current_poll –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞ –≤ —á–∞—Ç–µ {chat_id_str}.")
    else:
        logger.warning(f"handle_single_quiz_poll_end: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è poll_id {poll_id} (—á–∞—Ç {chat_id_str}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ state.current_poll (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω). "
                       "–ü–æ—è—Å–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")


# show_quiz_session_results: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ /quiz10.
async def show_quiz_session_results(context: ContextTypes.DEFAULT_TYPE, chat_id_str: str, error_occurred: bool = False):
    session = state.current_quiz_session.get(chat_id_str)
    if not session:
        logger.warning(f"show_quiz_session_results: –°–µ—Å—Å–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        state.current_quiz_session.pop(chat_id_str, None) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∞, –µ—Å–ª–∏ –∫–∞–∫-—Ç–æ –æ—Å—Ç–∞–ª–∞—Å—å
        return

    # –û—Ç–º–µ–Ω—è–µ–º job –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ /stopquiz –∏–ª–∏ –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –¥–æ —Ç–∞–π–º–∞—É—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞)
    if job := session.get("next_question_job"):
        try:
            job.schedule_removal()
            session["next_question_job"] = None # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ job
        except Exception:
            pass

    num_q_in_session = session.get("actual_num_questions", NUMBER_OF_QUESTIONS_IN_SESSION)
    results_header = "üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üèÅ\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏:\n" if not error_occurred else "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.\n\n–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏:\n"
    results_body = ""

    if not session.get("session_scores"):
        results_body = "–í —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –∏–ª–∏ –Ω–µ –Ω–∞–±—Ä–∞–ª –æ—á–∫–æ–≤."
    else:
        sorted_session_participants = sorted(
            session["session_scores"].items(),
            key=lambda item: (-item[1].get("score", 0), item[1].get("name", "").lower())
        )

        for rank, (user_id, data) in enumerate(sorted_session_participants):
            user_name = data.get("name", f"User {user_id}")
            session_score = data.get("score", 0)
            global_score_data = state.user_scores.get(chat_id_str, {}).get(user_id, {})
            global_score = global_score_data.get("score", 0) # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ

            rank_prefix = f"{rank + 1}."
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_player_display –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞,
            # –ø–µ—Ä–µ–¥–∞–≤–∞—è ":" –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
            session_display = get_player_display(user_name, session_score, separator=":")

            results_body += (f"{rank_prefix} {session_display} (–∏–∑ {num_q_in_session} –≤–æ–ø—Ä.)\n"
                             f"    –û–±—â–∏–π —Å—á—ë—Ç –≤ —á–∞—Ç–µ: {pluralize_points(global_score)}\n")

        if len(sorted_session_participants) > 3:
             results_body += "\n–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏!"

    try:
        await context.bot.send_message(chat_id=chat_id_str, text=results_header + results_body)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Ç {chat_id_str}: {e}", exc_info=True)

    # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–ø—Ä–æ—Å–µ —Å–µ—Å—Å–∏–∏ –∏–∑ state.current_poll, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –æ—Å—Ç–∞–ª—Å—è
    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –µ—Å–ª–∏ show_quiz_session_results –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ poll –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–∞–π–º–∞—É—Ç–æ–º –∏–ª–∏ –¥–æ—Å—Ä–æ—á–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
    current_poll_id_of_session = session.get("current_poll_id")
    if current_poll_id_of_session and current_poll_id_of_session in state.current_poll:
        poll_data_to_check = state.current_poll.get(current_poll_id_of_session)
        if poll_data_to_check and poll_data_to_check.get("quiz_session") and poll_data_to_check.get("associated_quiz_session_chat_id") == chat_id_str:
            state.current_poll.pop(current_poll_id_of_session, None)
            logger.debug(f"Poll {current_poll_id_of_session} (—Å–µ—Å—Å–∏—è) —É–¥–∞–ª–µ–Ω –∏–∑ state.current_poll –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ {chat_id_str}.")

    state.current_quiz_session.pop(chat_id_str, None)
    logger.info(f"–°–µ—Å—Å–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –æ—á–∏—â–µ–Ω–∞.")

