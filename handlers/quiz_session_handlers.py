# handlers/quiz_session_handlers.py
import random
# import urllib.parse # –î–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ callback_data - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ _initiate_quiz10_session
from datetime import datetime, timedelta, timezone # –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
# ConversationHandler –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —É–±–∏—Ä–∞–µ–º –µ—Å–ª–∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from config import (logger, DEFAULT_POLL_OPEN_PERIOD, NUMBER_OF_QUESTIONS_IN_SESSION, # DEFAULT_POLL_OPEN_PERIOD –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é
                    CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY, CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY,
                    QUIZ10_NOTIFY_DELAY_MINUTES) # CALLBACK_DATA_QUIZ10_NOTIFY_START_NOW –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é
import state # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ quiz_data, user_scores, current_quiz_session, current_poll, pending_scheduled_quizzes
# from data_manager import save_user_data # save_user_data –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω
from quiz_logic import (get_random_questions, get_random_questions_from_all,
                        # prepare_poll_options, # prepare_poll_options –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω, –æ–Ω –≤ quiz_logic
                        send_next_question_in_session,
                        show_quiz_session_results) # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
# from utils import pluralize_points # pluralize_points –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Å—Å–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è quiz10 –∏ quiz10notify) ---
async def _initiate_quiz10_session(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    chat_id_str: str,
    user_id: int,
    category_name: str | None
):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é /quiz10."""
    questions_for_session = []
    intro_message_part = ""

    if category_name:
        questions_for_session = get_random_questions(category_name, NUMBER_OF_QUESTIONS_IN_SESSION)
        intro_message_part = f"–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name}"
    else:
        questions_for_session = get_random_questions_from_all(NUMBER_OF_QUESTIONS_IN_SESSION)
        intro_message_part = "–∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"

    actual_number_of_questions = len(questions_for_session)
    if actual_number_of_questions == 0:
        await context.bot.send_message(chat_id, f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è /quiz10 ({intro_message_part}).")
        return

    start_message_text = f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ {actual_number_of_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ ({intro_message_part})! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å!"
    if actual_number_of_questions < NUMBER_OF_QUESTIONS_IN_SESSION:
        start_message_text += f" (–ú–µ–Ω—å—à–µ {NUMBER_OF_QUESTIONS_IN_SESSION}, –¥–æ—Å—Ç—É–ø–Ω–æ {actual_number_of_questions})"

    intro_message = await context.bot.send_message(chat_id, start_message_text)

    state.current_quiz_session[chat_id_str] = {
        "questions": questions_for_session,
        "session_scores": {},
        "current_index": 0,
        "actual_num_questions": actual_number_of_questions,
        "message_id_intro": intro_message.message_id,
        "starter_user_id": str(user_id),
        "current_poll_id": None,
        "next_question_job": None,
        "category_used": category_name # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    }
    logger.info(f"/quiz10 –Ω–∞ {actual_number_of_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ ({intro_message_part}) –∑–∞–ø—É—â–µ–Ω–∞ –≤ —á–∞—Ç–µ {chat_id_str} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.")
    await send_next_question_in_session(context, chat_id_str)


async def quiz10_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat:
        logger.warning("quiz10_command: message or effective_chat is None.")
        return

    chat_id_str = str(update.effective_chat.id)

    if state.current_quiz_session.get(chat_id_str):
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞ /quiz10. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz.") # type: ignore
        return
    if state.pending_scheduled_quizzes.get(chat_id_str):
        await update.message.reply_text(f"–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∏–≥—Ä–∞ /quiz10notify. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz.") # type: ignore
        return

    if not state.quiz_data:
        await update.message.reply_text("–í–æ–ø—Ä–æ—Å—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ.") # type: ignore
        return

    available_categories = [cat_name for cat_name, q_list in state.quiz_data.items() if isinstance(q_list, list) and q_list]
    if not available_categories:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è /quiz10.") # type: ignore
        return

    keyboard = []
    for cat_name in available_categories:
        keyboard.append([InlineKeyboardButton(cat_name, callback_data=f"{CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY}{cat_name}")])
    keyboard.append([InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY)])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ /quiz10:', reply_markup=reply_markup) # type: ignore

async def handle_quiz10_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query: # query –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è CallbackQueryHandler
        logger.error("handle_quiz10_category_selection: query is None, —á—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å.")
        return
        
    await query.answer()

    if not query.message or not query.message.chat or not query.from_user:
        logger.warning("handle_quiz10_category_selection: message, chat or user is None in query.")
        return

    chat_id = query.message.chat.id
    chat_id_str = str(chat_id)
    user_id = query.from_user.id

    try:
        await query.edit_message_text(text=f"–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω. –ù–∞—á–∏–Ω–∞–µ–º /quiz10...")
    except Exception as e:
        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
        await context.bot.send_message(chat_id, "–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω. –ù–∞—á–∏–Ω–∞–µ–º /quiz10...")


    category_name = None
    if query.data == CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY:
        category_name = None
    elif query.data and query.data.startswith(CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY):
        category_name = query.data[len(CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY):]
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback_data –≤ handle_quiz10_category_selection: {query.data}")
        await context.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await _initiate_quiz10_session(context, chat_id, chat_id_str, user_id, category_name)

async def quiz10notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat or not update.effective_user:
        logger.warning("quiz10notify_command: message, chat or user is None.")
        return

    chat_id = update.effective_chat.id
    chat_id_str = str(chat_id)
    user_id = update.effective_user.id

    if state.current_quiz_session.get(chat_id_str):
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞ /quiz10. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz.") # type: ignore
        return
    if state.pending_scheduled_quizzes.get(chat_id_str):
        pending_info = state.pending_scheduled_quizzes[chat_id_str]
        scheduled_dt = pending_info.get("scheduled_time")
        time_left_str = "—Å–∫–æ—Ä–æ"
        if scheduled_dt and isinstance(scheduled_dt, datetime):
            now_utc = datetime.now(timezone.utc) 
            if scheduled_dt > now_utc: 
                time_left = scheduled_dt - now_utc
                time_left_str = f"–ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {max(1, int(time_left.total_seconds() / 60))} –º–∏–Ω."
            else:
                time_left_str = "–æ—á–µ–Ω—å —Å–∫–æ—Ä–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å)"

        await update.message.reply_text(f"–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∏–≥—Ä–∞ /quiz10notify (–Ω–∞—á–Ω–µ—Ç—Å—è {time_left_str}). –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz –¥–ª—è –æ—Ç–º–µ–Ω—ã.") # type: ignore
        return

    category_name_arg = " ".join(context.args) if context.args else None # type: ignore
    chosen_category_name = None 
    category_display_name = "—Å–ª—É—á–∞–π–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"

    if category_name_arg:
        if category_name_arg in state.quiz_data and state.quiz_data[category_name_arg]:
            chosen_category_name = category_name_arg
            category_display_name = f"–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{chosen_category_name}'"
        else:
            await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name_arg}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –±—É–¥–µ—Ç –ø–æ —Å–ª—É—á–∞–π–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.") # type: ignore
            
    if not chosen_category_name and not any(state.quiz_data.values()): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        all_questions_flat = [q for cat_list in state.quiz_data.values() for q_list in cat_list for q in q_list]
        if not all_questions_flat:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã.") # type: ignore
            return

    delay_seconds = QUIZ10_NOTIFY_DELAY_MINUTES * 60
    job_name = f"scheduled_quiz10_{chat_id_str}"
    
    category_for_job = chosen_category_name if chosen_category_name else "RANDOM" 

    job_context_data = {"chat_id": chat_id, "user_id": user_id, "category_name_encoded": category_for_job}

    if context.job_queue:
        existing_jobs = context.job_queue.get_jobs_by_name(job_name)
        for old_job in existing_jobs:
            old_job.schedule_removal()
            logger.debug(f"–£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è/—Å—Ç–∞—Ä—ã–π job –¥–ª—è quiz10notify: {old_job.name}")

        context.job_queue.run_once(
            _start_scheduled_quiz10_job_callback,
            timedelta(seconds=delay_seconds),
            data=job_context_data,
            name=job_name
        )

        scheduled_time_utc = datetime.now(timezone.utc) + timedelta(seconds=delay_seconds)
        state.pending_scheduled_quizzes[chat_id_str] = {
            "job_name": job_name,
            "category_name": chosen_category_name, 
            "starter_user_id": str(user_id),
            "scheduled_time": scheduled_time_utc 
        }

        await update.message.reply_text( # type: ignore
            f"üîî –ü—Ä–∏–Ω—è—Ç–æ! –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 –ø–æ {category_display_name} –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {QUIZ10_NOTIFY_DELAY_MINUTES} –º–∏–Ω.\n"
            "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz."
        )
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω /quiz10notify –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –ø–æ {category_display_name} —á–µ—Ä–µ–∑ {QUIZ10_NOTIFY_DELAY_MINUTES} –º–∏–Ω. Job: {job_name}")
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞: JobQueue –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.") # type: ignore
        logger.error("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ quiz10notify_command.")

async def _start_scheduled_quiz10_job_callback(context: ContextTypes.DEFAULT_TYPE):
    """Callback-—Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è JobQueue –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    if not context.job or not context.job.data:
        logger.error("_start_scheduled_quiz10_job_callback –≤—ã–∑–≤–∞–Ω –±–µ–∑ job data.")
        return

    job_data = context.job.data
    chat_id: int = job_data["chat_id"]
    chat_id_str = str(chat_id)
    user_id: int = job_data["user_id"] 
    category_name_encoded: str = job_data["category_name_encoded"]

    if chat_id_str not in state.pending_scheduled_quizzes:
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π quiz10 –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. Job –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return
    
    if state.current_quiz_session.get(chat_id_str):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π quiz10 –≤ —á–∞—Ç–µ {chat_id_str}, –Ω–æ —Ç–∞–º —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –¥—Ä—É–≥–∞—è —Å–µ—Å—Å–∏—è.")
        state.pending_scheduled_quizzes.pop(chat_id_str, None) 
        return

    pending_info = state.pending_scheduled_quizzes.pop(chat_id_str, None)
    if pending_info: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª–æ —á—Ç–æ —É–¥–∞–ª—è—Ç—å
         logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π quiz10 –¥–ª—è —á–∞—Ç–∞ {chat_id_str}. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ job: {category_name_encoded}")

    actual_category_name = None
    if category_name_encoded != "RANDOM":
        actual_category_name = category_name_encoded 

    await _initiate_quiz10_session(context, chat_id, chat_id_str, user_id, actual_category_name)

async def stop_quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_user or not update.effective_chat:
        logger.warning("stop_quiz_command: message, user or chat is None.")
        return

    chat_id = update.effective_chat.id
    chat_id_str = str(chat_id)
    user_id_str = str(update.effective_user.id)

    user_is_admin = False
    if update.effective_chat.type != "private":
        try:
            chat_member = await context.bot.get_chat_member(chat_id_str, user_id_str)
            if chat_member.status in [chat_member.ADMINISTRATOR, chat_member.OWNER]: # type: ignore
                user_is_admin = True
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è {user_id_str} –≤ {chat_id_str}: {e}")

    stopped_something = False

    active_session = state.current_quiz_session.get(chat_id_str)
    if active_session:
        if user_is_admin or user_id_str == active_session.get("starter_user_id"):
            logger.info(f"/stopquiz –æ—Ç {user_id_str} –≤ {chat_id_str}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ /quiz10.")
            current_poll_id_in_session = active_session.get("current_poll_id")
            if current_poll_id_in_session and current_poll_id_in_session in state.current_poll:
                poll_message_id = state.current_poll[current_poll_id_in_session].get("message_id")
                if poll_message_id:
                    try:
                        await context.bot.stop_poll(chat_id_str, poll_message_id) # type: ignore
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ {current_poll_id_in_session} —á–µ—Ä–µ–∑ /stopquiz: {e}")

            await show_quiz_session_results(context, chat_id_str, error_occurred=True) 
            await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.") # type: ignore
            stopped_something = True
        else:
            await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –Ω–∞—á–∞–ª –∞–∫—Ç–∏–≤–Ω—É—é /quiz10, –º–æ–∂–µ—Ç –µ–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.") # type: ignore
            return 
    
    pending_quiz = state.pending_scheduled_quizzes.get(chat_id_str)
    if pending_quiz:
        if user_is_admin or user_id_str == pending_quiz.get("starter_user_id"):
            job_name = pending_quiz.get("job_name")
            if job_name and context.job_queue:
                jobs = context.job_queue.get_jobs_by_name(job_name)
                for job in jobs:
                    job.schedule_removal()
                    logger.info(f"–û—Ç–º–µ–Ω–µ–Ω –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π quiz (job: {job_name}) –≤ —á–∞—Ç–µ {chat_id_str} –∫–æ–º–∞–Ω–¥–æ–π /stopquiz –æ—Ç {user_id_str}.")

            state.pending_scheduled_quizzes.pop(chat_id_str, None)
            await update.message.reply_text("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10notify –æ—Ç–º–µ–Ω–µ–Ω–∞.") # type: ignore
            stopped_something = True
        else:
            if not active_session: 
                 await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª /quiz10notify, –º–æ–∂–µ—Ç –µ–µ –æ—Ç–º–µ–Ω–∏—Ç—å.") # type: ignore
            return

    if not stopped_something:
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω /quiz10 –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏/–æ—Ç–º–µ–Ω—ã.") # type: ignore

