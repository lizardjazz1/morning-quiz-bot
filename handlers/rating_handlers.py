# handlers/rating_handlers.py
from telegram import Update
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from config import logger
import state # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ user_scores
from utils import pluralize_points # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–æ—á–∫–∏"

async def rating_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat:
        logger.warning("rating_command: message or effective_chat is None.")
        return
    chat_id_str = str(update.effective_chat.id)

    if chat_id_str not in state.user_scores or not state.user_scores[chat_id_str]:
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤.") # type: ignore
        return

    sorted_scores_list = sorted(
        state.user_scores[chat_id_str].items(),
        key=lambda item: item[1].get("score", 0),
        reverse=True
    )

    if not sorted_scores_list:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–∞–±—Ä–∞–Ω–Ω—ã–º–∏ –æ—á–∫–∞–º–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.") # type: ignore
        return

    top_players_text = "üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ (/rating):\n\n"
    for i, (user_id, data) in enumerate(sorted_scores_list[:10]):
        player_name = data.get('name', f'–ò–≥—Ä–æ–∫ {user_id}')
        player_score = data.get('score', 0)
        top_players_text += f"{i+1}. {player_name} - {pluralize_points(player_score)}\n" # –ò—Å–ø–æ–ª—å–∑—É–µ–º pluralize

    await update.message.reply_text(top_players_text) # type: ignore

async def global_top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return

    if not state.user_scores:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö –∏–≥—Ä–æ–∫–æ–≤.") # type: ignore
        return

    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∞
    aggregated_global_scores = {} # user_id: {"name": name, "total_score": score}
    for chat_id, chat_users in state.user_scores.items(): # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º
        for user_id, data in chat_users.items():
            user_name = data.get("name", f"–ò–≥—Ä–æ–∫ {user_id}")
            user_chat_score = data.get("score", 0)
            
            if user_id not in aggregated_global_scores:
                aggregated_global_scores[user_id] = {"name": user_name, "total_score": 0}
            
            aggregated_global_scores[user_id]["total_score"] += user_chat_score
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ "–ø–æ–ª–Ω–µ–µ" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–∏–¥–µ–Ω–Ω–æ–µ
            # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ö—Ä–∞–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if len(user_name) > len(aggregated_global_scores[user_id]["name"]):
                 aggregated_global_scores[user_id]["name"] = user_name


    if not aggregated_global_scores:
        await update.message.reply_text("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ.") # type: ignore
        return

    sorted_global_scores = sorted(
        aggregated_global_scores.items(),
        key=lambda item: item[1]["total_score"],
        reverse=True
    )

    global_top_text = "üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ (/globaltop):\n\n"
    for i, (user_id, data) in enumerate(sorted_global_scores[:10]):
        player_name = data["name"]
        player_total_score = data["total_score"]
        global_top_text += f"{i+1}. {player_name} - {pluralize_points(player_total_score)}\n" # –ò—Å–ø–æ–ª—å–∑—É–µ–º pluralize

    await update.message.reply_text(global_top_text) # type: ignore

