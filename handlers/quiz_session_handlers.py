# handlers/quiz_session_handlers.py
import asyncio
import random
from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, JobQueue
from telegram.constants import ParseMode, ChatMemberStatus

from config import (logger, DEFAULT_POLL_OPEN_PERIOD, NUMBER_OF_QUESTIONS_IN_SESSION,
                    CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY_SHORT, CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY,
                    JOB_GRACE_PERIOD, QUIZ10_NOTIFY_DELAY_MINUTES)
import state
from quiz_logic import prepare_poll_options, get_random_questions
from utils import pluralize_points

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def _is_user_admin_or_creator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞."""
    if not update.effective_chat or not update.effective_user:
        return False
    if update.effective_chat.type == 'private': # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ "–∞–¥–º–∏–Ω" —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        return True
    try:
        member = await context.bot.get_chat_member(update.effective_chat.id, update.effective_user.id)
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è {update.effective_user.id} –≤ {update.effective_chat.id}: {e}")
        return False


async def send_next_question_job(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –µ–µ."""
    job = context.job
    if not job or not job.data:
        logger.error("send_next_question_job: Job data is missing.")
        return

    chat_id_str = job.data.get("chat_id_str")
    session = state.current_quiz_session.get(chat_id_str)

    if not session:
        logger.info(f"–°–µ—Å—Å–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ job.")
        return # –°–µ—Å—Å–∏—è –º–æ–≥–ª–∞ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ /stopquiz

    current_question_index = session["current_question_index"]

    if current_question_index >= len(session["questions"]):
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
        await context.bot.send_message(chat_id_str, "üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        state.current_quiz_session.pop(chat_id_str, None)
        logger.info(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id_str}.")
        return

    question_data = session["questions"][current_question_index]
    _, poll_options, poll_correct_option_id, _ = prepare_poll_options(question_data)

    question_text_for_poll = question_data['question']
    question_title = f"–í–æ–ø—Ä–æ—Å {current_question_index + 1}/{len(session['questions'])}"
    if original_cat := question_data.get("original_category"):
        question_title += f" (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {original_cat})"

    full_question_text = f"{question_title}\n\n{question_text_for_poll}"

    MAX_POLL_QUESTION_LENGTH = 300 # Telegram API limit
    if len(full_question_text) > MAX_POLL_QUESTION_LENGTH:
        full_question_text = full_question_text[:MAX_POLL_QUESTION_LENGTH-3] + "..."
        logger.warning(f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è poll –≤ {chat_id_str} —É—Å–µ—á–µ–Ω –¥–æ {MAX_POLL_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")

    try:
        sent_poll_msg = await context.bot.send_poll(
            chat_id=chat_id_str,
            question=full_question_text,
            options=poll_options,
            type='quiz',
            correct_option_id=poll_correct_option_id,
            open_period=session["open_period"],
            is_anonymous=False, # –í–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–º–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤
            explanation=question_data.get('comment', ''),
            explanation_parse_mode=ParseMode.MARKDOWN_V2 if question_data.get('comment') else None
        )
        state.current_poll[sent_poll_msg.poll.id] = {
            "chat_id": chat_id_str,
            "message_id": sent_poll_msg.message_id,
            "correct_index": poll_correct_option_id,
            "quiz_session": True, # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —á–∞—Å—Ç—å —Å–µ—Å—Å–∏–∏ /quiz10
            "question_session_index": current_question_index,
            "question_details": question_data,
            "open_timestamp": sent_poll_msg.date.timestamp()
        }
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å {current_question_index + 1} (Poll ID: {sent_poll_msg.poll.id}) –¥–ª—è /quiz10 –≤ —á–∞—Ç {chat_id_str}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ {current_question_index + 1} –≤ —á–∞—Ç {chat_id_str}: {e}", exc_info=True)
        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
        try:
            await context.bot.send_message(chat_id_str, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        except Exception as send_err:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç {chat_id_str}: {send_err}")
        state.current_quiz_session.pop(chat_id_str, None) # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        return


    session["current_question_index"] += 1 # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ job

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π job (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
    # –ó–∞–¥–µ—Ä–∂–∫–∞ = –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç + –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä
    delay_seconds = session["open_period"] + JOB_GRACE_PERIOD
    job_queue: JobQueue | None = context.application.job_queue
    if job_queue:
        # –ò–º—è –¥–∂–æ–±–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Ç–µ
        next_job_name = f"quiz10_nextq_{chat_id_str}"
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π job —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º, –µ—Å–ª–∏ –æ–Ω –≤–¥—Ä—É–≥ –æ—Å—Ç–∞–ª—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
        # –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –¥–∂–æ–±–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
        existing_jobs = job_queue.get_jobs_by_name(next_job_name)
        for old_job in existing_jobs:
            old_job.schedule_removal()
            logger.debug(f"–£–¥–∞–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π job '{next_job_name}' –ø–µ—Ä–µ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –¥–ª—è {chat_id_str}.")

        job_queue.run_once(
            send_next_question_job,
            when=timedelta(seconds=delay_seconds),
            data={"chat_id_str": chat_id_str}, # –ü–µ—Ä–µ–¥–∞–µ–º chat_id_str
            name=next_job_name # –î–∞–µ–º –∏–º—è –¥–∂–æ–±—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        )
        session["next_job_name"] = next_job_name # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –¥–∂–æ–±–∞ –≤ —Å–µ—Å—Å–∏–∏
        logger.debug(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å/–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è /quiz10 –≤ —á–∞—Ç–µ {chat_id_str} (job: {next_job_name}).")
    else:
        logger.error(f"JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è {chat_id_str}.")
        # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É."""
    if not update.message or not update.effective_chat: return

    chat_id = update.effective_chat.id
    chat_id_str = str(chat_id)

    if state.current_quiz_session.get(chat_id_str):
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /stopquiz.")
        return
    if state.active_daily_quizzes.get(chat_id_str):
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ –∏–¥–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /stopquiz.")
        return
    if state.pending_scheduled_quizzes.get(chat_id_str):
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10notify. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ /stopquiz.")
        return


    question = get_random_questions(1)
    if not question:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    q_data = question[0]
    _, poll_options, poll_correct_option_id, _ = prepare_poll_options(q_data)

    question_text_for_poll = q_data['question']
    question_title = "–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å!"
    if original_cat := q_data.get("original_category"):
        question_title += f" (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {original_cat})"

    full_question_text = f"{question_title}\n\n{question_text_for_poll}"

    MAX_POLL_QUESTION_LENGTH = 300 # Telegram API limit
    if len(full_question_text) > MAX_POLL_QUESTION_LENGTH:
        full_question_text = full_question_text[:MAX_POLL_QUESTION_LENGTH-3] + "..."
        logger.warning(f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è poll (/quiz) –≤ {chat_id_str} —É—Å–µ—á–µ–Ω –¥–æ {MAX_POLL_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")


    try:
        sent_poll_msg = await context.bot.send_poll(
            chat_id=chat_id,
            question=full_question_text,
            options=poll_options,
            type='quiz',
            correct_option_id=poll_correct_option_id,
            open_period=DEFAULT_POLL_OPEN_PERIOD,
            is_anonymous=False,
            explanation=q_data.get('comment', ''),
            explanation_parse_mode=ParseMode.MARKDOWN_V2 if q_data.get('comment') else None
        )
        state.current_poll[sent_poll_msg.poll.id] = {
            "chat_id": str(chat_id),
            "message_id": sent_poll_msg.message_id,
            "correct_index": poll_correct_option_id,
            "quiz_session": False, # –≠—Ç–æ –Ω–µ —á–∞—Å—Ç—å —Å–µ—Å—Å–∏–∏ /quiz10
            "daily_quiz": False,   # –≠—Ç–æ –Ω–µ —á–∞—Å—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
            "question_details": q_data,
            "open_timestamp": sent_poll_msg.date.timestamp()
        }
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å /quiz (Poll ID: {sent_poll_msg.poll.id}) –≤ —á–∞—Ç {chat_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ /quiz –≤ —á–∞—Ç {chat_id}: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞.")


async def quiz10_command(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str | None = None, initiated_by_notify: bool = False):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Å—Å–∏—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤."""
    if not update.message and not initiated_by_notify: # –ï—Å–ª–∏ –Ω–µ –æ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–µ –æ—Ç notify
        logger.warning("quiz10_command –≤—ã–∑–≤–∞–Ω –±–µ–∑ update.message –∏ –Ω–µ –∏–∑ notify_job")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ notify_job, update.message –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ job.data
    chat_id = None
    reply_to_message = update.message if update.message else None

    if initiated_by_notify and context.job and context.job.data:
        chat_id = context.job.data.get("chat_id")
        # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç notify –Ω–µ –Ω—É–∂–µ–Ω reply_to_message, —Ç.–∫. –æ–Ω–∏ —Å–∞–º–∏ –ø–æ —Å–µ–±–µ
    elif update.effective_chat:
        chat_id = update.effective_chat.id
    
    if not chat_id:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è quiz10_command")
        if reply_to_message: await reply_to_message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: –æ—à–∏–±–∫–∞ —Å ID —á–∞—Ç–∞.")
        return

    chat_id_str = str(chat_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é /quiz10 –∏–ª–∏ /quiz10notify
    if state.current_quiz_session.get(chat_id_str) and not initiated_by_notify: # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ –µ—Å—Ç—å –∏ —ç—Ç–æ –Ω–µ –∑–∞–ø—É—Å–∫ –æ—Ç notify
        await reply_to_message.reply_text("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 —É–∂–µ –∏–¥–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /stopquiz.")
        return
    if state.pending_scheduled_quizzes.get(chat_id_str) and not initiated_by_notify: # –ï—Å–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∏ —ç—Ç–æ –Ω–µ –∑–∞–ø—É—Å–∫ –æ—Ç notify
        pending_details = state.pending_scheduled_quizzes[chat_id_str]
        start_dt = datetime.fromtimestamp(pending_details['start_timestamp'])
        start_time_str = start_dt.strftime("%H:%M:%S")
        await reply_to_message.reply_text(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {start_time_str} –ú–°–ö. "
                                          "–î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /stopquiz.")
        return
    if state.active_daily_quizzes.get(chat_id_str):
        msg = "–í —ç—Ç–æ–º —á–∞—Ç–µ –∏–¥–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /stopquiz."
        if reply_to_message: await reply_to_message.reply_text(msg)
        else: await context.bot.send_message(chat_id, msg)
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—É—Å–∫ –æ—Ç notify, —É–¥–∞–ª—è–µ–º –∏–∑ pending
    if initiated_by_notify:
        state.pending_scheduled_quizzes.pop(chat_id_str, None)
        # –£–¥–∞–ª—è–µ–º job —Å–∞–º–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ–Ω —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è
        if context.job and context.job.name:
            job_queue: JobQueue | None = context.application.job_queue
            if job_queue:
                current_jobs = job_queue.get_jobs_by_name(context.job.name)
                for j in current_jobs: j.schedule_removal()
        logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10notify –¥–ª—è —á–∞—Ç–∞ {chat_id_str}.")


    open_period_args = [arg for arg in (context.args or []) if arg.isdigit()]
    open_period = int(open_period_args[0]) if open_period_args else DEFAULT_POLL_OPEN_PERIOD
    if not (10 <= open_period <= 600): # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
        open_period = DEFAULT_POLL_OPEN_PERIOD
        msg = f"–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 600 —Å–µ–∫—É–Ω–¥. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_POLL_OPEN_PERIOD} —Å–µ–∫."
        if reply_to_message: await reply_to_message.reply_text(msg)
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç notify, —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ, —Ç.–∫. –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ /quiz10notify

    category_to_use = category # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏–∑ callback_handler
    if not category_to_use and context.args:
        # –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (–≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–≤–µ—Ç–∞)
        category_args = [arg for arg in context.args if not arg.isdigit()]
        if category_args:
            category_to_use = " ".join(category_args) # –û–±—ä–µ–¥–∏–Ω—è–µ–º, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤

    questions = get_random_questions(NUMBER_OF_QUESTIONS_IN_SESSION, category_name=category_to_use)

    if not questions:
        msg = f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ({NUMBER_OF_QUESTIONS_IN_SESSION}) "
        if category_to_use and category_to_use != "–°–ª—É—á–∞–π–Ω–∞—è":
            msg += f"–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_to_use}'."
        else:
            msg += "–ø–æ —Å–ª—É—á–∞–π–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."
        msg += " –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –±—É–¥–µ—Ç –Ω–∞—á–∞—Ç–∞."

        if reply_to_message: await reply_to_message.reply_text(msg)
        else: await context.bot.send_message(chat_id, msg)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    state.current_quiz_session[chat_id_str] = {
        "questions": questions,
        "current_question_index": 0,
        "open_period": open_period,
        "category_name": category_to_use or "–°–ª—É—á–∞–π–Ω–∞—è",
        "next_job_name": None # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ send_next_question_job
    }

    category_name_display = category_to_use if category_to_use and category_to_use != "–°–ª—É—á–∞–π–Ω–∞—è" else "—Å–ª—É—á–∞–π–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    start_message_text = (
        f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ {NUMBER_OF_QUESTIONS_IN_SESSION} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ {category_name_display}! \n"
        f"–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: {open_period} —Å–µ–∫—É–Ω–¥."
    )
    if reply_to_message: await reply_to_message.reply_text(start_message_text)
    else: await context.bot.send_message(chat_id, start_message_text)

    logger.info(f"–ù–∞—á–∞—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 –¥–ª—è —á–∞—Ç–∞ {chat_id_str}. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name_display}, –≤—Ä–µ–º—è: {open_period} —Å–µ–∫.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–∏–ª–∏ —Å –æ—á–µ–Ω—å –º–∞–ª–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π)
    job_queue: JobQueue | None = context.application.job_queue
    if job_queue:
        first_job_name = f"quiz10_nextq_{chat_id_str}" # –¢–∞–∫–æ–µ –∂–µ –∏–º—è, –∫–∞–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π job —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        existing_jobs = job_queue.get_jobs_by_name(first_job_name)
        for old_job in existing_jobs: old_job.schedule_removal()

        job_queue.run_once(
            send_next_question_job,
            when=timedelta(seconds=1), # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ —É—Å–ø–µ–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è
            data={"chat_id_str": chat_id_str},
            name=first_job_name
        )
        state.current_quiz_session[chat_id_str]["next_job_name"] = first_job_name
        logger.debug(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è /quiz10 –≤ —á–∞—Ç–µ {chat_id_str} (job: {first_job_name}).")

    else:
        logger.error(f"JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è {chat_id_str}.")
        await context.bot.send_message(chat_id_str, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –≤–æ–ø—Ä–æ—Å–æ–≤. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        state.current_quiz_session.pop(chat_id_str, None)


async def stop_quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É /quiz10 –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é /quiz10notify."""
    if not update.message or not update.effective_chat: return
    chat_id_str = str(update.effective_chat.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if update.effective_chat.type != 'private':
        is_admin = await _is_user_admin_or_creator(update, context)
        if not is_admin:
            await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return

    stopped_something = False
    job_queue: JobQueue | None = context.application.job_queue

    # 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ /quiz10
    active_session = state.current_quiz_session.get(chat_id_str)
    if active_session:
        next_job_name = active_session.get("next_job_name")
        if next_job_name and job_queue:
            jobs_to_remove = job_queue.get_jobs_by_name(next_job_name)
            for job in jobs_to_remove:
                job.schedule_removal()
            logger.info(f"–£–¥–∞–ª–µ–Ω job '{next_job_name}' –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ /quiz10 –≤ —á–∞—Ç–µ {chat_id_str}.")
        state.current_quiz_session.pop(chat_id_str, None)
        await update.message.reply_text("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        logger.info(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç–µ {chat_id_str} –ø–æ –∫–æ–º–∞–Ω–¥–µ /stopquiz.")
        stopped_something = True

    # 2. –û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π /quiz10notify
    pending_quiz = state.pending_scheduled_quizzes.get(chat_id_str)
    if pending_quiz:
        notify_job_name = pending_quiz.get("notify_job_name")
        quiz_start_job_name = pending_quiz.get("quiz_start_job_name")

        if notify_job_name and job_queue:
            jobs_to_remove = job_queue.get_jobs_by_name(notify_job_name)
            for job in jobs_to_remove: job.schedule_removal()
            logger.info(f"–£–¥–∞–ª–µ–Ω notify_job '{notify_job_name}' –¥–ª—è –æ—Ç–º–µ–Ω—ã /quiz10notify –≤ —á–∞—Ç–µ {chat_id_str}.")

        if quiz_start_job_name and job_queue:
            jobs_to_remove = job_queue.get_jobs_by_name(quiz_start_job_name)
            for job in jobs_to_remove: job.schedule_removal()
            logger.info(f"–£–¥–∞–ª–µ–Ω quiz_start_job '{quiz_start_job_name}' –¥–ª—è –æ—Ç–º–µ–Ω—ã /quiz10notify –≤ —á–∞—Ç–µ {chat_id_str}.")

        state.pending_scheduled_quizzes.pop(chat_id_str, None)
        await update.message.reply_text("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ (/quiz10notify) –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10notify –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ —á–∞—Ç–µ {chat_id_str} –ø–æ –∫–æ–º–∞–Ω–¥–µ /stopquiz.")
        stopped_something = True
        
    # 3. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    active_daily_quiz = state.active_daily_quizzes.get(chat_id_str)
    if active_daily_quiz:
        next_q_job_name = active_daily_quiz.get("job_name_next_q")
        if next_q_job_name and job_queue:
            jobs_to_remove = job_queue.get_jobs_by_name(next_q_job_name)
            for job in jobs_to_remove:
                job.schedule_removal()
            logger.info(f"–£–¥–∞–ª–µ–Ω job '{next_q_job_name}' –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ —á–∞—Ç–µ {chat_id_str}.")
        
        # –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç—Ç–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
        # –≠—Ç–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è —á–∞—Å—Ç—å, —Ç.–∫. –æ–ø—Ä–æ—Å—ã –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥–æ–π –±–æ—Ç—É –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è)
        # –ú—ã –º–æ–∂–µ–º –ø–æ–º–µ—Ç–∏—Ç—å, —á—Ç–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏ poll_handler –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç—ã–≤–∞—Ç—å –æ—á–∫–∏
        state.active_daily_quizzes.pop(chat_id_str, None) # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        
        await update.message.reply_text("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç–µ {chat_id_str} –ø–æ –∫–æ–º–∞–Ω–¥–µ /stopquiz.")
        stopped_something = True

    if not stopped_something:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")


async def show_quiz_categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è /quiz10."""
    if not update.message or not update.effective_chat: return

    chat_id = update.effective_chat.id
    chat_id_str = str(chat_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ/–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    if state.current_quiz_session.get(chat_id_str):
        await update.message.reply_text("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 —É–∂–µ –∏–¥–µ—Ç. –ö–æ–º–∞–Ω–¥—É–π—Ç–µ /stopquiz –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    if state.pending_scheduled_quizzes.get(chat_id_str):
        await update.message.reply_text("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10notify —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞. –ö–æ–º–∞–Ω–¥—É–π—Ç–µ /stopquiz –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    if state.active_daily_quizzes.get(chat_id_str):
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ –∏–¥–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞. /stopquiz –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        return


    if not state.quiz_data:
        await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return

    available_categories = sorted([cat for cat, questions in state.quiz_data.items() if questions])
    if not available_categories:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.")
        return

    keyboard = []
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ chat_data –ø–æ–¥ –∫–æ—Ä–æ—Ç–∫–∏–º ID –¥–ª—è callback'–∞
    # –≠—Ç–æ –Ω—É–∂–Ω–æ, —Ç.–∫. callback_data –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ
    category_map_for_callback = {} # short_id -> full_category_name

    MAX_CATEGORIES_IN_MENU_Q10 = 25 # –õ–∏–º–∏—Ç –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º

    for i, cat_name in enumerate(available_categories[:MAX_CATEGORIES_IN_MENU_Q10]):
        short_id = f"c{i}" # –ü—Ä–æ—Å—Ç–æ–π –∫–æ—Ä–æ—Ç–∫–∏–π ID
        category_map_for_callback[short_id] = cat_name
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ callback_data –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (64 –±–∞–π—Ç–∞)
        callback_data = f"{CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY_SHORT}{short_id}"
        if len(callback_data.encode('utf-8')) > 64:
            logger.error(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π callback_data '{callback_data}' –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{cat_name}' (/quiz10) —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ü—Ä–æ–ø—É—Å–∫ –∫–Ω–æ–ø–∫–∏.")
            continue
        keyboard.append([InlineKeyboardButton(cat_name, callback_data=callback_data)])

    keyboard.append([InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY)])
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤ chat_data, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ callback_handler
    # –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è —á–∞—Ç–∞
    context.chat_data[f"quiz10_category_map_{chat_id_str}"] = category_map_for_callback

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã /quiz10:"
    if len(available_categories) > MAX_CATEGORIES_IN_MENU_Q10:
        text += f"\n(–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {MAX_CATEGORIES_IN_MENU_Q10} –∏–∑ {len(available_categories)}. –î–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/quiz10 –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`)"
    
    await update.message.reply_text(text, reply_markup=reply_markup)


async def handle_quiz10_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ InlineKeyboard –¥–ª—è /quiz10."""
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

    if not query.message or not query.message.chat: return

    chat_id_str = str(query.message.chat.id)
    category_map_key = f"quiz10_category_map_{chat_id_str}"
    category_map = context.chat_data.pop(category_map_key, None) # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    selected_category_name: str | None = None

    if query.data == CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY:
        selected_category_name = "–°–ª—É—á–∞–π–Ω–∞—è" # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    elif query.data and query.data.startswith(CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY_SHORT):
        if category_map:
            short_id = query.data[len(CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY_SHORT):]
            selected_category_name = category_map.get(short_id)
        else:
            await query.edit_message_text(text="–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /quiz10.", reply_markup=None)
            logger.warning(f"–ö–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π quiz10_category_map_{chat_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ chat_data.")
            return

    if selected_category_name:
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category_name}. –ù–∞—á–∏–Ω–∞–µ–º /quiz10...", reply_markup=None)
        except Exception as e: # –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è /quiz10 –≤ {chat_id_str}: {e}")
            # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            await context.bot.send_message(chat_id_str, f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category_name}. –ù–∞—á–∏–Ω–∞–µ–º /quiz10...")


        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ quiz10_command —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        # –°–æ–∑–¥–∞–µ–º "—Ñ–∏–∫—Ç–∏–≤–Ω—ã–π" Update –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ quiz10_command, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, quiz10_command —É–∂–µ —É–º–µ–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å category –Ω–∞–ø—Ä—è–º—É—é
        class MockMessage:
            async def reply_text(self, text, **kwargs): # –ú–æ–∫ –¥–ª—è reply_text
                return await context.bot.send_message(chat_id_str, text, **kwargs)
        
        mock_update = Update(update_id=query.update_id, message=MockMessage()) # type: ignore
        # –ü–µ—Ä–µ–¥–∞–µ–º chat.id –∏ user.id –∏–∑ query
        if query.message and query.message.chat: mock_update.effective_chat = query.message.chat
        if query.from_user: mock_update.effective_user = query.from_user
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç), –Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
        # context.args –º–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ –Ω–∏—Ö
        original_args = context.args if isinstance(context.args, list) else []

        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ quiz10_command, –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        # quiz10_command —Å–∞–º–∞ —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ (–≤—Ä–µ–º–µ–Ω–µ–º –∏ —Ç.–¥.)
        await quiz10_command(mock_update, context, category=selected_category_name)

    else:
        error_text = "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        if query.data != CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY and not category_map:
             error_text = "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ /quiz10 –µ—â–µ —Ä–∞–∑."
        try:
            await query.edit_message_text(text=error_text, reply_markup=None)
        except Exception: pass # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ


async def _quiz10_notify_job(context: ContextTypes.DEFAULT_TYPE):
    """Job, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    job = context.job
    if not job or not job.data:
        logger.error("_quiz10_notify_job: Job data is missing.")
        return

    chat_id = job.data.get("chat_id")
    category_name = job.data.get("category_name")
    open_period = job.data.get("open_period")
    delay_minutes = job.data.get("delay_minutes")
    
    if not chat_id:
        logger.error("_quiz10_notify_job: chat_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ job.data.")
        return

    chat_id_str = str(chat_id)
    pending_quiz_details = state.pending_scheduled_quizzes.get(chat_id_str)

    if not pending_quiz_details or pending_quiz_details.get("notify_job_name") != job.name:
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {chat_id_str} (job: {job.name}) –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ. Job –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        return # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ –¥—Ä—É–≥–∏–º /quiz10notify
    
    category_display = f"–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}'" if category_name and category_name != "–°–ª—É—á–∞–π–Ω–∞—è" else "—Å–ª—É—á–∞–π–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    time_word = pluralize_points(delay_minutes, "–º–∏–Ω—É—Ç—É", "–º–∏–Ω—É—Ç—ã", "–º–∏–Ω—É—Ç")
    
    notify_message = (f"üîî –í–Ω–∏–º–∞–Ω–∏–µ! –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 –ø–æ {category_display} –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {delay_minutes} {time_word}.\n"
                      f"–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: {open_period} —Å–µ–∫—É–Ω–¥. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å!")
    try:
        await context.bot.send_message(chat_id, notify_message)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ /quiz10notify –≤ —á–∞—Ç {chat_id_str}.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ /quiz10notify –≤ —á–∞—Ç {chat_id_str}: {e}")
        # –£–¥–∞–ª—è–µ–º –∏–∑ pending, —Ç.–∫. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
        state.pending_scheduled_quizzes.pop(chat_id_str, None)
        # Job —Å—Ç–∞—Ä—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Ç–∞–∫–∂–µ –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è, –µ–≥–æ –∏–º—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ pending_quiz_details
        if pending_quiz_details and (start_job_name := pending_quiz_details.get("quiz_start_job_name")):
            job_queue: JobQueue | None = context.application.job_queue
            if job_queue:
                for j in job_queue.get_jobs_by_name(start_job_name): j.schedule_removal()
        return

    # Job —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è, —Ç–µ–ø–µ—Ä—å –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω
    # Job —Å—Ç–∞—Ä—Ç–∞ —Å–∞–º–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —É–∂–µ –±—ã–ª –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –≤—ã–∑–æ–≤–µ /quiz10notify

async def quiz10_notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É /quiz10 —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∑–∞ N –º–∏–Ω—É—Ç."""
    if not update.message or not update.effective_chat: return
    
    chat_id = update.effective_chat.id
    chat_id_str = str(chat_id)

    if not await _is_user_admin_or_creator(update, context):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º.")
        return

    if state.current_quiz_session.get(chat_id_str):
        await update.message.reply_text("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 —É–∂–µ –∏–¥–µ—Ç. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ (/stopquiz).")
        return
    if state.active_daily_quizzes.get(chat_id_str):
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ –∏–¥–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞. /stopquiz –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        return

    args = list(context.args or []) # –ö–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω—è—Ç—å

    # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –µ—Å—Ç—å)
    delay_minutes_actual = QUIZ10_NOTIFY_DELAY_MINUTES # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if args and args[0].isdigit():
        try:
            val = int(args.pop(0))
            if 1 <= val <= 1440: # –û—Ç 1 –º–∏–Ω—É—Ç—ã –¥–æ 24 —á–∞—Å–æ–≤
                delay_minutes_actual = val
            else:
                await update.message.reply_text("–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç.")
                return
        except ValueError: pass # –ù–µ —á–∏—Å–ª–æ, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–≤–µ—Ç (–≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –µ—Å—Ç—å)
    open_period_actual = DEFAULT_POLL_OPEN_PERIOD
    if args and args[0].isdigit():
        try:
            val = int(args.pop(0))
            if 10 <= val <= 600: # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                open_period_actual = val
            else:
                await update.message.reply_text(f"–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 600 —Å–µ–∫—É–Ω–¥. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {open_period_actual} —Å–µ–∫.")
        except ValueError: pass

    # 3. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_name_actual = " ".join(args) if args else None # None –æ–∑–Ω–∞—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é
    if category_name_actual and category_name_actual.lower() in ["random", "—Å–ª—É—á–∞–π–Ω–∞—è"]:
        category_name_actual = None


    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞)
    if category_name_actual:
        if not state.quiz_data or category_name_actual not in state.quiz_data or not state.quiz_data[category_name_actual]:
            await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name_actual}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if len(state.quiz_data[category_name_actual]) < NUMBER_OF_QUESTIONS_IN_SESSION:
             await update.message.reply_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name_actual}' –º–µ–Ω–µ–µ {NUMBER_OF_QUESTIONS_IN_SESSION} –≤–æ–ø—Ä–æ—Å–æ–≤. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
             return
    else: # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–ª—É—á–∞–π–Ω–∞—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        if not get_random_questions(NUMBER_OF_QUESTIONS_IN_SESSION, None): # –ü—Ä–æ–±–Ω—ã–π –≤—ã–∑–æ–≤
            await update.message.reply_text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ({NUMBER_OF_QUESTIONS_IN_SESSION} —à—Ç.) –ø–æ —Å–ª—É—á–∞–π–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")
            return

    job_queue: JobQueue | None = context.application.job_queue
    if not job_queue:
        logger.error("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è quiz10_notify_command.")
        await update.message.reply_text("–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if existing_pending := state.pending_scheduled_quizzes.pop(chat_id_str, None):
        if notify_job_name := existing_pending.get("notify_job_name"):
            for j in job_queue.get_jobs_by_name(notify_job_name): j.schedule_removal()
        if quiz_start_job_name := existing_pending.get("quiz_start_job_name"):
            for j in job_queue.get_jobs_by_name(quiz_start_job_name): j.schedule_removal()
        logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10notify –¥–ª—è —á–∞—Ç–∞ {chat_id_str}.")


    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è jobs
    timestamp_now_for_job_name = int(datetime.now().timestamp())
    base_job_name = f"quiz10notify_{chat_id_str}_{timestamp_now_for_job_name}"
    notify_job_name = f"{base_job_name}_notification"
    quiz_start_job_name = f"{base_job_name}_start"

    # –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Å–∞–º–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    quiz_start_time = datetime.now() + timedelta(minutes=delay_minutes_actual)

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è job'–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å quiz10_command
    quiz_start_job_data = {
        "chat_id": chat_id,
        # "category_name": category_name_actual, # quiz10_command –æ–∂–∏–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ args –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä
        # "open_period": open_period_actual, # quiz10_command –æ–∂–∏–¥–∞–µ—Ç —ç—Ç–æ –≤ args
        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ context.args –¥–ª—è quiz10_command
        "args": [str(open_period_actual)] + ([category_name_actual] if category_name_actual else [])
    }


    # –ü–ª–∞–Ω–∏—Ä—É–µ–º job, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏—Ç —Å–∞–º—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É quiz10_command
    # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ `job.data['args']` –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç–æ–º –±—É–¥—É—Ç –≤ `context.args`
    # –õ–∏–±–æ –Ω—É–∂–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å quiz10_command, —á—Ç–æ–±—ã –æ–Ω–∞ –º–æ–≥–ª–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ job.data –Ω–∞–ø—Ä—è–º—É—é.
    # –ü—Ä–æ—â–µ –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ 'args' –≤ job.data, –∞ –≤ quiz10_command –¥–æ—Å—Ç–∞–≤–∞—Ç—å context.job.data['args'] –µ—Å–ª–∏ context.args –ø—É—Å—Ç
    # –≠—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:
    # if context.job and context.job.data and 'args' in context.job.data:
    #    context.args = context.job.data['args']
    # quiz10_command(update, context, initiated_by_notify=True)
    # ---
    # –ù–û! quiz10_command —É–∂–µ —É–º–µ–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä. –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ - —á–µ—Ä–µ–∑ args.
    # –ú—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–¥–∞—Ç—å –≤ data –¥–ª—è quiz10_command –≤—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ, –∏ –æ–Ω–∞ —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è.
    # –î–ª—è —ç—Ç–æ–≥–æ quiz10_command –¥–æ–ª–∂–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å context.job.data
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è quiz10_command, —Ç.–∫. –æ–Ω–∞ –µ–≥–æ –æ–∂–∏–¥–∞–µ—Ç
    # –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã quiz10_command –º–æ–≥–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å context.bot.send_message –∏ —Ç.–ø.
    # –í–∞–∂–Ω–æ: chat_id –±—É–¥–µ—Ç –≤–∑—è—Ç –∏–∑ job.data –≤ quiz10_command, –µ—Å–ª–∏ update.effective_chat –Ω–µ—Ç
    class MockUser: id = 0; name = "ScheduledTask" # —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    class MockChat: id = chat_id; type = update.effective_chat.type # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π chat_id
    class MockMessage: chat = MockChat(); from_user = MockUser() # —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # async def reply_text(self, text, **kwargs): await context.bot.send_message(self.chat.id, text, **kwargs)

    # –ó–∞–ø—É—Å–∫–∞–µ–º quiz10_command —á–µ—Ä–µ–∑ job_queue.run_once
    # –ï–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å category –∏ open_period. –û–Ω–∞ —Å–∞–º–∞ —Å–æ–∑–¥–∞—Å—Ç —Å–µ—Å—Å–∏—é.
    # –ú—ã –ø–µ—Ä–µ–¥–∞–µ–º chat_id, category, open_period –≤ quiz_start_job_data
    # –ê –≤ quiz10_command –º—ã –±—É–¥–µ–º –∏—Ö –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ context.job.data
    # quiz10_command –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ —Å initiated_by_notify=True
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è quiz10_command:
    # def quiz10_command(update, context, category=None, initiated_by_notify=False, open_period_override=None)
    # if initiated_by_notify and context.job and context.job.data:
    #    chat_id = context.job.data.get("chat_id")
    #    category_from_job = context.job.data.get("category_name_for_start")
    #    open_period_from_job = context.job.data.get("open_period_for_start")
    #    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    # –ò–Ω–∞—á–µ, –∫–∞–∫ –æ–±—ã—á–Ω–æ –∏–∑ update.message –∏ context.args
    
    # –î–ª—è _quiz10_notify_job (–∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –£–í–ï–î–û–ú–õ–ï–ù–ò–ï):
    notify_job_data = {
        "chat_id": chat_id,
        "category_name": category_name_actual or "–°–ª—É—á–∞–π–Ω–∞—è",
        "open_period": open_period_actual,
        "delay_minutes": delay_minutes_actual
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
    state.pending_scheduled_quizzes[chat_id_str] = {
        "notify_job_name": notify_job_name,
        "quiz_start_job_name": quiz_start_job_name,
        "start_timestamp": quiz_start_time.timestamp(),
        "category_name": category_name_actual or "–°–ª—É—á–∞–π–Ω–∞—è",
        "open_period": open_period_actual,
        "delay_minutes": delay_minutes_actual
    }

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ delay > 0)
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è, –∞ —á–µ—Ä–µ–∑ delay_minutes_actual –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è quiz10_command
    if delay_minutes_actual > 0:
        job_queue.run_once(
            _quiz10_notify_job,
            when=timedelta(minutes=0.01), # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—á—Ç–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            data=notify_job_data,
            name=notify_job_name
        )
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–∞–º—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —á–µ—Ä–µ–∑ delay_minutes_actual
        job_queue.run_once(
            lambda ctx: asyncio.create_task(quiz10_command(
                update=Update(0, message=None), # –ü—É—Å—Ç–æ–π update, —Ç.–∫. chat_id –±—É–¥–µ—Ç –∏–∑ job.data
                context=ctx,
                category=ctx.job.data.get("category_name_for_start"), # type: ignore
                initiated_by_notify=True
                # open_period –±—É–¥–µ—Ç –≤–∑—è—Ç –∏–∑ ctx.args, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–∏–∂–µ
            )),
            when=quiz_start_time, # –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
            data={ # –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ context.job.data –≤–Ω—É—Ç—Ä–∏ –ª—è–º–±–¥—ã –∏ quiz10_command
                "chat_id": chat_id,
                "category_name_for_start": category_name_actual, # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                "open_period_for_start": open_period_actual,
                 # –î–ª—è quiz10_command, —á—Ç–æ–±—ã –æ–Ω–∞ –≤–∑—è–ª–∞ open_period
                "args": [str(open_period_actual)] # –ö–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä–µ–¥–∞–µ–º —è–≤–Ω–æ
            },
            name=quiz_start_job_name
        )
        start_time_user_friendly = quiz_start_time.strftime("%H:%M:%S")
        category_display_user = f"–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name_actual}'" if category_name_actual else "—Å–ª—É—á–∞–π–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
        time_word_user = pluralize_points(delay_minutes_actual, "–º–∏–Ω—É—Ç—É", "–º–∏–Ω—É—Ç—ã", "–º–∏–Ω—É—Ç")

        await update.message.reply_text(
            f"‚úÖ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 –ø–æ {category_display_user} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–π—á–∞—Å, –∞ —Å–∞–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {delay_minutes_actual} {time_word_user} (–ø—Ä–∏–º–µ—Ä–Ω–æ –≤ {start_time_user_friendly} –ú–°–ö).\n"
            f"–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: {open_period_actual} —Å–µ–∫—É–Ω–¥.\n"
            f"–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz."
        )
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10notify –¥–ª—è {chat_id_str} –Ω–∞ {start_time_user_friendly} –ú–°–ö. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ~0 –º–∏–Ω, —Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ {delay_minutes_actual} –º–∏–Ω. –ö–∞—Ç: {category_name_actual or '–°–ª—É—á.'}, –≤—Ä–µ–º—è: {open_period_actual}—Å.")

    else: # –ï—Å–ª–∏ delay_minutes_actual == 0 (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ –ª–æ–≥–∏–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ val >=1, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
          # –∏–ª–∏ –µ—Å–ª–∏ –º—ã —Ä–µ—à–∏–º –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        state.pending_scheduled_quizzes.pop(chat_id_str, None) # –£–±–∏—Ä–∞–µ–º –∏–∑ pending, —Ç.–∫. —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å—Ä–∞–∑—É
        await update.message.reply_text("–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quiz10 –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞.")
        # await quiz10_command(update, context, category=category_name_actual) # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        return

