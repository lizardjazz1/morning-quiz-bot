# quiz_bot/handlers.py
import logging
from telegram import Update, Poll
from telegram.ext import ContextTypes
from data_manager import save_user_data
from quiz_logic import (
    broadcast_quiz_to_active_chats, 
    get_random_quiz_questions, 
    send_next_quiz10_question,
    send_single_quiz_poll # –î–ª—è /quiz
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id_str = str(update.message.chat_id)
    user_id_str = str(update.effective_user.id)
    user_name = update.effective_user.full_name

    user_scores = context.bot_data['user_scores']
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞
    if chat_id_str not in user_scores:
        user_scores[chat_id_str] = {}
    if user_id_str not in user_scores.get(chat_id_str, {}):
        user_scores[chat_id_str][user_id_str] = {"name": user_name, "score": 0}
        save_user_data(user_scores) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —É—Ç—Ä–µ–Ω–Ω—é—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–ø—Ä–æ—Å–∞!")
    logging.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id_str} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name} ({user_id_str})")

    # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    active_chats = context.bot_data.get("active_chats", set())
    active_chats.add(chat_id_str)
    context.bot_data["active_chats"] = active_chats
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ active_chats –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏

async def manual_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id_str = str(update.message.chat_id)

    if chat_id_str not in context.bot_data.get("active_chats", set()):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /start")
        return
    
    quiz_data = context.bot_data.get("quiz_data", {})
    if not quiz_data:
        await update.message.reply_text("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
        return

    import random # –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    categories = list(quiz_data.keys())
    if not categories:
        await update.message.reply_text("–í —Ñ–∞–π–ª–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return
    category = random.choice(categories)
    if not quiz_data[category]:
        await update.message.reply_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return
    question_data = random.choice(quiz_data[category])

    await update.message.reply_text("üß† –ó–∞–ø—É—Å–∫–∞—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤—Ä—É—á–Ω—É—é...")
    await send_single_quiz_poll(context, chat_id_str, question_data, is_quiz_session=False)


async def start_quiz10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id_str = str(update.message.chat_id)

    if chat_id_str not in context.bot_data.get("active_chats", set()):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /start")
        return

    quiz_data = context.bot_data.get("quiz_data", {})
    questions = get_random_quiz_questions(quiz_data, 10)
    if not questions:
        await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑ ‚Äî –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ üòï")
        return

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    context.bot_data['current_quiz_session'][chat_id_str] = {
        "questions": questions,
        "correct_answers": {}, # {user_id: {"name": name, "count": count}}
        "current_index": 0,
        "active": True
    }

    await update.message.reply_text("üìö –°–µ—Ä–∏—è –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å! üß†")
    await send_next_quiz10_question(chat_id_str, context)


async def handle_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.poll_answer
    poll_id = answer.poll_id
    user_id_str = str(answer.user.id)
    user_name = answer.user.full_name
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–ø—Ü–∏–∏ –µ—Å—Ç—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –±—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é
    if not answer.option_ids:
        logging.warning(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å {poll_id} –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –æ—Ç {user_name} ({user_id_str}).")
        return # –∏–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞

    selected_option_index = answer.option_ids[0]

    poll_info = context.bot_data['current_poll'].get(poll_id)
    if not poll_info:
        logging.warning(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ–ø—Ä–æ—Å {poll_id}.")
        return

    chat_id_str = poll_info["chat_id"]
    correct_option_index = poll_info["correct_index"]
    is_quiz_session = poll_info.get("quiz_session", False)

    # –£–±–∏—Ä–∞–µ–º –æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
    # (—Ö–æ—Ç—è Telegram –æ–±—ã—á–Ω–æ –Ω–µ —à–ª–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ poll_answer –¥–ª—è –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–∞ –æ–¥–∏–Ω poll)
    # –ù–æ –µ—Å–ª–∏ –æ–ø—Ä–æ—Å –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ–Ω –º–æ–∂–µ—Ç –µ—â–µ –±—ã—Ç—å –≤ current_poll
    # del context.bot_data['current_poll'][poll_id] # –î–µ–ª–∞—Ç—å —ç—Ç–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, —Ç.–∫. –¥—Ä—É–≥–∏–µ —é–∑–µ—Ä—ã –º–æ–≥—É—Ç –µ—â–µ –æ—Ç–≤–µ—á–∞—Ç—å

    user_scores = context.bot_data['user_scores']
    chat_scores = user_scores.setdefault(chat_id_str, {})
    
    is_correct = (selected_option_index == correct_option_index)

    if is_correct:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–Ω–µ —Å–µ—Å—Å–∏–∏)
        if not is_quiz_session:
            user_data = chat_scores.setdefault(user_id_str, {"name": user_name, "score": 0})
            user_data["name"] = user_name # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            user_data["score"] += 1
            await context.bot.send_message(chat_id=chat_id_str, text=f"{user_name}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ! üëè –í–∞—à –æ–±—â–∏–π —Å—á–µ—Ç: {user_data['score']}.")
            save_user_data(user_scores) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        else: # –î–ª—è —Å–µ—Å—Å–∏–∏ quiz10 —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
             await context.bot.send_message(chat_id=chat_id_str, text=f"{user_name}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ")


    # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ quiz10
    if is_quiz_session and chat_id_str in context.bot_data['current_quiz_session']:
        session = context.bot_data['current_quiz_session'][chat_id_str]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
        session_user_answers = session["correct_answers"].setdefault(user_id_str, {"name": user_name, "count": 0})
        session_user_answers["name"] = user_name # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
        if is_correct:
            session_user_answers["count"] += 1
        
        # –ï—Å–ª–∏ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –±—ã–ª –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–∂–∏–¥–∞–µ–º—ã–π –≤–æ–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –æ—Ç *—ç—Ç–æ–≥–æ* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –í–∞–∂–Ω–æ: —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è quiz10 –æ—Ç—Å—ã–ª–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ *–ø–µ—Ä–≤–æ–≥–æ* –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏
        # –≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ: send_next_quiz_question –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É.
        # –ß—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –º–Ω–æ–≥–æ —Ä–∞–∑, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —é–∑–µ—Ä–æ–≤ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π,
        # current_poll[poll_id] —É–¥–∞–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∏ send_next_quiz10_question
        # –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
        # –ü–æ—ç—Ç–æ–º—É, —É–¥–∞–ª—è–µ–º poll_id –∏–∑ current_poll –∑–¥–µ—Å—å, –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–∞ —ç—Ç–æ—Ç poll.
        if poll_id in context.bot_data['current_poll']:
            del context.bot_data['current_poll'][poll_id]
            await send_next_quiz10_question(chat_id_str, context)
    elif not is_quiz_session: # –û–¥–∏–Ω–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–µ –∏–∑ —Å–µ—Ä–∏–∏
        if poll_id in context.bot_data['current_poll']:
             del context.bot_data['current_poll'][poll_id] # –£–¥–∞–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω


async def rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id_str = str(update.message.chat_id)
    scores_for_chat = context.bot_data['user_scores'].get(chat_id_str, {})

    if not scores_for_chat:
        await update.message.reply_text("–ù–∏–∫—Ç–æ –µ—â—ë –Ω–µ –æ—Ç–≤–µ—á–∞–ª –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return

    sorted_scores = sorted(scores_for_chat.items(), key=lambda x: x[1]['score'], reverse=True)
    rating_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (–æ–±—â–∏–π –∑–∞—á–µ—Ç):\n\n"
    for idx, (uid, data) in enumerate(sorted_scores, 1):
        rating_text += f"{idx}. {data['name']} ‚Äî {data['score']} –æ—á–∫–æ–≤\n"

    await update.message.reply_text(rating_text)

