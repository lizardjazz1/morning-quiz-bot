# poll_answer_handler.py
from telegram import Update, PollAnswer, User as TelegramUser
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from config import logger
import state # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ current_poll, user_scores, current_quiz_session
from data_manager import save_user_data # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# send_next_question_in_session –ò send_solution_if_available –ò–ó quiz_logic
from quiz_logic import send_next_question_in_session, send_solution_if_available, show_quiz_session_results 
from utils import pluralize_points # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–æ—á–∫–∏"

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
MOTIVATIONAL_MESSAGES = {
    -1000: "üíÄ –î–∞ —Ç—ã –±–ª–∏–Ω –∏–∑–¥–µ–≤–∞–µ—à—å—Å—è, —Ç–∞–∫–æ–µ –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–æ–±—â–µ! –ü–æ–ø—Ä–æ–±—É–π –Ω–µ –≤—ã—Ç–≤–æ—Ä—è—Ç—å –±–æ–ª—å—à–µ!",
    -500: "üòµ –ù—É –∏ –Ω—É–±, –ø—Ä—è–º —Å –ø–æ—Ä–æ–≥–∞ –ø–∞–¥–∞–µ—Ç... –ü–æ–ø—Ä–∞–≤—å—Å—è —É–∂–µ!",
    -200: "ü§¶‚Äç‚ôÇÔ∏è –û–ø—è—Ç—å –ø—Ä–æ–º–∞—Ö? –ö–∞–∂–µ—Ç—Å—è, —Ç–µ–±–µ –ø–æ—Ä–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.",
    -50: "üôÉ –ù—É –Ω–∏—á–µ–≥–æ, –¥–∞–∂–µ —É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –±—ã–≤–∞—é—Ç –ø–ª–æ—Ö–∏–µ –¥–Ω–∏... –ø—Ä–∞–≤–¥–∞?",
    10: "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–µ—Ä–≤—ã–º–∏ 10 –æ—á–∫–∞–º–∏! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
    25: "üåü 25 –æ—á–∫–æ–≤! –¢—ã —É–∂–µ –æ–ø—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫!",
    50: "üî• 50 –æ—á–∫–æ–≤! –¢—ã –ø—Ä–æ—Å—Ç–æ –æ–≥–æ–Ω—å! üî•",
    100: "üëë 100 –æ—á–∫–æ–≤! –ú–æ—è —Ç—ã –ª–∞–ø–æ—á–∫–∞, —É–º–Ω–µ–Ω—å–∫–æ—Å—Ç—å - —ç—Ç–æ –ø—Ä–æ —Ç–µ–±—è!",
    200: "üöÄ 200 –æ—á–∫–æ–≤! –¢—ã –≤–∑–ª–µ—Ç–∞–µ—à—å –∫ –≤–µ—Ä—à–∏–Ω–∞–º –∑–Ω–∞–Ω–∏–π!",
    300: "üíé 300 –æ—á–∫–æ–≤! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–ª–º–∞–∑ –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!",
    500: "üèÜ 500 –æ—á–∫–æ–≤! –ù–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω!",
    750: "üåà 750 –æ—á–∫–æ–≤! –î–∞–ª –¥–∞–ª —É—à—ë–ª!",
    1000: "‚ú® 1000 –æ—á–∫–æ–≤! –¢—ã –ª–µ–≥–µ–Ω–¥–∞!",
    1500: "üî• 1500 –æ—á–∫–æ–≤! –û–≥–æ–Ω—å –Ω–µ–∏—Å—Ç–æ—â–∏–º–æ–π —ç–Ω–µ—Ä–≥–∏–∏!",
    2000: "üöÄ 2000 –æ—á–∫–æ–≤! –°–≤–µ—Ä—Ö–∑–≤–µ–∑–¥–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!",
    3000: "üëë 3000 –æ—á–∫–æ–≤! –¶–∞—Ä—å –∏ –±–æ–≥ –∑–Ω–∞–Ω–∏–π!",
    5000: "üí• 5000 –æ—á–∫–æ–≤! –≠-—ç-—ç—Ç–æ —Ç—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å–µ–ª–µ–Ω–Ω–æ–π?!",
}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å—ã ---
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–ø—Ä–æ—Å—ã (Poll).
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ bot.py.

async def handle_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.poll_answer: # type: ignore
        logger.debug("handle_poll_answer: update.poll_answer is None, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
        return

    poll_answer: PollAnswer = update.poll_answer
    user: TelegramUser = poll_answer.user

    answered_poll_id: str = poll_answer.poll_id
    user_id_str = str(user.id)
    user_full_name = user.full_name

    poll_info_from_state = state.current_poll.get(answered_poll_id)

    if not poll_info_from_state:
        logger.debug(
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è poll_id {answered_poll_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ state.current_poll. "
            f"–û—Ç–≤–µ—Ç –æ—Ç {user_full_name} ({user_id_str}) –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω."
        )
        return

    chat_id_str = poll_info_from_state["chat_id"]
    question_details = poll_info_from_state.get("question_details") # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–æ–ø—Ä–æ—Å–∞, –≤–∫–ª—é—á–∞—è –≤–æ–∑–º–æ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    # –ò–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ —ç—Ç–æ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å)
    question_session_idx = poll_info_from_state.get("question_session_index", -1)


    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ user_scores
    state.user_scores.setdefault(chat_id_str, {}).setdefault(user_id_str, {"name": user_full_name, "score": 0, "answered_polls": set(), "milestones_achieved": set()})
    global_user_data = state.user_scores[chat_id_str][user_id_str]
    global_user_data["name"] = user_full_name # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –Ω–∞ —Å–ª—É—á–∞–π —Å–º–µ–Ω—ã

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ answered_polls –∏ milestones_achieved —è–≤–ª—è—é—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏
    if not isinstance(global_user_data.get("answered_polls"), set):
        current_answered = global_user_data.get("answered_polls", [])
        global_user_data["answered_polls"] = set(current_answered)
    if not isinstance(global_user_data.get("milestones_achieved"), set):
        milestones = global_user_data.get("milestones_achieved", [])
        global_user_data["milestones_achieved"] = set(milestones)

    is_answer_correct = (len(poll_answer.option_ids) == 1 and poll_answer.option_ids[0] == poll_info_from_state["correct_index"])

    score_change_message = ""
    score_updated_this_time = False
    previous_score = global_user_data["score"] # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    if answered_poll_id not in global_user_data["answered_polls"]:
        if is_answer_correct:
            global_user_data["score"] += 1
            score_change_message = "+1 –æ—á–∫–æ"
        else:
            global_user_data["score"] -= 1 # –û—Ç–Ω–∏–º–∞–µ–º –æ—á–∫–æ –∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
            score_change_message = "-1 –æ—á–∫–æ"

        global_user_data["answered_polls"].add(answered_poll_id)
        save_user_data() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞
        score_updated_this_time = True
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_full_name} ({user_id_str}) –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ poll {answered_poll_id} "
            f"{'–ø—Ä–∞–≤–∏–ª—å–Ω–æ' if is_answer_correct else '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'} –≤ —á–∞—Ç–µ {chat_id_str}. "
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞: {score_change_message}. –û–±—â–∏–π —Å—á–µ—Ç: {global_user_data['score']}."
        )

        # --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô ---
        current_score = global_user_data["score"]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥–∏, —á—Ç–æ–±—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –Ω–∏–º –≤ —Å—Ç—Ä–æ–≥–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ –∫ –Ω–∞–∏–±–æ–ª—å—à–µ–º—É)
        sorted_thresholds = sorted(MOTIVATIONAL_MESSAGES.keys())

        for threshold in sorted_thresholds:
            message = MOTIVATIONAL_MESSAGES[threshold]
            
            # –ï—Å–ª–∏ —ç—Ç–æ—Ç –ø–æ—Ä–æ–≥ —É–∂–µ –±—ã–ª –¥–æ—Å—Ç–∏–≥–Ω—É—Ç/–ø—Ä–æ–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            if threshold in global_user_data["milestones_achieved"]:
                continue

            send_message = False

            if threshold > 0: # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ (10, 25, 50, ...)
                if previous_score < threshold <= current_score:
                    send_message = True
            elif threshold < 0: # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ (-50, -200, -500, ...)
                if previous_score > threshold >= current_score:
                    send_message = True

            if send_message:
                try:
                    await context.bot.send_message(chat_id=chat_id_str, text=f"{user.first_name}, {message}")
                    global_user_data["milestones_achieved"].add(threshold)
                    save_user_data() 
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {threshold} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
        # --- –ö–û–ù–ï–¶ –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò ---

    else:
        logger.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_full_name} ({user_id_str}) —É–∂–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ poll {answered_poll_id}. –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –Ω–µ –∏–∑–º–µ–Ω–µ–Ω —ç—Ç–∏–º –æ—Ç–≤–µ—Ç–æ–º."
        )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–≤–∏–∑–∞ (/quiz)
    is_quiz_session_poll = poll_info_from_state.get("quiz_session", False)
    if not is_quiz_session_poll and score_updated_this_time: # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π –∫–≤–∏–∑ –∏ —Å—á–µ—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω
        try:
            reply_text_parts = []
            user_name_display = user.first_name # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏

            if is_answer_correct:
                reply_text_parts.append(f"{user_name_display}, –≤–µ—Ä–Ω–æ! ‚úÖ")
            else:
                # question_details —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã –≤—ã—à–µ
                correct_option_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                if question_details and "options" in question_details and "correct_option_index" in question_details:
                     correct_original_idx = question_details["correct_option_index"]
                     if 0 <= correct_original_idx < len(question_details["options"]):
                         correct_option_text = question_details["options"][correct_original_idx]
                reply_text_parts.append(f"{user_name_display}, –Ω–µ–≤–µ—Ä–Ω–æ. ‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option_text}")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å (–î–õ–Ø –û–î–ò–ù–û–ß–ù–û–ì–û –ö–í–ò–ó–ê)
            if question_details and question_details.get("solution"):
                reply_text_parts.append(f"üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {question_details['solution']}")

            reply_text_parts.append(f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ: {pluralize_points(global_user_data['score'])}.")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç, –≥–¥–µ –±—ã–ª –æ–ø—Ä–æ—Å
            await context.bot.send_message(chat_id=chat_id_str, text="\n".join(reply_text_parts))
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º/–ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str} –≤ —á–∞—Ç {chat_id_str} –ø–æ—Å–ª–µ /quiz: {e}", exc_info=True)

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–µ—Å—Å–∏–π /quiz10
    if is_quiz_session_poll:
        session_chat_id = poll_info_from_state.get("associated_quiz_session_chat_id")
        if not session_chat_id: # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –¥–ª—è —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
            logger.error(f"Poll {answered_poll_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ quiz_session, –Ω–æ associated_quiz_session_chat_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        active_session = state.current_quiz_session.get(session_chat_id)
        if active_session:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            session_user_scores_data = active_session["session_scores"].setdefault(
                user_id_str,
                {"name": user_full_name, "score": 0, "answered_this_session_polls": set()}
            )
            session_user_scores_data["name"] = user_full_name # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è

            if not isinstance(session_user_scores_data.get("answered_this_session_polls"), set):
                 session_user_scores_data["answered_this_session_polls"] = set(session_user_scores_data.get("answered_this_session_polls", []))

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ –≠–¢–û–¢ –æ–ø—Ä–æ—Å –≤ —Ä–∞–º–∫–∞—Ö –≠–¢–û–ô —Å–µ—Å—Å–∏–∏
            if answered_poll_id not in session_user_scores_data["answered_this_session_polls"]:
                session_score_change_log = ""
                if is_answer_correct:
                    session_user_scores_data["score"] += 1
                    session_score_change_log = "+1"
                else:
                    session_user_scores_data["score"] -= 1 # –¢–∞–∫–∂–µ -1 –≤ —Å–µ—Å—Å–∏–∏
                    session_score_change_log = "-1"
                session_user_scores_data["answered_this_session_polls"].add(answered_poll_id)
                logger.info(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_full_name} ({user_id_str}) –ø–æ–ª—É—á–∏–ª "
                    f"{session_score_change_log} –æ—á–∫–æ –≤ —Å–µ—Å—Å–∏–∏ {session_chat_id} "
                    f"–∑–∞ poll {answered_poll_id} (–≤–æ–ø—Ä–æ—Å {question_session_idx + 1}). –°–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç: {session_user_scores_data['score']}."
                )

            # –õ–æ–≥–∏–∫–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ /quiz10
            # poll_info_from_state["next_q_triggered_by_answer"] –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            if not poll_info_from_state.get("is_last_question") and \
               not poll_info_from_state.get("next_q_triggered_by_answer"):

                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à–µ–ª –Ω–∞ —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏
                if active_session.get("current_poll_id") == answered_poll_id:
                    poll_info_from_state["next_q_triggered_by_answer"] = True # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —ç—Ç–∏–º –æ—Ç–≤–µ—Ç–æ–º
                    
                    logger.info(
                        f"–î–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ poll {answered_poll_id} (–≤–æ–ø—Ä–æ—Å {question_session_idx + 1}) –≤ —Å–µ—Å—Å–∏–∏ {session_chat_id}. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å."
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É (–∑–∞–≤–µ—Ä—à–∞—é—â–µ–º—É—Å—è) –≤–æ–ø—Ä–æ—Å—É –ü–ï–†–ï–î –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                    # question_details –∏–∑ poll_info_from_state, question_session_idx —Ç–æ–∂–µ –æ—Ç—Ç—É–¥–∞
                    if question_details:
                        await send_solution_if_available(context, session_chat_id, question_details, question_session_idx)

                    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π job –Ω–∞ —Ç–∞–π–º–∞—É—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    if job := active_session.get("next_question_job"):
                        try:
                            job.schedule_removal()
                            logger.debug(f"Job {job.name} –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ poll {answered_poll_id}.")
                        except Exception: pass # –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω
                        active_session["next_question_job"] = None # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ job

                    # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –æ–ø—Ä–æ—Å–µ –∏–∑ state.current_poll, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                    # –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ, —á—Ç–æ–±—ã handle_current_poll_end –Ω–µ –ø—ã—Ç–∞–ª—Å—è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–Ω–æ–≤–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É.
                    state.current_poll.pop(answered_poll_id, None)
                    logger.debug(f"Poll {answered_poll_id} (–≤–æ–ø—Ä–æ—Å {question_session_idx + 1}) —É–¥–∞–ª–µ–Ω –∏–∑ state.current_poll (–¥–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç).")

                    await send_next_question_in_session(context, session_chat_id)
                else:
                    logger.debug(
                        f"–û—Ç–≤–µ—Ç –Ω–∞ poll {answered_poll_id} –≤ —Å–µ—Å—Å–∏–∏ {session_chat_id} –ø–æ–ª—É—á–µ–Ω, "
                        f"–Ω–æ —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π poll —Å–µ—Å—Å–∏–∏ —É–∂–µ {active_session.get('current_poll_id')} (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–≤–µ—Ç –∑–∞–ø–æ–∑–¥–∞–ª –∏–ª–∏ –Ω–∞ —Å—Ç–∞—Ä—ã–π poll). "
                        "–î–æ—Å—Ä–æ—á–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —ç—Ç–∏–º –æ—Ç–≤–µ—Ç–æ–º."
                    )
            elif poll_info_from_state.get("is_last_question") and not poll_info_from_state.get("next_q_triggered_by_answer"):
                 # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, –∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à–µ–ª
                 if active_session.get("current_poll_id") == answered_poll_id:
                    poll_info_from_state["next_q_triggered_by_answer"] = True # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                    logger.info(f"–î–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π poll {answered_poll_id} (–≤–æ–ø—Ä–æ—Å {question_session_idx + 1}) –≤ —Å–µ—Å—Å–∏–∏ {session_chat_id}.")
                    if question_details:
                        await send_solution_if_available(context, session_chat_id, question_details, question_session_idx)
                    
                    if job := active_session.get("next_question_job"): # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                        try: job.schedule_removal()
                        except: pass
                        active_session["next_question_job"] = None
                    
                    state.current_poll.pop(answered_poll_id, None) # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                    logger.debug(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π poll {answered_poll_id} —É–¥–∞–ª–µ–Ω –∏–∑ state.current_poll (–¥–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç).")
                    
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    await show_quiz_session_results(context, session_chat_id)


        else: # active_session –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            logger.warning(
                f"–°–µ—Å—Å–∏—è –¥–ª—è —á–∞—Ç–∞ {session_chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ state.current_quiz_session, "
                f"—Ö–æ—Ç—è poll {answered_poll_id} —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–µ. –û—Ç–≤–µ—Ç –æ—Ç {user_full_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞."
            )
