# handlers/quiz_single_handler.py
import random
from datetime import timedelta
from telegram import Update, Poll
from telegram.ext import ContextTypes

from config import logger, DEFAULT_POLL_OPEN_PERIOD, JOB_GRACE_PERIOD
import state
from quiz_logic import (get_random_questions, prepare_poll_options,
                        handle_single_quiz_poll_end)

async def quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat:
        logger.warning("quiz_command: message or effective_chat is None.")
        return

    chat_id = update.effective_chat.id
    chat_id_str = str(chat_id)
    reply_text_to_send = ""

    if state.current_quiz_session.get(chat_id_str):
        reply_text_to_send = "–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞ /quiz10. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz."
        logger.debug(f"Attempting to send message to {chat_id_str} (quiz_command blocked by /quiz10). Text: '{reply_text_to_send}'")
        await update.message.reply_text(reply_text_to_send)
        return
    if state.pending_scheduled_quizzes.get(chat_id_str):
        reply_text_to_send = f"–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∏–≥—Ä–∞ /quiz10notify. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz."
        logger.debug(f"Attempting to send message to {chat_id_str} (quiz_command blocked by /quiz10notify). Text: '{reply_text_to_send}'")
        await update.message.reply_text(reply_text_to_send)
        return

    category_arg = " ".join(context.args) if context.args else None
    question_details_list = []
    message_prefix = ""

    if not state.quiz_data:
        reply_text_to_send = "–í–æ–ø—Ä–æ—Å—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ."
        logger.debug(f"Attempting to send message to {chat_id_str} (quiz_command, no questions loaded). Text: '{reply_text_to_send}'")
        await update.message.reply_text(reply_text_to_send)
        return

    if not category_arg:
        available_categories = [cat_name for cat_name, q_list in state.quiz_data.items() if isinstance(q_list, list) and q_list]
        if not available_categories:
            reply_text_to_send = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏."
            logger.debug(f"Attempting to send message to {chat_id_str} (quiz_command, no categories with questions). Text: '{reply_text_to_send}'")
            await update.message.reply_text(reply_text_to_send)
            return
        chosen_category = random.choice(available_categories)
        question_details_list = get_random_questions(chosen_category, 1)
        message_prefix = f"–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {chosen_category}\n"
    else:
        question_details_list = get_random_questions(category_arg, 1)

    if not question_details_list:
        reply_text_to_send = f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_arg if category_arg else '—Å–ª—É—á–∞–π–Ω–æ–π'}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: /categories"
        logger.debug(f"Attempting to send message to {chat_id_str} (quiz_command, no questions in category). Text: '{reply_text_to_send}'")
        await update.message.reply_text(reply_text_to_send)
        return

    single_question_details = question_details_list[0]
    poll_question_header = f"{message_prefix}{single_question_details['question']}"
    MAX_POLL_QUESTION_LENGTH = 255
    if len(poll_question_header) > MAX_POLL_QUESTION_LENGTH:
        truncate_at = MAX_POLL_QUESTION_LENGTH - 3
        poll_question_header = poll_question_header[:truncate_at] + "..."
        logger.warning(f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è /quiz –≤ —á–∞—Ç–µ {chat_id_str} –±—ã–ª —É—Å–µ—á–µ–Ω.")

    _, poll_options, poll_correct_option_id, _ = prepare_poll_options(single_question_details)

    logger.debug(f"Attempting to send /quiz poll to {chat_id_str}. Question header: '{poll_question_header[:100]}...'")
    try:
        sent_poll_msg = await context.bot.send_poll(
            chat_id=chat_id,
            question=poll_question_header,
            options=poll_options,
            type=Poll.QUIZ,
            correct_option_id=poll_correct_option_id,
            open_period=DEFAULT_POLL_OPEN_PERIOD,
            is_anonymous=False
        )
        poll_state_entry = {
            "chat_id": chat_id_str,
            "message_id": sent_poll_msg.message_id,
            "correct_index": poll_correct_option_id,
            "quiz_session": False,
            "daily_quiz": False,
            "question_details": single_question_details,
            "associated_quiz_session_chat_id": None,
            "next_q_triggered_by_answer": False, # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è /quiz, –Ω–æ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            "solution_placeholder_message_id": None, # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            "processed_by_early_answer": False, # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è /quiz
            "solution_job": None # –ë—É–¥–µ—Ç solution_timeout_job
        }
        state.current_poll[sent_poll_msg.poll.id] = poll_state_entry

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–ª—É—à–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–µ
        if single_question_details.get("solution"):
            try:
                placeholder_msg = await context.bot.send_message(chat_id=chat_id_str, text="üí°")
                state.current_poll[sent_poll_msg.poll.id]["solution_placeholder_message_id"] = placeholder_msg.message_id
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ 'üí°' –¥–ª—è /quiz poll {sent_poll_msg.poll.id} –≤ —á–∞—Ç–µ {chat_id_str}.")
            except Exception as e_sol_pl:
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≥–ª—É—à–∫—É 'üí°' –¥–ª—è /quiz poll {sent_poll_msg.poll.id} –≤ —á–∞—Ç–µ {chat_id_str}: {e_sol_pl}")


        # Job –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if context.job_queue: # –ù–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–µ, job –Ω—É–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ state.current_poll
            job_delay_seconds = DEFAULT_POLL_OPEN_PERIOD + JOB_GRACE_PERIOD
            job_name = f"single_quiz_timeout_chat_{chat_id_str}_poll_{sent_poll_msg.poll.id}"

            existing_jobs = context.job_queue.get_jobs_by_name(job_name)
            for old_job in existing_jobs:
                old_job.schedule_removal()
                logger.debug(f"Removed old job '{old_job.name}' for single quiz timeout.")

            timeout_job = context.job_queue.run_once(
                handle_single_quiz_poll_end,
                timedelta(seconds=job_delay_seconds),
                data={"chat_id_str": chat_id_str, "poll_id": sent_poll_msg.poll.id},
                name=job_name
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ job –≤ poll_state_entry (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã, —Ö–æ—Ç—è —Ç—É—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
            state.current_poll[sent_poll_msg.poll.id]["solution_job"] = timeout_job # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω job '{job_name}' –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ poll {sent_poll_msg.poll.id} (–æ–¥–∏–Ω–æ—á–Ω—ã–π –∫–≤–∏–∑ /quiz).")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞ –¥–ª—è /quiz –≤ —á–∞—Ç–µ {chat_id_str}: {e}", exc_info=True)
        error_reply_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        logger.debug(f"Attempting to send error message for /quiz to {chat_id_str}. Text: '{error_reply_text}'")
        await update.message.reply_text(error_reply_text)

