#handlers/quiz_manager.py
from __future__ import annotations
import asyncio
import logging
from typing import List, Optional, Union, Dict, Any
from datetime import timedelta
import datetime as dt 
import pytz 

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, User as TelegramUser, Message, CallbackQuery
)
from telegram.ext import Application, ContextTypes, CommandHandler, ConversationHandler, CallbackQueryHandler, MessageHandler, filters
from telegram.constants import ParseMode
from telegram.error import BadRequest

from app_config import AppConfig
from state import BotState, QuizState 
from data_manager import DataManager
from modules.category_manager import CategoryManager
from modules.score_manager import ScoreManager
from modules.quiz_engine import QuizEngine
from utils import get_current_utc_time, schedule_job_unique, escape_markdown_v2, is_user_admin_in_update

logger = logging.getLogger(__name__)

(CFG_QUIZ_OPTIONS, CFG_QUIZ_NUM_QS) = map(str, range(2))

CB_QCFG_ = "qcfg_"
CB_QCFG_NUM_MENU = f"{CB_QCFG_}num_menu"
CB_QCFG_NUM_VAL = f"{CB_QCFG_}num_val"
CB_QCFG_CAT_MENU = f"{CB_QCFG_}cat_menu"
CB_QCFG_CAT_VAL = f"{CB_QCFG_}cat_val"
CB_QCFG_ANNOUNCE = f"{CB_QCFG_}announce"
CB_QCFG_START = f"{CB_QCFG_}start"
CB_QCFG_CANCEL = f"{CB_QCFG_}cancel"
CB_QCFG_BACK = f"{CB_QCFG_}back_to_main_opts"
CB_QCFG_NOOP = f"{CB_QCFG_}noop"

DELAY_BEFORE_SESSION_MESSAGES_DELETION_SECONDS = 300  
DELAY_BEFORE_POLL_SOLUTION_DELETION_SECONDS = 120 

class QuizManager:
    def __init__(
        self, app_config: AppConfig, state: BotState, category_manager: CategoryManager,
        score_manager: ScoreManager, data_manager: DataManager, application: Application
    ):
        self.app_config = app_config
        self.state = state
        self.category_manager = category_manager
        self.score_manager = score_manager
        self.data_manager = data_manager
        self.application = application
        self.quiz_engine = QuizEngine(state=self.state, app_config=self.app_config, data_manager=self.data_manager)
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        logger.debug(f"QuizManager initialized. Command for quiz: '/{self.app_config.commands.quiz}'")

    def _get_effective_quiz_params(self, chat_id: int, num_questions_override: Optional[int] = None) -> Dict[str, Any]:
        chat_s = self.data_manager.get_chat_settings(chat_id)
        default_chat_settings_global = self.app_config.default_chat_settings
        num_q: int
        if num_questions_override is not None:
            num_q = max(1, min(num_questions_override, self.app_config.max_questions_per_session))
        else:
            num_q = chat_s.get("default_num_questions", default_chat_settings_global.get("default_num_questions", 10))

        if num_q == 1:
            quiz_type_key_for_params_lookup = "single"
        else:
            quiz_type_key_for_params_lookup = chat_s.get("default_quiz_type")
            if not quiz_type_key_for_params_lookup:
                 quiz_type_key_for_params_lookup = default_chat_settings_global.get("default_quiz_type", "session")

        type_cfg_for_params = self.app_config.quiz_types_config.get(quiz_type_key_for_params_lookup, {})

        return {
            "quiz_type_key": quiz_type_key_for_params_lookup,
            "quiz_mode": type_cfg_for_params.get("mode", "single_question" if num_q == 1 else "serial_immediate"),
            "num_questions": num_q,
            "open_period_seconds": chat_s.get("default_open_period_seconds", type_cfg_for_params.get("default_open_period_seconds", default_chat_settings_global.get("default_open_period_seconds",30))),
            "announce_quiz": chat_s.get("default_announce_quiz", type_cfg_for_params.get("announce", default_chat_settings_global.get("default_announce_quiz", False))),
            "announce_delay_seconds": chat_s.get("default_announce_delay_seconds", type_cfg_for_params.get("announce_delay_seconds", default_chat_settings_global.get("default_announce_delay_seconds", 5))),
            "interval_seconds": type_cfg_for_params.get("default_interval_seconds"),
            "enabled_categories_chat": chat_s.get("enabled_categories"),
            "disabled_categories_chat": chat_s.get("disabled_categories", []),
        }

    async def _initiate_quiz_session(
        self, context: ContextTypes.DEFAULT_TYPE, chat_id: int, initiated_by_user: Optional[TelegramUser],
        quiz_type: str, quiz_mode: str, num_questions: int, open_period_seconds: int,
        announce: bool, announce_delay_seconds: int,
        category_names_for_quiz: Optional[List[str]] = None,
        is_random_categories_mode: bool = False,
        interval_seconds: Optional[int] = None,
        original_command_message_id: Optional[int] = None,
        interactive_start_message_id: Optional[int] = None
    ):
        logger.info(f"–ù–ê–ß–ê–õ–û _initiate_quiz_session: –ß–∞—Ç {chat_id}, –¢–∏–ø: {quiz_type}, –†–µ–∂–∏–º: {quiz_mode}, NQ: {num_questions}")

        active_quiz = self.state.get_active_quiz(chat_id)
        if active_quiz and not active_quiz.is_stopping:
            logger.warning(f"_initiate_quiz_session: –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —á–∞—Ç–µ {chat_id}.")
            if initiated_by_user:
                 await context.bot.send_message(chat_id, escape_markdown_v2(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∏–¥–µ—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—É—â—É—é (`/{self.app_config.commands.stop_quiz}`)."), parse_mode=ParseMode.MARKDOWN_V2)
            return

        cat_mode_for_get_questions: str
        if is_random_categories_mode:
            cat_mode_for_get_questions = "random_from_pool"
        elif category_names_for_quiz:
            cat_mode_for_get_questions = "specific_only"
        else:
            cat_mode_for_get_questions = "random_from_pool"

        logger.debug(f"_initiate_quiz_session: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤. –†–µ–∂–∏–º –¥–ª—è get_questions: {cat_mode_for_get_questions}, –ò—Å—Ö–æ–¥–Ω—ã–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_names_for_quiz}")
        questions_for_session = self.category_manager.get_questions(
            num_questions_needed=num_questions,
            chat_id=chat_id,
            allowed_specific_categories=category_names_for_quiz if cat_mode_for_get_questions == "specific_only" else None,
            mode=cat_mode_for_get_questions
        )
        logger.debug(f"_initiate_quiz_session: –ü–æ–ª—É—á–µ–Ω–æ {len(questions_for_session)} –≤–æ–ø—Ä–æ—Å–æ–≤.")

        actual_num_questions_obtained = len(questions_for_session)
        if actual_num_questions_obtained == 0:
            msg_no_q = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.warning(f"_initiate_quiz_session: {msg_no_q} (–ß–∞—Ç: {chat_id}, NQ: {num_questions}, –†–µ–∂–∏–º –∫–∞—Ç: {cat_mode_for_get_questions}, –°–ø–∏—Å–æ–∫ –∫–∞—Ç: {category_names_for_quiz})")
            if initiated_by_user:
                await context.bot.send_message(chat_id, escape_markdown_v2(msg_no_q), parse_mode=ParseMode.MARKDOWN_V2)
            if interactive_start_message_id:
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=interactive_start_message_id)
                    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ ({interactive_start_message_id}) —É–¥–∞–ª–µ–Ω–æ, —Ç.–∫. –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞.")
                except Exception as e_del_launch_msg_fail:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ ({interactive_start_message_id}) –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e_del_launch_msg_fail}")
            return

        if actual_num_questions_obtained < num_questions:
            logger.info(f"_initiate_quiz_session: –ó–∞–ø—Ä–æ—à–µ–Ω–æ {num_questions}, –¥–æ—Å—Ç—É–ø–Ω–æ {actual_num_questions_obtained}. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –±—É–¥–µ—Ç —Å {actual_num_questions_obtained} –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ß–∞—Ç: {chat_id}")
            num_questions = actual_num_questions_obtained

        user_id_int_for_state: Optional[int] = int(initiated_by_user.id) if initiated_by_user else None
        current_quiz_state_instance = QuizState(
            chat_id=chat_id, quiz_type=quiz_type, quiz_mode=quiz_mode,
            questions=questions_for_session, num_questions_to_ask=num_questions,
            open_period_seconds=open_period_seconds, created_by_user_id=user_id_int_for_state,
            original_command_message_id=original_command_message_id,
            interval_seconds=interval_seconds, quiz_start_time=get_current_utc_time()
        )

        if interactive_start_message_id:
            current_quiz_state_instance.message_ids_to_delete.add(interactive_start_message_id)
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–∞ ({interactive_start_message_id}) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (—Å–ª—É–∂–µ–±–Ω—ã–µ).")

        if announce:
            announce_text_parts = []
            if quiz_type == "daily":
                greeting = ""
                try:
                    current_time_msk = dt.datetime.now(self.moscow_tz)
                    current_hour_msk = current_time_msk.hour

                    if 5 <= current_hour_msk <= 11: greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ‚òÄÔ∏è"
                    elif 12 <= current_hour_msk <= 16: greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—åüåû"
                    elif 17 <= current_hour_msk <= 22: greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Äüåô"
                    else: greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏‚ú®"
                    announce_text_parts.append(escape_markdown_v2(f"{greeting}!"))
                except Exception as e_greeting:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e_greeting}")
                    announce_text_parts.append(escape_markdown_v2("–ü—Ä–∏–≤–µ—Ç!"))

                announce_text_parts.append(escape_markdown_v2("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞."))
                used_categories_set = {q_data.get('current_category_name_for_quiz', q_data.get('original_category')) for q_data in questions_for_session if q_data.get('current_category_name_for_quiz') or q_data.get('original_category')}
                if used_categories_set:
                    announce_text_parts.append(escape_markdown_v2(f"–¢–µ–º—ã —Å–µ–≥–æ–¥–Ω—è: {', '.join(sorted(list(used_categories_set)))}."))
                else:
                    announce_text_parts.append(escape_markdown_v2("–¢–µ–º—ã –±—É–¥—É—Ç —Å—é—Ä–ø—Ä–∏–∑–æ–º!"))
                if announce_delay_seconds > 0:
                    announce_text_parts.append(f"–°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ {escape_markdown_v2(str(announce_delay_seconds))} —Å–µ–∫\\!")
            else:
                if initiated_by_user:
                    announce_text_parts.append(f"{escape_markdown_v2(initiated_by_user.first_name)} –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\\!")
                if announce_delay_seconds > 0:
                    announce_text_parts.append(f"üîî –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {escape_markdown_v2(str(announce_delay_seconds))} —Å–µ–∫\\!")
                elif not interactive_start_message_id and not initiated_by_user : # –î–ª—è –Ω–µ-daily, –Ω–µ-–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –±–µ–∑ user_id (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)
                    announce_text_parts.append(escape_markdown_v2("üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!"))

            full_announce_text = " ".join(announce_text_parts)
            if full_announce_text.strip():
                try:
                    msg = await context.bot.send_message(chat_id, full_announce_text, parse_mode=ParseMode.MARKDOWN_V2)
                    current_quiz_state_instance.announce_message_id = msg.message_id
                    current_quiz_state_instance.message_ids_to_delete.add(msg.message_id)
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
                    self.state.add_message_for_deletion(chat_id, msg.message_id)
                except Exception as e_announce:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω—Å–∞ (delay: {announce_delay_seconds > 0}) –≤ —á–∞—Ç {chat_id}: {e_announce}")
            else:
                logger.debug(f"–¢–µ–∫—Å—Ç –∞–Ω–æ–Ω—Å–∞ –ø—É—Å—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id}, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")

            if announce_delay_seconds > 0:
                self.state.add_active_quiz(chat_id, current_quiz_state_instance)
                logger.info(f"_initiate_quiz_session: QuizState —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}. –¢–∏–ø: {quiz_type}. –û–∂–∏–¥–∞–Ω–∏–µ {announce_delay_seconds} —Å–µ–∫...")
                await asyncio.sleep(announce_delay_seconds)
                logger.debug(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
                quiz_state_after_delay_check = self.state.get_active_quiz(chat_id)
                if not quiz_state_after_delay_check or quiz_state_after_delay_check.is_stopping or quiz_state_after_delay_check != current_quiz_state_instance:
                    logger.info(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –≤ —á–∞—Ç–µ {chat_id} –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞/–∑–∞–º–µ–Ω–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∞–Ω–æ–Ω—Å–∞. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
                    if self.state.get_active_quiz(chat_id) == current_quiz_state_instance:
                        self.state.remove_active_quiz(chat_id) 
                    return
            else: 
                self.state.add_active_quiz(chat_id, current_quiz_state_instance)
                logger.info(f"_initiate_quiz_session: QuizState (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–æ–Ω—Å –∏–ª–∏ –±–µ–∑ –∞–Ω–æ–Ω—Å–∞ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç) —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}. –¢–∏–ø: {quiz_type}")
        else: 
            self.state.add_active_quiz(chat_id, current_quiz_state_instance)
            logger.info(f"_initiate_quiz_session: QuizState (–±–µ–∑ –∞–Ω–æ–Ω—Å–∞) —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}. –¢–∏–ø: {quiz_type}")

        logger.info(f"_initiate_quiz_session: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
        await self._send_next_question(context, chat_id)

    async def _send_next_question(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
        logger.debug(f"–ù–ê–ß–ê–õ–û _send_next_question –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
        quiz_state = self.state.get_active_quiz(chat_id)

        if not quiz_state or quiz_state.is_stopping:
            logger.warning(f"_send_next_question: –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
            return

        if quiz_state.current_question_index >= quiz_state.num_questions_to_ask:
            logger.info(f"_send_next_question: –í—Å–µ {quiz_state.num_questions_to_ask} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
            return

        question_data = quiz_state.get_current_question_data()
        if not question_data:
            error_msg_text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞."
            logger.error(f"_send_next_question: {error_msg_text} –ò–Ω–¥–µ–∫—Å: {quiz_state.current_question_index}, —á–∞—Ç: {chat_id}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
            await self._finalize_quiz_session(context, chat_id, error_occurred=True, error_message=error_msg_text)
            return

        logger.info(f"_send_next_question: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ {quiz_state.current_question_index + 1}/{quiz_state.num_questions_to_ask} –≤ —á–∞—Ç–µ {chat_id}.")

        is_last_q_in_this_session = (quiz_state.current_question_index == quiz_state.num_questions_to_ask - 1)
        q_num_display = quiz_state.current_question_index + 1
        title_prefix_for_poll_unescaped: str
        if quiz_state.quiz_type == "single": title_prefix_for_poll_unescaped = "–í–æ–ø—Ä–æ—Å"
        elif quiz_state.quiz_type == "daily": title_prefix_for_poll_unescaped = f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å {q_num_display}/{quiz_state.num_questions_to_ask}"
        else: title_prefix_for_poll_unescaped = f"–í–æ–ø—Ä–æ—Å {q_num_display}/{quiz_state.num_questions_to_ask}"

        current_category_name_display_unescaped = question_data.get('current_category_name_for_quiz', question_data.get('original_category'))

        sent_poll_id = await self.quiz_engine.send_quiz_poll(
            context, chat_id, question_data,
            poll_title_prefix=title_prefix_for_poll_unescaped,
            open_period_seconds=quiz_state.open_period_seconds,
            quiz_type=quiz_state.quiz_type,
            is_last_question=is_last_q_in_this_session,
            question_session_index=quiz_state.current_question_index,
            current_category_name=current_category_name_display_unescaped if current_category_name_display_unescaped else None
        )

        if sent_poll_id:
            quiz_state_after_poll_send = self.state.get_active_quiz(chat_id)
            if not quiz_state_after_poll_send or quiz_state_after_poll_send.is_stopping or quiz_state_after_poll_send != quiz_state:
                logger.warning(f"_send_next_question: –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å/–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞. –û—Ç–º–µ–Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞.")
                return

            quiz_state.active_poll_ids_in_session.add(sent_poll_id)
            quiz_state.latest_poll_id_sent = sent_poll_id
            quiz_state.progression_triggered_for_poll[sent_poll_id] = False

            poll_data_from_bot_state = self.state.get_current_poll_data(sent_poll_id)
            if not poll_data_from_bot_state:
                error_msg_poll_data = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ send_quiz_poll)."
                logger.error(f"_send_next_question: {error_msg_poll_data} Poll ID: {sent_poll_id}, —á–∞—Ç: {chat_id}.")
                await self._finalize_quiz_session(context, chat_id, error_occurred=True, error_message=error_msg_poll_data)
                return

            job_name_for_this_poll_end = f"poll_end_chat_{chat_id}_poll_{sent_poll_id}"
            poll_data_from_bot_state["job_poll_end_name"] = job_name_for_this_poll_end

            schedule_job_unique(
                self.application.job_queue,
                job_name=job_name_for_this_poll_end,
                callback=self._handle_poll_end_job,
                when=timedelta(seconds=quiz_state.open_period_seconds + self.app_config.job_grace_period_seconds),
                data={"chat_id": chat_id, "ended_poll_id": sent_poll_id}
            )

            quiz_state.current_question_index += 1
            logger.debug(f"_send_next_question: –ò–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç–µ {chat_id} —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {quiz_state.current_question_index}.")
        else:
            error_msg_text_send_poll = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ Telegram API (QuizEngine.send_quiz_poll –≤–µ—Ä–Ω—É–ª None)."
            logger.error(f"_send_next_question: {error_msg_text_send_poll} –í–æ–ø—Ä–æ—Å: {quiz_state.current_question_index}, —á–∞—Ç: {chat_id}.")
            await self._finalize_quiz_session(context, chat_id, error_occurred=True, error_message=error_msg_text_send_poll)

        logger.debug(f"–ó–ê–í–ï–†–®–ï–ù–ò–ï _send_next_question –¥–ª—è —á–∞—Ç–∞ {chat_id} (–≤–æ–ø—Ä–æ—Å {quiz_state.current_question_index-1 if quiz_state else 'N/A'} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω).")

    async def _handle_early_answer_for_session(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int, answered_poll_id: str):
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–ø—Ä–æ—Å {answered_poll_id} –≤ —á–∞—Ç–µ {chat_id}.")
        quiz_state = self.state.get_active_quiz(chat_id)

        if not quiz_state or quiz_state.is_stopping:
            logger.debug(f"–û—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å {answered_poll_id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω: –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.")
            return

        if quiz_state.progression_triggered_for_poll.get(answered_poll_id, False):
            logger.debug(f"–û—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å {answered_poll_id}: –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —É–∂–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ –¥–ª—è —ç—Ç–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
            return

        quiz_state.progression_triggered_for_poll[answered_poll_id] = True

        poll_data_in_state = self.state.get_current_poll_data(answered_poll_id)
        if poll_data_in_state:
            poll_data_in_state["next_q_triggered_by_answer"] = True
            logger.debug(f"–§–ª–∞–≥ next_q_triggered_by_answer —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ True –¥–ª—è poll_id {answered_poll_id}")
        else:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è poll_id {answered_poll_id} –≤ self.state.current_polls –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ next_q_triggered_by_answer.")

        logger.info(f"–ü–µ—Ä–≤—ã–π –∑–Ω–∞—á–∞—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å {answered_poll_id} (—á–∞—Ç {chat_id}). –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ / –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")

        if quiz_state.current_question_index < quiz_state.num_questions_to_ask:
            if quiz_state.next_question_job_name: 
                jobs = self.application.job_queue.get_jobs_by_name(quiz_state.next_question_job_name)
                for job in jobs: job.schedule_removal()
                logger.debug(f"–û—Ç–º–µ–Ω–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ {quiz_state.next_question_job_name}.")
                quiz_state.next_question_job_name = None

            if quiz_state.quiz_mode == "serial_interval" and quiz_state.interval_seconds is not None and quiz_state.interval_seconds > 0:
                delay_seconds = quiz_state.interval_seconds
                job_name = f"delayed_next_q_after_answer_chat_{chat_id}_qidx_{quiz_state.current_question_index}"
                quiz_state.next_question_job_name = job_name
                schedule_job_unique(
                    self.application.job_queue,
                    job_name=job_name,
                    callback=self._trigger_next_question_job_after_interval,
                    when=timedelta(seconds=delay_seconds),
                    data={"chat_id": chat_id, "expected_q_index_at_trigger": quiz_state.current_question_index}
                )
                logger.info(f"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–∏–Ω–¥–µ–∫—Å {quiz_state.current_question_index}) –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫ (—Ä–µ–∂–∏–º serial_interval).")
            else: 
                logger.info(f"–†–µ–∂–∏–º '{quiz_state.quiz_mode}', –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–∏–Ω–¥–µ–∫—Å {quiz_state.current_question_index}).")
                await self._send_next_question(context, chat_id)
        else:
            logger.info(f"–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã ({quiz_state.num_questions_to_ask}) —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –û—Ç–≤–µ—Ç –Ω–∞ {answered_poll_id} –Ω–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã.")

    async def _trigger_next_question_job_after_interval(self, context: ContextTypes.DEFAULT_TYPE):
        if not context.job or not isinstance(context.job.data, dict): return

        chat_id: Optional[int] = context.job.data.get("chat_id")
        expected_q_idx: Optional[int] = context.job.data.get("expected_q_index_at_trigger")

        if chat_id is None:
            logger.error(f"_trigger_next_question_job_after_interval: chat_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. Job: {context.job.name if context.job else 'N/A'}")
            return

        quiz_state = self.state.get_active_quiz(chat_id)
        if not quiz_state or quiz_state.is_stopping:
            logger.info(f"_trigger_next_question_job_after_interval: –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è. –ü—Ä–æ–ø—É—Å–∫.")
            return

        if expected_q_idx is not None and quiz_state.current_question_index != expected_q_idx:
            logger.warning(f"_trigger_next_question_job_after_interval (—á–∞—Ç {chat_id}): –û–∂–∏–¥–∞–µ–º—ã–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ {expected_q_idx} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º {quiz_state.current_question_index}. –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return

        if quiz_state.next_question_job_name == (context.job.name if context.job else None):
            quiz_state.next_question_job_name = None 

        logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}. Job: {context.job.name if context.job else 'N/A'}.")
        await self._send_next_question(context, chat_id)

    async def _handle_poll_end_job(self, context: ContextTypes.DEFAULT_TYPE):
        if not context.job or not isinstance(context.job.data, dict):
            logger.error("_handle_poll_end_job: context.job –∏–ª–∏ context.job.data –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")
            return

        job_data: Dict[str, Any] = context.job.data
        chat_id: Optional[int] = job_data.get("chat_id")
        ended_poll_id: Optional[str] = job_data.get("ended_poll_id")

        if chat_id is None or ended_poll_id is None:
            logger.error(f"_handle_poll_end_job: chat_id –∏–ª–∏ ended_poll_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. Data: {job_data}")
            return

        logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª —Ç–∞–π–º–∞—É—Ç –¥–ª—è poll_id {ended_poll_id} –≤ —á–∞—Ç–µ {chat_id}. Job: {context.job.name}")

        poll_info_before_removal = self.state.get_current_poll_data(ended_poll_id)
        sent_solution_msg_id = await self.quiz_engine.send_solution_if_available(context, chat_id, ended_poll_id)
        quiz_state = self.state.get_active_quiz(chat_id) 

        if poll_info_before_removal and quiz_state:
            ended_poll_message_id = poll_info_before_removal.get("message_id")
            if ended_poll_message_id:
                quiz_state.poll_and_solution_message_ids.append({
                    "poll_msg_id": ended_poll_message_id,
                    "solution_msg_id": sent_solution_msg_id
                })
                logger.debug(f"Poll msg {ended_poll_message_id} and solution msg {sent_solution_msg_id} for poll {ended_poll_id} added to delayed delete list for chat {chat_id}.")
            else:
                logger.warning(f"_handle_poll_end_job: message_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ poll_info_before_removal –¥–ª—è poll_id {ended_poll_id}, —á–∞—Ç {chat_id}. –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.")
        elif not poll_info_before_removal:
             logger.warning(f"_handle_poll_end_job: poll_info_before_removal is None –¥–ª—è poll_id {ended_poll_id}, —á–∞—Ç {chat_id}. –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.")
        
        self.state.remove_current_poll(ended_poll_id)

        if not quiz_state: 
            logger.info(f"_handle_poll_end_job: –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞).")
            return

        next_q_was_triggered_by_answer = False
        if poll_info_before_removal:
            next_q_was_triggered_by_answer = poll_info_before_removal.get("next_q_triggered_by_answer", False)
        else:
            logger.warning(f"_handle_poll_end_job: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å poll_info_before_removal (–ø–æ–≤—Ç–æ—Ä–Ω–æ) –¥–ª—è poll_id {ended_poll_id} –≤ —á–∞—Ç–µ {chat_id}.")

        if quiz_state.is_stopping:
            logger.info(f"_handle_poll_end_job: –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            quiz_state.active_poll_ids_in_session.discard(ended_poll_id)
            quiz_state.progression_triggered_for_poll.pop(ended_poll_id, None)
            if not quiz_state.active_poll_ids_in_session and quiz_state.is_stopping:
                 logger.info(f"–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å ({ended_poll_id}) –≤ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ. –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è.")
                 await self._finalize_quiz_session(context, chat_id, was_stopped=True)
            return

        quiz_state.active_poll_ids_in_session.discard(ended_poll_id)
        quiz_state.progression_triggered_for_poll.pop(ended_poll_id, None)

        if quiz_state.current_question_index < quiz_state.num_questions_to_ask:
            if not next_q_was_triggered_by_answer:
                logger.info(f"–¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø—Ä–æ—Å–∞ {ended_poll_id} (—á–∞—Ç {chat_id}). –î–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –ù–ï –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ—Ö–æ–¥. –ó–∞–ø—É—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
                if quiz_state.next_question_job_name: 
                    jobs = self.application.job_queue.get_jobs_by_name(quiz_state.next_question_job_name)
                    for job in jobs: job.schedule_removal()
                    quiz_state.next_question_job_name = None
                await self._send_next_question(context, chat_id)
            else:
                logger.info(f"–¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø—Ä–æ—Å–∞ {ended_poll_id} (—á–∞—Ç {chat_id}). –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —É–∂–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ä–æ—á–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ _handle_poll_end_job –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        elif not quiz_state.active_poll_ids_in_session: 
            logger.info(f"–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ({quiz_state.current_question_index}/{quiz_state.num_questions_to_ask}) –∏ –≤—Å–µ –æ–ø—Ä–æ—Å—ã ({ended_poll_id} –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–º) –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
            await self._finalize_quiz_session(context, chat_id)
        else:
            logger.info(f"–û–ø—Ä–æ—Å {ended_poll_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –í —Å–µ—Å—Å–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id} –µ—â–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã ({len(quiz_state.active_poll_ids_in_session)}) –∏–ª–∏ –Ω–µ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –û–∂–∏–¥–∞–Ω–∏–µ.")

    async def _delayed_delete_messages_job(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Job-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –°–õ–£–ñ–ï–ë–ù–´–• —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
        if not context.job or not isinstance(context.job.data, dict):
            logger.error("_delayed_delete_messages_job: context.job –∏–ª–∏ context.job.data –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")
            return

        chat_id: Optional[int] = context.job.data.get("chat_id")
        message_ids_to_delete_list: Optional[List[int]] = context.job.data.get("message_ids")

        if chat_id is None or message_ids_to_delete_list is None:
            logger.error(f"_delayed_delete_messages_job: chat_id –∏–ª–∏ message_ids –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. Data: {context.job.data}")
            return

        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
        chat_settings = self.data_manager.get_chat_settings(chat_id)
        default_auto_delete_from_config = self.app_config.default_chat_settings.get("auto_delete_bot_messages", True)
        auto_delete_enabled = chat_settings.get("auto_delete_bot_messages", default_auto_delete_from_config)

        if not auto_delete_enabled:
            logger.info(f"–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –°–õ–£–ñ–ï–ë–ù–´–• —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}. –ü—Ä–æ–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è {len(message_ids_to_delete_list)} —Å–æ–æ–±—â–µ–Ω–∏–π. Job: {context.job.name if context.job else 'N/A'}")
            return
        # –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø

        logger.info(f"–ó–∞–ø—É—Å–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è {len(message_ids_to_delete_list)} –°–õ–£–ñ–ï–ë–ù–´–• —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}. Job: {context.job.name if context.job else 'N/A'}")
        for msg_id in message_ids_to_delete_list:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} (—Å–ª—É–∂–µ–±–Ω–æ–µ) —É–¥–∞–ª–µ–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat_id}.")
            except BadRequest as e_br_del:
                 if "message to delete not found" in str(e_br_del).lower() or \
                    "message can't be deleted" in str(e_br_del).lower():
                     logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} (—Å–ª—É–∂–µ–±–Ω–æ–µ) —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ (–æ—Ç–ª–æ–∂–µ–Ω–Ω–æ): {e_br_del}")
                 else:
                     logger.warning(f"–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id} (—Å–ª—É–∂–µ–±–Ω–æ–µ) –∏–∑ —á–∞—Ç–∞ {chat_id}: {e_br_del}")
            except Exception as e_del_delayed:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} (—Å–ª—É–∂–µ–±–Ω–æ–µ) –∏–∑ —á–∞—Ç–∞ {chat_id}: {e_del_delayed}")
        logger.info(f"–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –°–õ–£–ñ–ï–ë–ù–´–• —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    async def _delayed_delete_poll_solution_messages_job(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Job-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –û–ü–†–û–°–û–í –∏ –ü–û–Ø–°–ù–ï–ù–ò–ô."""
        if not context.job or not isinstance(context.job.data, dict):
            logger.error("_delayed_delete_poll_solution_messages_job: context.job –∏–ª–∏ context.job.data –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")
            return

        chat_id: Optional[int] = context.job.data.get("chat_id")
        message_ids_to_delete_list: Optional[List[int]] = context.job.data.get("message_ids")

        if chat_id is None or message_ids_to_delete_list is None:
            logger.error(f"_delayed_delete_poll_solution_messages_job: chat_id –∏–ª–∏ message_ids –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. Data: {context.job.data}")
            return
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
        chat_settings = self.data_manager.get_chat_settings(chat_id)
        default_auto_delete_from_config = self.app_config.default_chat_settings.get("auto_delete_bot_messages", True)
        auto_delete_enabled = chat_settings.get("auto_delete_bot_messages", default_auto_delete_from_config)

        if not auto_delete_enabled:
            logger.info(f"–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –û–ü–†–û–°–û–í/–ü–û–Ø–°–ù–ï–ù–ò–ô –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}. –ü—Ä–æ–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è {len(message_ids_to_delete_list)} —Å–æ–æ–±—â–µ–Ω–∏–π. Job: {context.job.name if context.job else 'N/A'}")
            return
        # –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø

        logger.info(f"–ó–∞–ø—É—Å–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è {len(message_ids_to_delete_list)} —Å–æ–æ–±—â–µ–Ω–∏–π –û–ü–†–û–°–û–í/–ü–û–Ø–°–ù–ï–ù–ò–ô –≤ —á–∞—Ç–µ {chat_id}. Job: {context.job.name if context.job else 'N/A'}")
        for msg_id in message_ids_to_delete_list:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} (–æ–ø—Ä–æ—Å/–ø–æ—è—Å–Ω–µ–Ω–∏–µ) —É–¥–∞–ª–µ–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat_id}.")
            except BadRequest as e_br_del:
                 if "message to delete not found" in str(e_br_del).lower() or \
                    "message can't be deleted" in str(e_br_del).lower():
                     logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} (–æ–ø—Ä–æ—Å/–ø–æ—è—Å–Ω–µ–Ω–∏–µ) —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ (–æ—Ç–ª–æ–∂–µ–Ω–Ω–æ): {e_br_del}")
                 else:
                     logger.warning(f"–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id} (–æ–ø—Ä–æ—Å/–ø–æ—è—Å–Ω–µ–Ω–∏–µ) –∏–∑ —á–∞—Ç–∞ {chat_id}: {e_br_del}")
            except Exception as e_del_delayed:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} (–æ–ø—Ä–æ—Å/–ø–æ—è—Å–Ω–µ–Ω–∏–µ) –∏–∑ —á–∞—Ç–∞ {chat_id}: {e_del_delayed}")
        logger.info(f"–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –û–ü–†–û–°–û–í/–ü–û–Ø–°–ù–ï–ù–ò–ô –≤ —á–∞—Ç–µ {chat_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    async def _finalize_quiz_session(
        self, context: ContextTypes.DEFAULT_TYPE, chat_id: int,
        was_stopped: bool = False, error_occurred: bool = False, error_message: Optional[str] = None
    ):
        quiz_state = self.state.remove_active_quiz(chat_id)
        if not quiz_state:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è —á–∞—Ç–∞ {chat_id}, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ QuizState –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        escaped_error_message = escape_markdown_v2(error_message) if error_message else None
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (—Ç–∏–ø: {quiz_state.quiz_type}, —Ä–µ–∂–∏–º: {quiz_state.quiz_mode}) –≤ —á–∞—Ç–µ {chat_id}. –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {was_stopped}, –û—à–∏–±–∫–∞: {error_occurred}, –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")

        job_queue = self.application.job_queue

        if quiz_state.next_question_job_name and job_queue:
            jobs = job_queue.get_jobs_by_name(quiz_state.next_question_job_name)
            for job in jobs: job.schedule_removal()
            quiz_state.next_question_job_name = None

        active_poll_ids_copy = list(quiz_state.active_poll_ids_in_session)
        for poll_id_to_stop in active_poll_ids_copy:
            poll_data = self.state.get_current_poll_data(poll_id_to_stop) 
            if poll_data:
                job_name_to_cancel = poll_data.get("job_poll_end_name")
                if job_name_to_cancel and job_queue:
                    jobs = job_queue.get_jobs_by_name(job_name_to_cancel)
                    for job in jobs: job.schedule_removal()

                message_id_of_poll = poll_data.get("message_id")
                if message_id_of_poll and was_stopped: 
                    try:
                        await context.bot.stop_poll(chat_id=chat_id, message_id=message_id_of_poll)
                        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å {poll_id_to_stop} (msg_id: {message_id_of_poll}) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
                    except BadRequest as e_stop_poll:
                        if "poll has already been closed" not in str(e_stop_poll).lower():
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø—Ä–æ—Å {poll_id_to_stop} –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (was_stopped): {e_stop_poll}")
                    except Exception as e_gen_stop_poll:
                        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–ø—Ä–æ—Å–∞ {poll_id_to_stop} (was_stopped): {e_gen_stop_poll}")
                    
                    quiz_state.poll_and_solution_message_ids.append({
                        "poll_msg_id": message_id_of_poll,
                        "solution_msg_id": None 
                    })
                    logger.debug(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π poll msg {message_id_of_poll} (poll_id: {poll_id_to_stop}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ.")

                self.state.remove_current_poll(poll_id_to_stop)
            quiz_state.active_poll_ids_in_session.discard(poll_id_to_stop)

        if error_occurred and not quiz_state.scores:
            msg_text_to_send = f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {escaped_error_message}" if escaped_error_message else escape_markdown_v2("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏.")
            try: 
                error_msg = await context.bot.send_message(chat_id, msg_text_to_send, parse_mode=ParseMode.MARKDOWN_V2)
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
                self.state.add_message_for_deletion(chat_id, error_msg.message_id)
            except Exception as e_send_err: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {e_send_err}")
        elif quiz_state.quiz_type != "single" or quiz_state.scores or (error_occurred and quiz_state.scores): 
            title_unescaped_for_formatter = "üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            if was_stopped: title_unescaped_for_formatter = "üìù –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
            elif error_occurred: title_unescaped_for_formatter = f"‚ö†Ô∏è –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π{(': ' + error_message) if error_message else ''}. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å):"

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ—Å—Å–∏–∏, –≤–∫–ª—é—á–∞—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –∏ –∏–∫–æ–Ω–∫—É –∞—á–∏–≤–∫–∏
            scores_for_display: List[Dict[str, Any]] = []
            for uid, data in quiz_state.scores.items():
                # –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º)
                global_stats = self.score_manager.get_global_user_stats(uid)
                global_total_score_val = global_stats.get('total_score', 0) if global_stats else 0
                achievement_icon_val = self.score_manager.get_rating_icon(global_total_score_val)

                try:
                    user_id_int = int(uid)
                except ValueError:
                    user_id_int = 0

                scores_for_display.append({
                    "user_id": user_id_int,
                    "name": data["name"],
                    "score": data["score"],
                    "correct_count": data.get("correct_count", 0),
                    "global_total_score": global_total_score_val,
                    "achievement_icon": achievement_icon_val,
                })

            scores_for_display.sort(key=lambda x: -x["score"]) 

            results_text_md = self.score_manager.format_scores(
                scores_list=scores_for_display,
                title=title_unescaped_for_formatter,
                is_session_score=True,
                num_questions_in_session=quiz_state.num_questions_to_ask
            )
            try: 
                result_msg = await context.bot.send_message(chat_id, results_text_md, parse_mode=ParseMode.MARKDOWN_V2)
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
                self.state.add_message_for_deletion(chat_id, result_msg.message_id)
            except Exception as e_send_res: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e_send_res}")

        if quiz_state.message_ids_to_delete:
            job_name_service = f"delayed_quiz_msg_cleanup_chat_{chat_id}_qs_{int(quiz_state.quiz_start_time.timestamp())}"
            schedule_job_unique(
                job_queue,
                job_name=job_name_service,
                callback=self._delayed_delete_messages_job,
                when=timedelta(seconds=DELAY_BEFORE_SESSION_MESSAGES_DELETION_SECONDS),
                data={"chat_id": chat_id, "message_ids": list(quiz_state.message_ids_to_delete)}
            )
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ {len(quiz_state.message_ids_to_delete)} –°–õ–£–ñ–ï–ë–ù–´–• —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id} (job: {job_name_service}, delay: {DELAY_BEFORE_SESSION_MESSAGES_DELETION_SECONDS}s).")
        else:
            logger.debug(f"–ù–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}.")

        if quiz_state.poll_and_solution_message_ids:
            all_poll_solution_msg_ids_flat: List[int] = []
            for pair in quiz_state.poll_and_solution_message_ids:
                if pair.get("poll_msg_id"):
                    all_poll_solution_msg_ids_flat.append(pair["poll_msg_id"])
                if pair.get("solution_msg_id"):
                    all_poll_solution_msg_ids_flat.append(pair["solution_msg_id"])

            if all_poll_solution_msg_ids_flat:
                job_name_poll_sol = f"delayed_poll_sol_cleanup_chat_{chat_id}_qs_{int(quiz_state.quiz_start_time.timestamp())}"
                schedule_job_unique(
                    job_queue,
                    job_name=job_name_poll_sol,
                    callback=self._delayed_delete_poll_solution_messages_job,
                    when=timedelta(seconds=DELAY_BEFORE_POLL_SOLUTION_DELETION_SECONDS),
                    data={"chat_id": chat_id, "message_ids": all_poll_solution_msg_ids_flat}
                )
                logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ {len(all_poll_solution_msg_ids_flat)} —Å–æ–æ–±—â–µ–Ω–∏–π –û–ü–†–û–°–û–í/–ü–û–Ø–°–ù–ï–ù–ò–ô –¥–ª—è —á–∞—Ç–∞ {chat_id} (job: {job_name_poll_sol}, delay: {DELAY_BEFORE_POLL_SOLUTION_DELETION_SECONDS}s).")
        else:
            logger.debug(f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø—Ä–æ—Å–æ–≤/–ø–æ—è—Å–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}.")

        logger.info(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –≤ —á–∞—Ç–µ {chat_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å). –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è.")

    async def quiz_command_entry(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        logger.debug(f"quiz_command_entry: –ü–û–õ–£–ß–ï–ù–ê –ö–û–ú–ê–ù–î–ê /quiz. Update ID: {update.update_id}")
        if not update.message or not update.effective_chat or not update.effective_user:
            logger.debug("quiz_command_entry: update.message, effective_chat –∏–ª–∏ effective_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return ConversationHandler.END

        chat_id = update.effective_chat.id
        user = update.effective_user
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /quiz ({self.app_config.commands.quiz}) –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} ({user.full_name}) –≤ —á–∞—Ç–µ {chat_id}. –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {context.args}")

        active_quiz = self.state.get_active_quiz(chat_id)
        if active_quiz and not active_quiz.is_stopping:
            logger.info(f"quiz_command_entry: –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —á–∞—Ç–µ {chat_id}. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            await update.message.reply_text(escape_markdown_v2(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∏–¥–µ—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ: `/{self.app_config.commands.stop_quiz}`."), parse_mode=ParseMode.MARKDOWN_V2)
            return ConversationHandler.END

        args = context.args if context.args else []
        parsed_num_q: Optional[int] = None
        parsed_categories_names: List[str] = []
        parsed_announce_flag: Optional[bool] = None
        temp_args_for_parsing = list(args)

        if temp_args_for_parsing and temp_args_for_parsing[-1].lower() == "announce":
            parsed_announce_flag = True
            temp_args_for_parsing.pop()
            logger.debug("quiz_command_entry: –ê—Ä–≥—É–º–µ–Ω—Ç 'announce' –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")

        if temp_args_for_parsing and temp_args_for_parsing[0].isdigit():
            try:
                num_val = int(temp_args_for_parsing[0])
                if 1 <= num_val <= self.app_config.max_questions_per_session:
                    parsed_num_q = num_val
                    temp_args_for_parsing.pop(0)
                    logger.debug(f"quiz_command_entry: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {parsed_num_q}")
                else:
                    logger.info(f"quiz_command_entry: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö: {num_val}. –ß–∞—Ç: {chat_id}")
                    await update.message.reply_text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ {escape_markdown_v2(str(self.app_config.max_questions_per_session))}\\.", parse_mode=ParseMode.MARKDOWN_V2)
                    return ConversationHandler.END
            except ValueError:
                logger.debug(f"quiz_command_entry: –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç '{temp_args_for_parsing[0]}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ announce).")

        if temp_args_for_parsing:
            potential_category_name = " ".join(temp_args_for_parsing)
            if self.category_manager.is_valid_category(potential_category_name):
                parsed_categories_names.append(potential_category_name)
                logger.debug(f"quiz_command_entry: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: '{potential_category_name}'")
            else:
                logger.debug(f"quiz_command_entry: –°—Ç—Ä–æ–∫–∞ '{potential_category_name}' –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.")

        is_quick_launch = parsed_num_q is not None or bool(parsed_categories_names)
        logger.debug(f"quiz_command_entry: –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫: {is_quick_launch}. NQ: {parsed_num_q}, Cats: {parsed_categories_names}, AnnounceFlag: {parsed_announce_flag}")

        if is_quick_launch:
            logger.info(f"quiz_command_entry: –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
            params_for_quick_launch = self._get_effective_quiz_params(chat_id, parsed_num_q)
            final_announce_for_quick = parsed_announce_flag if parsed_announce_flag is not None else params_for_quick_launch["announce_quiz"]
            final_is_random_cats_for_quick = not bool(parsed_categories_names)
            await self._initiate_quiz_session(
                context, chat_id, user,
                params_for_quick_launch["quiz_type_key"], params_for_quick_launch["quiz_mode"],
                params_for_quick_launch["num_questions"], params_for_quick_launch["open_period_seconds"],
                final_announce_for_quick, params_for_quick_launch["announce_delay_seconds"],
                category_names_for_quiz=parsed_categories_names if parsed_categories_names else None,
                is_random_categories_mode=final_is_random_cats_for_quick,
                interval_seconds=params_for_quick_launch.get("interval_seconds"),
                original_command_message_id=update.message.message_id,
                interactive_start_message_id=None
            )
            return ConversationHandler.END
        elif parsed_announce_flag is True:
            logger.info(f"quiz_command_entry: –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (—Ç–æ–ª—å–∫–æ —Ñ–ª–∞–≥ announce) –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
            params_for_announce_only = self._get_effective_quiz_params(chat_id)
            await self._initiate_quiz_session(
                context, chat_id, user,
                params_for_announce_only["quiz_type_key"], params_for_announce_only["quiz_mode"],
                params_for_announce_only["num_questions"], params_for_announce_only["open_period_seconds"],
                True, params_for_announce_only["announce_delay_seconds"],
                is_random_categories_mode=True,
                interval_seconds=params_for_announce_only.get("interval_seconds"),
                original_command_message_id=update.message.message_id,
                interactive_start_message_id=None
            )
            return ConversationHandler.END
        else:
            logger.info(f"quiz_command_entry: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
            params_for_interactive = self._get_effective_quiz_params(chat_id)
            context.chat_data['quiz_cfg_progress'] = {
                'num_questions': params_for_interactive["num_questions"], 'category_name': "random",
                'announce': params_for_interactive["announce_quiz"], 'open_period_seconds': params_for_interactive["open_period_seconds"],
                'announce_delay_seconds': params_for_interactive["announce_delay_seconds"], 'quiz_type_key': params_for_interactive["quiz_type_key"],
                'quiz_mode': params_for_interactive["quiz_mode"], 'interval_seconds': params_for_interactive.get("interval_seconds"),
                'original_command_message_id': update.message.message_id, 'chat_id': chat_id, 'user_id': user.id
            }
            await self._send_quiz_cfg_message(update, context)
            return CFG_QUIZ_OPTIONS

    async def _send_quiz_cfg_message(self, update_or_query: Union[Update, CallbackQuery], context: ContextTypes.DEFAULT_TYPE) -> None:
        cfg = context.chat_data.get('quiz_cfg_progress')
        if not cfg:
            logger.error("_send_quiz_cfg_message: –î–∞–Ω–Ω—ã–µ 'quiz_cfg_progress' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            if isinstance(update_or_query, CallbackQuery):
                await update_or_query.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
                if update_or_query.message:
                    try: await update_or_query.message.delete()
                    except Exception: pass
            return

        num_q_display = cfg['num_questions']
        cat_name_raw = cfg['category_name']
        cat_display_text_escaped = escape_markdown_v2('–°–ª—É—á–∞–π–Ω—ã–µ' if cat_name_raw == 'random' else cat_name_raw)
        announce_text_raw_escaped = escape_markdown_v2('–í–∫–ª' if cfg['announce'] else '–í—ã–∫–ª')
        delay_text_md_escaped = f" \\(–∑–∞–¥–µ—Ä–∂–∫–∞ {escape_markdown_v2(str(cfg['announce_delay_seconds']))} —Å–µ–∫\\)" if cfg['announce'] else ""
        text = (
            f"‚öôÔ∏è *{escape_markdown_v2('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã')}*\n\n"
            f"üî¢ {escape_markdown_v2('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:')} `{escape_markdown_v2(str(num_q_display))}`\n"
            f"üìö {escape_markdown_v2('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:')} `{cat_display_text_escaped}`\n"
            f"üì¢ {escape_markdown_v2('–ê–Ω–æ–Ω—Å:')} `{announce_text_raw_escaped}`{delay_text_md_escaped}\n\n"
            f"{escape_markdown_v2('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ.')}"
        )
        cat_button_text_plain = ('–°–ª—É—á–∞–π–Ω—ã–µ' if cat_name_raw == 'random' else cat_name_raw)
        if len(cat_button_text_plain) > 18 : cat_button_text_plain = cat_button_text_plain[:15] + "..."
        announce_button_text_plain = '–í–∫–ª' if cfg['announce'] else '–í—ã–∫–ª'
        kb_layout = [
            [InlineKeyboardButton(f"–í–æ–ø—Ä–æ—Å—ã: {num_q_display}", callback_data=CB_QCFG_NUM_MENU), InlineKeyboardButton(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_button_text_plain}", callback_data=CB_QCFG_CAT_MENU)],
            [InlineKeyboardButton(f"–ê–Ω–æ–Ω—Å: {announce_button_text_plain}", callback_data=CB_QCFG_ANNOUNCE)],
            [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data=CB_QCFG_START)], [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CB_QCFG_CANCEL)]
        ]
        markup = InlineKeyboardMarkup(kb_layout)
        message_to_edit_id = context.chat_data.get('_quiz_cfg_msg_id')
        current_message: Optional[Message] = None
        is_callback = isinstance(update_or_query, CallbackQuery)
        if is_callback and update_or_query.message: current_message = update_or_query.message
        elif isinstance(update_or_query, Update) and update_or_query.message:
            current_message = update_or_query.message
            context.chat_data['_quiz_cmd_msg_id'] = current_message.message_id

        if current_message and message_to_edit_id == current_message.message_id and \
           message_to_edit_id != context.chat_data.get('_quiz_cmd_msg_id'):
            try:
                await current_message.edit_text(text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN_V2)
                if is_callback: await update_or_query.answer()
                return
            except BadRequest as e_br:
                if "Message is not modified" not in str(e_br).lower(): logger.warning(f"–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é: {e_br}.")
                if is_callback: await update_or_query.answer()
                return
            except Exception as e_edit: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é (edit): {e_edit}")

        if message_to_edit_id and message_to_edit_id != context.chat_data.get('_quiz_cmd_msg_id'):
            target_chat_id_for_delete = cfg.get('chat_id', update_or_query.effective_chat.id if update_or_query.effective_chat else None)
            if target_chat_id_for_delete:
                try:
                    await context.bot.delete_message(target_chat_id_for_delete, message_to_edit_id)
                except Exception: pass
            context.chat_data['_quiz_cfg_msg_id'] = None

        target_chat_id_for_send = cfg.get('chat_id', update_or_query.effective_chat.id if update_or_query.effective_chat else None)
        if not target_chat_id_for_send:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            if is_callback: await update_or_query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç.", show_alert=True)
            return

        try:
            sent_msg = await context.bot.send_message(target_chat_id_for_send, text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN_V2)
            context.chat_data['_quiz_cfg_msg_id'] = sent_msg.message_id
            if is_callback: await update_or_query.answer()
        except Exception as e_send_new: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e_send_new}")

    async def handle_quiz_cfg_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        query = update.callback_query
        if not query or not query.data:
            if query: await query.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–ª–±—ç–∫–µ.", show_alert=True)
            return CFG_QUIZ_OPTIONS

        action = query.data
        cfg = context.chat_data.get('quiz_cfg_progress')
        if not cfg:
            await query.answer("–°–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            if query.message:
                try: await query.message.delete()
                except Exception: pass
            return ConversationHandler.END
        if query.from_user.id != cfg.get('user_id'):
            await query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.", show_alert=True)
            return CFG_QUIZ_OPTIONS

        if action == CB_QCFG_START:
            logger.info(f"–ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ {cfg.get('chat_id')}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {query.from_user.id}")
            final_cfg = context.chat_data.pop('quiz_cfg_progress')
            quiz_cfg_msg_id = context.chat_data.pop('_quiz_cfg_msg_id', None)
            context.chat_data.pop('_quiz_cmd_msg_id', None)

            start_message_text_escaped = escape_markdown_v2("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É...")
            interactive_start_message_id_to_pass: Optional[int] = None

            if quiz_cfg_msg_id and final_cfg.get('chat_id'):
                try:
                    if quiz_cfg_msg_id != final_cfg.get('original_command_message_id'): 
                        await context.bot.delete_message(chat_id=final_cfg['chat_id'], message_id=quiz_cfg_msg_id)
                except Exception as e_del_menu:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {quiz_cfg_msg_id}: {e_del_menu}")

            if final_cfg.get('chat_id'):
                try:
                    sent_launch_msg = await context.bot.send_message(final_cfg['chat_id'], start_message_text_escaped, parse_mode=ParseMode.MARKDOWN_V2)
                    interactive_start_message_id_to_pass = sent_launch_msg.message_id
                except Exception as e_send_launch:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '–ó–∞–ø—É—Å–∫–∞—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É...': {e_send_launch}")

            await query.answer()

            await self._initiate_quiz_session(
                context, final_cfg['chat_id'], query.from_user, final_cfg['quiz_type_key'], final_cfg['quiz_mode'],
                final_cfg['num_questions'], final_cfg['open_period_seconds'], final_cfg['announce'], final_cfg['announce_delay_seconds'],
                category_names_for_quiz=[final_cfg['category_name']] if final_cfg['category_name'] != "random" else None,
                is_random_categories_mode=(final_cfg['category_name'] == "random"),
                interval_seconds=final_cfg.get('interval_seconds'),
                original_command_message_id=final_cfg.get('original_command_message_id'),
                interactive_start_message_id=interactive_start_message_id_to_pass
            )
            return ConversationHandler.END
        
        if action == CB_QCFG_BACK:
            await self._send_quiz_cfg_message(query, context) 
            return CFG_QUIZ_OPTIONS
        elif action == CB_QCFG_NUM_MENU:
            kb_num_options = [[InlineKeyboardButton("1", callback_data=f"{CB_QCFG_NUM_VAL}:1"), InlineKeyboardButton("5", callback_data=f"{CB_QCFG_NUM_VAL}:5"), InlineKeyboardButton("10", callback_data=f"{CB_QCFG_NUM_VAL}:10")],
                              [InlineKeyboardButton("–î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ...", callback_data=f"{CB_QCFG_NUM_VAL}:custom")], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_QCFG_BACK)]]
            if query.message:
                await query.message.edit_text(escape_markdown_v2("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:"), reply_markup=InlineKeyboardMarkup(kb_num_options), parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer()
            return CFG_QUIZ_OPTIONS
        elif action.startswith(CB_QCFG_NUM_VAL):
            val_str = action.split(":", 1)[1]
            if val_str == "custom":
                custom_prompt_text = (f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ \\(–æ—Ç 1 –¥–æ {escape_markdown_v2(str(self.app_config.max_questions_per_session))}\\)\\.\n"
                                      f"–ò–ª–∏ `/{escape_markdown_v2(self.app_config.commands.cancel)}` –¥–ª—è –æ—Ç–º–µ–Ω—ã\\.")
                if query.message:
                    await query.message.edit_text(custom_prompt_text, reply_markup=None, parse_mode=ParseMode.MARKDOWN_V2)
                await query.answer()
                return CFG_QUIZ_NUM_QS
            else:
                try:
                    num = int(val_str)
                    if 1 <= num <= self.app_config.max_questions_per_session:
                        cfg['num_questions'] = num
                        effective_params_after_num_change = self._get_effective_quiz_params(cfg['chat_id'], num)
                        cfg['quiz_type_key'] = effective_params_after_num_change['quiz_type_key']
                        cfg['quiz_mode'] = effective_params_after_num_change['quiz_mode']
                    else: await query.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ: {num}. –î–æ–ø—É—Å—Ç–∏–º–æ –æ—Ç 1 –¥–æ {self.app_config.max_questions_per_session}.", show_alert=True)
                except ValueError: await query.answer(f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —á–∏—Å–ª–∞: {val_str}.", show_alert=True)
                await self._send_quiz_cfg_message(query, context) 
                return CFG_QUIZ_OPTIONS
        elif action == CB_QCFG_CAT_MENU:
            available_cats_data = self.category_manager.get_all_category_names(with_question_counts=False)
            available_cats = [cat_info.get('name') for cat_info in available_cats_data if isinstance(cat_info.get('name'), str)]
            cat_kb_list = [[InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ (–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)", callback_data=f"{CB_QCFG_CAT_VAL}:random")]]
            for cat_name in available_cats[:self.app_config.max_interactive_categories_to_show]:
                cat_kb_list.append([InlineKeyboardButton(cat_name, callback_data=f"{CB_QCFG_CAT_VAL}:{cat_name}")])
            if len(available_cats) > self.app_config.max_interactive_categories_to_show:
                cat_kb_list.append([InlineKeyboardButton(f"(–µ—â–µ {len(available_cats) - self.app_config.max_interactive_categories_to_show}...)", callback_data=CB_QCFG_NOOP)])
            cat_kb_list.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_QCFG_BACK)])
            if query.message:
                await query.edit_message_text(escape_markdown_v2("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"), reply_markup=InlineKeyboardMarkup(cat_kb_list), parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer()
            return CFG_QUIZ_OPTIONS
        elif action.startswith(CB_QCFG_CAT_VAL):
            selected_category_name = action.split(":", 1)[1]
            cfg['category_name'] = selected_category_name
            await self._send_quiz_cfg_message(query, context) 
            return CFG_QUIZ_OPTIONS
        elif action == CB_QCFG_NOOP:
            await query.answer("–î–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /quiz —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", show_alert=True)
            return CFG_QUIZ_OPTIONS
        elif action == CB_QCFG_ANNOUNCE:
            cfg['announce'] = not cfg['announce']
            await self._send_quiz_cfg_message(query, context) 
            return CFG_QUIZ_OPTIONS
        elif action == CB_QCFG_CANCEL:
            return await self.cancel_quiz_cfg_command(update, context)

        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ handle_quiz_cfg_callback: {action}")
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return CFG_QUIZ_OPTIONS

    async def handle_typed_num_questions(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        if not update.message or not update.message.text:
            return CFG_QUIZ_NUM_QS
        cfg = context.chat_data.get('quiz_cfg_progress')
        if not cfg:
            await update.message.reply_text(escape_markdown_v2("–°–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /quiz."), parse_mode=ParseMode.MARKDOWN_V2)
            return ConversationHandler.END
        try:
            num = int(update.message.text.strip())
            if 1 <= num <= self.app_config.max_questions_per_session:
                cfg['num_questions'] = num
                effective_params_after_num_change = self._get_effective_quiz_params(cfg['chat_id'], num)
                cfg['quiz_type_key'] = effective_params_after_num_change['quiz_type_key']
                cfg['quiz_mode'] = effective_params_after_num_change['quiz_mode']
                try: await update.message.delete()
                except Exception: pass
                await self._send_quiz_cfg_message(update, context)
                return CFG_QUIZ_OPTIONS
            else:
                await update.message.reply_text(f"–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ {escape_markdown_v2(str(self.app_config.max_questions_per_session))}\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ `/{escape_markdown_v2(self.app_config.commands.cancel)}` –¥–ª—è –æ—Ç–º–µ–Ω—ã\\.", parse_mode=ParseMode.MARKDOWN_V2, reply_to_message_id=update.message.message_id)
        except ValueError:
            await update.message.reply_text(f"–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ `/{escape_markdown_v2(self.app_config.commands.cancel)}` –¥–ª—è –æ—Ç–º–µ–Ω—ã\\.", parse_mode=ParseMode.MARKDOWN_V2, reply_to_message_id=update.message.message_id)
        return CFG_QUIZ_NUM_QS

    async def cancel_quiz_cfg_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        final_message_text = escape_markdown_v2("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        quiz_cfg_msg_id = context.chat_data.pop('_quiz_cfg_msg_id', None)
        original_cmd_msg_id = context.chat_data.get('_quiz_cmd_msg_id')
        cfg_progress_data = context.chat_data.pop('quiz_cfg_progress', None)

        chat_id_for_ops: Optional[int] = None
        if cfg_progress_data and 'chat_id' in cfg_progress_data: chat_id_for_ops = cfg_progress_data['chat_id']
        elif query and query.message: chat_id_for_ops = query.message.chat_id
        elif update.message and update.message.chat: chat_id_for_ops = update.message.chat.id
        elif update.effective_chat: chat_id_for_ops = update.effective_chat.id

        if query:
            await query.answer()
            if query.message and quiz_cfg_msg_id == query.message.message_id and quiz_cfg_msg_id != original_cmd_msg_id:
                try: await query.edit_message_text(final_message_text, reply_markup=None, parse_mode=ParseMode.MARKDOWN_V2)
                except Exception: pass
            elif chat_id_for_ops :
                 if quiz_cfg_msg_id and quiz_cfg_msg_id != original_cmd_msg_id:
                     try: await context.bot.delete_message(chat_id_for_ops, quiz_cfg_msg_id)
                     except Exception: pass
                 try: await context.bot.send_message(chat_id_for_ops, final_message_text, parse_mode=ParseMode.MARKDOWN_V2)
                 except Exception: pass
        elif update.message: 
            if chat_id_for_ops:
                if quiz_cfg_msg_id and quiz_cfg_msg_id != original_cmd_msg_id: 
                    try: await context.bot.delete_message(chat_id_for_ops, quiz_cfg_msg_id)
                    except Exception: pass
                try: await context.bot.send_message(chat_id_for_ops, final_message_text, parse_mode=ParseMode.MARKDOWN_V2, reply_to_message_id=update.message.message_id)
                except Exception: pass
            elif update.effective_chat:
                try: await update.effective_chat.send_message(final_message_text, parse_mode=ParseMode.MARKDOWN_V2)
                except Exception: pass

        context.chat_data.clear()
        return ConversationHandler.END

    async def stop_quiz_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if not update.effective_chat or not update.effective_user or not update.message:
            return
        chat_id = update.effective_chat.id
        user_who_stopped = update.effective_user
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /{self.app_config.commands.stop_quiz} –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_who_stopped.id} ({user_who_stopped.full_name}) –≤ —á–∞—Ç–µ {chat_id}.")
        quiz_state = self.state.get_active_quiz(chat_id)
        if not quiz_state:
            await update.message.reply_text(escape_markdown_v2("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."), parse_mode=ParseMode.MARKDOWN_V2)
            return
        if quiz_state.is_stopping:
            await update.message.reply_text(escape_markdown_v2("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."), parse_mode=ParseMode.MARKDOWN_V2)
            return
        can_stop = await is_user_admin_in_update(update, context)
        if not can_stop and quiz_state.created_by_user_id == user_who_stopped.id and quiz_state.quiz_type != "daily":
            can_stop = True
        if not can_stop:
            await update.message.reply_text(escape_markdown_v2("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä (–∫—Ä–æ–º–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã) –º–æ–≥—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É."), parse_mode=ParseMode.MARKDOWN_V2)
            return

        quiz_state.is_stopping = True
        stop_confirm_msg = await update.message.reply_text(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {escape_markdown_v2(user_who_stopped.first_name)}\\. –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤\\.\\.\\.", parse_mode=ParseMode.MARKDOWN_V2)
        quiz_state.message_ids_to_delete.add(stop_confirm_msg.message_id) 

        await self._finalize_quiz_session(context, chat_id, was_stopped=True)

    def get_handlers(self) -> list:
        cancel_handler_for_conv = CommandHandler(self.app_config.commands.cancel, self.cancel_quiz_cfg_command)
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler(self.app_config.commands.quiz, self.quiz_command_entry)],
            states={
                CFG_QUIZ_OPTIONS: [CallbackQueryHandler(self.handle_quiz_cfg_callback, pattern=f"^{CB_QCFG_}")],
                CFG_QUIZ_NUM_QS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_typed_num_questions)],
            },
            fallbacks=[cancel_handler_for_conv],
            per_chat=True, per_user=True, name="quiz_interactive_setup_conv", persistent=True, allow_reentry=True
        )
        return [conv_handler, CommandHandler(self.app_config.commands.stop_quiz, self.stop_quiz_command)]

