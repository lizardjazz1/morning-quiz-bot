# handlers/quiz_session_handlers.py
import random
from datetime import datetime, timedelta, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from config import (logger, DEFAULT_POLL_OPEN_PERIOD, NUMBER_OF_QUESTIONS_IN_SESSION,
                    CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY_SHORT, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
                    CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY, # –≠—Ç–æ—Ç —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π
                    QUIZ10_NOTIFY_DELAY_MINUTES)
import state
from quiz_logic import (get_random_questions, get_random_questions_from_all,
                        send_next_question_in_session,
                        show_quiz_session_results)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Å—Å–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è quiz10 –∏ quiz10notify) ---
async def _initiate_quiz10_session(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    chat_id_str: str,
    user_id: int,
    category_name: str | None # Full category name is expected here
):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é /quiz10."""
    questions_for_session = []
    intro_message_part = ""

    if category_name:
        questions_for_session = get_random_questions(category_name, NUMBER_OF_QUESTIONS_IN_SESSION)
        intro_message_part = f"–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name}"
    else:
        questions_for_session = get_random_questions_from_all(NUMBER_OF_QUESTIONS_IN_SESSION)
        intro_message_part = "–∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"

    actual_number_of_questions = len(questions_for_session)
    if actual_number_of_questions == 0:
        # No questions found, need to send a message to the chat
        try:
            await context.bot.send_message(chat_id, f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è /quiz10 ({intro_message_part}).")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—É—Å—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —á–∞—Ç {chat_id}: {e}")
        return

    start_message_text = f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ {actual_number_of_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ ({intro_message_part})! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å!"
    if actual_number_of_questions < NUMBER_OF_QUESTIONS_IN_SESSION:
        start_message_text += f" (–ú–µ–Ω—å—à–µ {NUMBER_OF_QUESTIONS_IN_SESSION} –∑–∞–ø—Ä–æ—à–µ–Ω–æ, –¥–æ—Å—Ç—É–ø–Ω–æ {actual_number_of_questions})" # Adjusted wording

    try:
        intro_message = await context.bot.send_message(chat_id, start_message_text)
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–≤–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Ç {chat_id}: {e}", exc_info=True)
         # If we can't send the intro message, maybe we can't run the quiz? Let's log and return.
         return


    state.current_quiz_session[chat_id_str] = {
        "questions": questions_for_session,
        "session_scores": {},
        "current_index": 0,
        "actual_num_questions": actual_number_of_questions,
        "message_id_intro": intro_message.message_id if intro_message else None, # Handle case where intro_message failed
        "starter_user_id": str(user_id),
        "current_poll_id": None,
        "next_question_job": None,
        "category_used": category_name # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ø–æ–ª–Ω–æ–µ –∏–º—è)
    }
    logger.info(f"/quiz10 –Ω–∞ {actual_number_of_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ ({intro_message_part}) –∑–∞–ø—É—â–µ–Ω–∞ –≤ —á–∞—Ç–µ {chat_id_str} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.")
    await send_next_question_in_session(context, chat_id_str)


async def quiz10_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat:
        logger.warning("quiz10_command: message or effective_chat is None.")
        return

    chat_id_str = str(update.effective_chat.id)
    chat_id = update.effective_chat.id # Need int chat_id for context.chat_data

    if state.current_quiz_session.get(chat_id_str):
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞ /quiz10. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz.") # type: ignore
        return
    if state.pending_scheduled_quizzes.get(chat_id_str):
        await update.message.reply_text(f"–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∏–≥—Ä–∞ /quiz10notify. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz.") # type: ignore
        return

    if not state.quiz_data:
        await update.message.reply_text("–í–æ–ø—Ä–æ—Å—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ.") # type: ignore
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã
    available_categories = [cat_name for cat_name, q_list in state.quiz_data.items() if isinstance(q_list, list) and q_list]
    if not available_categories:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è /quiz10.") # type: ignore
        return

    keyboard = []
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö ID –Ω–∞ –ø–æ–ª–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º context.chat_data –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    # –ö–ª—é—á map'–∞ –ø—Ä–∏–≤—è–∂–µ–º –∫ chat_id.
    category_map_for_callback: Dict[str, str] = {}
    for i, cat_name in enumerate(available_categories):
        short_id = f"c{i}" # –ü—Ä–æ—Å—Ç–æ–π —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        category_map_for_callback[short_id] = cat_name
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –≤ callback_data —Å –Ω–æ–≤—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        callback_data = f"{CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY_SHORT}{short_id}"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback_data –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 64 –±–∞–π—Ç–∞ (—Ö–æ—Ç—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º ID —ç—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
        if len(callback_data.encode('utf-8')) > 64:
             logger.error(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π callback_data {callback_data} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat_name} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!")
             # –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π ID –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
             continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è

        keyboard.append([InlineKeyboardButton(cat_name, callback_data=callback_data)])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (callback_data —É–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–π)
    keyboard.append([InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY)])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ chat_data
    # –ö–ª—é—á: 'quiz10_cat_map_[chat_id_str]'
    context.chat_data[f"quiz10_cat_map_{chat_id_str}"] = category_map_for_callback
    logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ chat_data –¥–ª—è —á–∞—Ç–∞ {chat_id_str}.")

    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ /quiz10:', reply_markup=reply_markup) # type: ignore


async def handle_quiz10_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        logger.error("handle_quiz10_category_selection: query is None, —á—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å.")
        return

    await query.answer()

    if not query.message or not query.message.chat or not query.from_user:
        logger.warning("handle_quiz10_category_selection: message, chat or user is None in query.")
        return

    chat_id = query.message.chat.id
    chat_id_str = str(chat_id)
    user_id = query.from_user.id

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö ID –Ω–∞ –ø–æ–ª–Ω—ã–µ –∏–º–µ–Ω–∞ –∏ —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –µ–≥–æ
    category_map_for_callback: Dict[str, str] | None = context.chat_data.pop(f"quiz10_cat_map_{chat_id_str}", None)
    if category_map_for_callback:
        logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–¥–∞–ª–µ–Ω–∞ –∏–∑ chat_data –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è callback.")
    else:
        logger.warning(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ chat_data –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback. –í–µ—Ä–æ—è—Ç–Ω–æ, –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ –æ—à–∏–±–∫–∞.")
        # –ï—Å–ª–∏ map –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É—Å—Ç–∞—Ä–µ–ª–æ.
        # –ü—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ.
        message_text = "–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å /quiz10."
        try:
            await query.edit_message_text(text=message_text)
        except Exception as e:
            logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (map missing): {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                 await context.bot.send_message(chat_id, message_text)
            except Exception as e_send:
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e_send}")
        return # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –±—É–¥–µ—Ç –Ω–∞—á–∞—Ç–∞


    selected_category_name = None
    callback_data = query.data

    if callback_data == CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY:
        selected_category_name = None # Random category will be handled by _initiate_quiz10_session
        message_text = "–í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ù–∞—á–∏–Ω–∞–µ–º /quiz10..."
    elif callback_data and callback_data.startswith(CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY_SHORT):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –∏–∑ callback_data
        short_id = callback_data[len(CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY_SHORT):]
        # –ò—â–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ map
        selected_category_name = category_map_for_callback.get(short_id)
        if selected_category_name:
             message_text = f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{selected_category_name}'. –ù–∞—á–∏–Ω–∞–µ–º /quiz10..."
        else:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ ID '{short_id}' –≤ map –¥–ª—è —á–∞—Ç–∞ {chat_id_str}. Map –±—ã–ª –ø–æ–ª—É—á–µ–Ω, –Ω–æ ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
             message_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
             # Don't initiate quiz, return
             try:
                 await query.edit_message_text(text=message_text)
             except Exception as e:
                 logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (ID not in map): {e}")
                 await context.bot.send_message(chat_id, message_text)
             return
    else:
        # –≠—Ç–∞ –≤–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ pattern –≤ bot.py –∏–∑–º–µ–Ω–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback_data –≤ handle_quiz10_category_selection: {callback_data}. Callback data –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è '—Å–ª—É—á–∞–π–Ω—ã–º'.")
        message_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤—ã–±–æ—Ä–∞."
        # Don't initiate quiz, return
        try:
            await query.edit_message_text(text=message_text)
        except Exception as e:
             logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback_data: {e}")
             await context.bot.send_message(chat_id, message_text)
        return

    # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏—Ö –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_text, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≤—ã—à–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–æ
        await query.edit_message_text(text=message_text)
    except Exception as e:
        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
        try:
            await context.bot.send_message(chat_id, message_text)
        except Exception as e_send:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e_send}")


    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ (selected_category_name –Ω–µ None) –ò–õ–ò –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä (callback_data == CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 'selected_category_name is not None' –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID.
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 'callback_data == CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY' –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π "–°–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏".
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω_—Å–ª—É—á–∞–π–Ω—ã–π_–Ω–∞–±–æ—Ä (–≤—Ç–æ—Ä–æ–µ —É—Å–ª–æ–≤–∏–µ), —Ç–æ selected_category_name —Ä–∞–≤–Ω–æ None, —á—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è _initiate_quiz10_session.
    if selected_category_name is not None or callback_data == CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY:
         # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ None –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö) –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
         await _initiate_quiz10_session(context, chat_id, chat_id_str, user_id, selected_category_name)


async def quiz10notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç callback_data –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    if not update.message or not update.effective_chat or not update.effective_user:
        logger.warning("quiz10notify_command: message, chat or user is None.")
        return

    chat_id = update.effective_chat.id
    chat_id_str = str(chat_id)
    user_id = update.effective_user.id

    if state.current_quiz_session.get(chat_id_str):
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞ /quiz10. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz.") # type: ignore
        return
    if state.pending_scheduled_quizzes.get(chat_id_str):
        pending_info = state.pending_scheduled_quizzes[chat_id_str]
        scheduled_dt = pending_info.get("scheduled_time")
        time_left_str = "—Å–∫–æ—Ä–æ"
        if scheduled_dt and isinstance(scheduled_dt, datetime):
            now_utc = datetime.now(timezone.utc)
            if scheduled_dt > now_utc:
                time_left = scheduled_dt - now_utc
                time_left_str = f"–ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {max(1, int(time_left.total_seconds() / 60))} –º–∏–Ω."
            else:
                time_left_str = "–æ—á–µ–Ω—å —Å–∫–æ—Ä–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å)"

        await update.message.reply_text(f"–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∏–≥—Ä–∞ /quiz10notify (–Ω–∞—á–Ω–µ—Ç—Å—è {time_left_str}). –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz –¥–ª—è –æ—Ç–º–µ–Ω—ã.") # type: ignore
        return

    category_name_arg = " ".join(context.args) if context.args else None # type: ignore
    chosen_category_name = None
    category_display_name = "—Å–ª—É—á–∞–π–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"

    if not state.quiz_data:
        await update.message.reply_text("–í–æ–ø—Ä–æ—Å—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ.") # type: ignore
        return

    if category_name_arg:
        if category_name_arg in state.quiz_data and state.quiz_data[category_name_arg]:
            chosen_category_name = category_name_arg
            category_display_name = f"–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{chosen_category_name}'"
        else:
            await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name_arg}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –±—É–¥–µ—Ç –ø–æ —Å–ª—É—á–∞–π–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.") # type: ignore

    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–¥–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤
    if not chosen_category_name:
         all_questions_flat = [q for questions_in_category in state.quiz_data.values() if isinstance(questions_in_category, list) for q in questions_in_category]
         if not all_questions_flat:
             await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã.") # type: ignore
             return


    delay_seconds = QUIZ10_NOTIFY_DELAY_MINUTES * 60
    job_name = f"scheduled_quiz10_{chat_id_str}"

    # –î–ª—è job —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–±–æ –ø–æ–ª–Ω–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ª–∏–±–æ —Å—Ç—Ä–æ–∫—É "RANDOM"
    category_for_job = chosen_category_name if chosen_category_name else "RANDOM"

    job_context_data = {"chat_id": chat_id, "user_id": user_id, "category_name_in_job": category_for_job} # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –∫–ª—é—á –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏

    if context.job_queue:
        existing_jobs = context.job_queue.get_jobs_by_name(job_name)
        for old_job in existing_jobs:
            old_job.schedule_removal()
            logger.debug(f"–£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è/—Å—Ç–∞—Ä—ã–π job –¥–ª—è quiz10notify: {old_job.name}")

        context.job_queue.run_once(
            _start_scheduled_quiz10_job_callback,
            timedelta(seconds=delay_seconds),
            data=job_context_data,
            name=job_name
        )

        scheduled_time_utc = datetime.now(timezone.utc) + timedelta(seconds=delay_seconds)
        state.pending_scheduled_quizzes[chat_id_str] = {
            "job_name": job_name,
            "category_name": chosen_category_name, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–ª–∏ None
            "starter_user_id": str(user_id),
            "scheduled_time": scheduled_time_utc
        }

        await update.message.reply_text( # type: ignore
            f"üîî –ü—Ä–∏–Ω—è—Ç–æ! –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 –ø–æ {category_display_name} –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {QUIZ10_NOTIFY_DELAY_MINUTES} –º–∏–Ω.\n"
            "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz."
        )
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω /quiz10notify –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –ø–æ {category_display_name} —á–µ—Ä–µ–∑ {QUIZ10_NOTIFY_DELAY_MINUTES} –º–∏–Ω. Job: {job_name}")
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞: JobQueue –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.") # type: ignore
        logger.error("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ quiz10notify_command.")


async def _start_scheduled_quiz10_job_callback(context: ContextTypes.DEFAULT_TYPE):
    """Callback-—Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è JobQueue –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    if not context.job or not context.job.data:
        logger.error("_start_scheduled_quiz10_job_callback –≤—ã–∑–≤–∞–Ω –±–µ–∑ job data.")
        return

    job_data = context.job.data
    chat_id: int = job_data["chat_id"]
    chat_id_str = str(chat_id)
    user_id: int = job_data["user_id"]
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö job'–∞
    category_name_in_job: str | None = job_data.get("category_name_in_job")

    if chat_id_str not in state.pending_scheduled_quizzes:
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π quiz10 –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. Job –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return

    if state.current_quiz_session.get(chat_id_str):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π quiz10 –≤ —á–∞—Ç–µ {chat_id_str}, –Ω–æ —Ç–∞–º —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –¥—Ä—É–≥–∞—è —Å–µ—Å—Å–∏—è.")
        state.pending_scheduled_quizzes.pop(chat_id_str, None)
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –Ω–æ —ç—Ç–æ job, –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ message –¥–ª—è reply
        try:
            await context.bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: –≤ —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –¥—Ä—É–≥–∞—è –∏–≥—Ä–∞.")
        except Exception as e:
             logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ —Å–µ—Å—Å–∏–π –≤ —á–∞—Ç {chat_id}: {e}")
        return

    pending_info = state.pending_scheduled_quizzes.pop(chat_id_str, None)
    if pending_info:
         logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π quiz10 –¥–ª—è —á–∞—Ç–∞ {chat_id_str}. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ job: {category_name_in_job}")

    actual_category_name = None
    if category_name_in_job != "RANDOM":
        actual_category_name = category_name_in_job # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ job data

    await _initiate_quiz10_session(context, chat_id, chat_id_str, user_id, actual_category_name)


async def stop_quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if not update.message or not update.effective_user or not update.effective_chat:
        logger.warning("stop_quiz_command: message, user or chat is None.")
        return

    chat_id = update.effective_chat.id
    chat_id_str = str(chat_id)
    user_id_str = str(update.effective_user.id)

    user_is_admin = False
    if update.effective_chat.type != "private":
        try:
            chat_member = await context.bot.get_chat_member(chat_id_str, user_id_str)
            if chat_member.status in [chat_member.ADMINISTRATOR, chat_member.OWNER]: # type: ignore
                user_is_admin = True
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è {user_id_str} –≤ {chat_id_str}: {e}")

    stopped_something = False

    active_session = state.current_quiz_session.get(chat_id_str)
    if active_session:
        if user_is_admin or user_id_str == active_session.get("starter_user_id"):
            logger.info(f"/stopquiz –æ—Ç {user_id_str} –≤ {chat_id_str}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ /quiz10.")
            current_poll_id_in_session = active_session.get("current_poll_id")
            if current_poll_id_in_session and current_poll_id_in_session in state.current_poll:
                poll_message_id = state.current_poll[current_poll_id_in_session].get("message_id")
                if poll_message_id:
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø—Ä–æ—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await context.bot.stop_poll(chat_id_str, poll_message_id) # type: ignore
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ {current_poll_id_in_session} —á–µ—Ä–µ–∑ /stopquiz: {e}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ä–æ—á–Ω–æ –∏ –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            await show_quiz_session_results(context, chat_id_str, error_occurred=True)
            await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.") # type: ignore
            stopped_something = True
        else:
            await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –Ω–∞—á–∞–ª –∞–∫—Ç–∏–≤–Ω—É—é /quiz10, –º–æ–∂–µ—Ç –µ–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.") # type: ignore
            return # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π

    pending_quiz = state.pending_scheduled_quizzes.get(chat_id_str)
    if pending_quiz:
        if user_is_admin or user_id_str == pending_quiz.get("starter_user_id"):
            job_name = pending_quiz.get("job_name")
            if job_name and context.job_queue:
                jobs = context.job_queue.get_jobs_by_name(job_name)
                for job in jobs:
                    job.schedule_removal()
                    logger.info(f"–û—Ç–º–µ–Ω–µ–Ω –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π quiz (job: {job_name}) –≤ —á–∞—Ç–µ {chat_id_str} –∫–æ–º–∞–Ω–¥–æ–π /stopquiz –æ—Ç {user_id_str}.")

            state.pending_scheduled_quizzes.pop(chat_id_str, None)
            await update.message.reply_text("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10notify –æ—Ç–º–µ–Ω–µ–Ω–∞.") # type: ignore
            stopped_something = True
        else:
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—Ç.–µ. –ø—Ä–µ–¥—ã–¥—É—â–∏–π if –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
            if not active_session:
                 await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª /quiz10notify, –º–æ–∂–µ—Ç –µ–µ –æ—Ç–º–µ–Ω–∏—Ç—å.") # type: ignore
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –±—ã–ª–∞, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–ª –ø—Ä–∞–≤ –Ω–∞ –µ–µ –æ—Å—Ç–∞–Ω–æ–≤–∫—É,
            # –∏ —É –Ω–µ–≥–æ —Ç–æ–∂–µ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ã—à–µ.
            return # –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π

    if not stopped_something:
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω /quiz10 –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏/–æ—Ç–º–µ–Ω—ã.") # type: ignore

