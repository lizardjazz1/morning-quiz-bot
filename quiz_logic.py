# quiz_logic.py
import random
from typing import List, Dict, Any, Tuple
from datetime import timedelta
from telegram import Update, Poll
from telegram.ext import ContextTypes

from config import (logger, NUMBER_OF_QUESTIONS_IN_SESSION,
                    DEFAULT_POLL_OPEN_PERIOD, FINAL_ANSWER_WINDOW_SECONDS, JOB_GRACE_PERIOD)
import state
from utils import pluralize_points
from handlers.rating_handlers import get_player_display

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (get_random_questions, get_random_questions_from_all, prepare_poll_options) ---
# (–û—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def get_random_questions(category: str, count: int = 1) -> List[Dict[str, Any]]:
    cat_q_list = state.quiz_data.get(category)
    if not isinstance(cat_q_list, list) or not cat_q_list:
        return []
    return [q.copy() for q in random.sample(cat_q_list, min(count, len(cat_q_list)))]

def get_random_questions_from_all(count: int) -> List[Dict[str, Any]]:
    all_q = [q.copy() for questions_in_category in state.quiz_data.values() if isinstance(questions_in_category, list) for q in questions_in_category]
    if not all_q:
        return []
    return random.sample(all_q, min(count, len(all_q)))

def prepare_poll_options(q_details: Dict[str, Any]) -> Tuple[str, List[str], int, List[str]]:
    q_text, opts_orig = q_details["question"], q_details["options"]
    correct_answer_text = opts_orig[q_details["correct_option_index"]]
    opts_shuffled = list(opts_orig)
    random.shuffle(opts_shuffled)
    try:
        new_correct_idx = opts_shuffled.index(correct_answer_text)
    except ValueError:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ '{correct_answer_text}' –≤ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏—è—Ö: {opts_shuffled}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å.")
        return q_text, list(opts_orig), q_details["correct_option_index"], list(opts_orig)
    return q_text, opts_shuffled, new_correct_idx, list(opts_orig)


async def send_solution_if_available(context: ContextTypes.DEFAULT_TYPE, chat_id_str: str, question_details: Dict[str, Any], q_index_for_log: int = -1):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ."""
    solution = question_details.get("solution")
    q_text_for_header = question_details.get("question", "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É") # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∞
    log_q_ref_text = f"¬´{q_text_for_header[:30]}...¬ª" if len(q_text_for_header) > 30 else f"¬´{q_text_for_header}¬ª"
    log_q_ref_suffix = f" (–≤–æ–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏ {q_index_for_log + 1})" if q_index_for_log != -1 else ""
    log_q_ref = f"{log_q_ref_text}{log_q_ref_suffix}"

    if solution:
        try:
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
            solution_message = f"üí°{solution}" # –£–±—Ä–∞–Ω–∞ —á–∞—Å—Ç—å "–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É..."

            MAX_MESSAGE_LENGTH = 4096
            if len(solution_message) > MAX_MESSAGE_LENGTH:
                truncate_at = MAX_MESSAGE_LENGTH - 3
                solution_message = solution_message[:truncate_at] + "..."
                logger.warning(f"–ü–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {log_q_ref} –≤ —á–∞—Ç–µ {chat_id_str} –±—ã–ª–æ —É—Å–µ—á–µ–Ω–æ.")

            await context.bot.send_message(chat_id=chat_id_str, text=solution_message)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {log_q_ref} –≤ —á–∞—Ç–µ {chat_id_str}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {log_q_ref} –≤ —á–∞—Ç–µ {chat_id_str}: {e}", exc_info=True)

async def send_next_question_in_session(context: ContextTypes.DEFAULT_TYPE, chat_id_str: str):
    session = state.current_quiz_session.get(chat_id_str)
    if not session:
        logger.warning(f"send_next_question_in_session: –°–µ—Å—Å–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if job := session.get("next_question_job"):
        try: job.schedule_removal()
        except Exception: pass
        session["next_question_job"] = None

    current_q_idx = session["current_index"]
    actual_num_q = session["actual_num_questions"]

    if current_q_idx >= actual_num_q:
        # –≠—Ç–∞ –≤–µ—Ç–∫–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∑–¥–µ—Å—å, —Ç.–∫. show_quiz_session_results
        # –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ handle_current_poll_end –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
        logger.info(f"–í—Å–µ {actual_num_q} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ—Å—Å–∏–∏ {chat_id_str} –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. (–õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ handle_current_poll_end).")
        # await show_quiz_session_results(context, chat_id_str) # –£–±—Ä–∞–Ω–æ –æ—Ç—Å—é–¥–∞
        return

    q_details = session["questions"][current_q_idx]
    is_last_question = (current_q_idx == actual_num_q - 1)

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–µ—Å—Å–∏–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –≤—Ä–µ–º—è
    poll_open_period = DEFAULT_POLL_OPEN_PERIOD
    # poll_open_period = FINAL_ANSWER_WINDOW_SECONDS if is_last_question else DEFAULT_POLL_OPEN_PERIOD # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞

    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å send_next_question_in_session –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ –∫–æ–Ω—Ü–∞ try-except –±–ª–æ–∫–∞) ...
    poll_question_text_for_api = q_details['question']
    full_poll_question_header = f"–í–æ–ø—Ä–æ—Å {current_q_idx + 1}/{actual_num_q}"
    if original_cat := q_details.get("original_category"):
        full_poll_question_header += f" (–ö–∞—Ç: {original_cat})"
    full_poll_question_header += f"\n{poll_question_text_for_api}"

    MAX_POLL_QUESTION_LENGTH = 255
    if len(full_poll_question_header) > MAX_POLL_QUESTION_LENGTH:
        truncate_at = MAX_POLL_QUESTION_LENGTH - 3
        full_poll_question_header = full_poll_question_header[:truncate_at] + "..."
        logger.warning(f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è poll –≤ —á–∞—Ç–µ {chat_id_str} –±—ã–ª —É—Å–µ—á–µ–Ω.")

    _, poll_options, poll_correct_option_id, _ = prepare_poll_options(q_details)

    try:
        sent_poll_msg = await context.bot.send_poll(
            chat_id=chat_id_str, question=full_poll_question_header, options=poll_options,
            type=Poll.QUIZ, correct_option_id=poll_correct_option_id,
            open_period=poll_open_period, is_anonymous=False
        )
        session["current_poll_id"] = sent_poll_msg.poll.id
        session["current_index"] += 1
        state.current_poll[sent_poll_msg.poll.id] = {
            "chat_id": chat_id_str, "message_id": sent_poll_msg.message_id,
            "correct_index": poll_correct_option_id, "quiz_session": True,
            "question_details": q_details, "associated_quiz_session_chat_id": chat_id_str,
            "is_last_question": is_last_question,
            "next_q_triggered_by_answer": False, # –§–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π poll_answer_handler –±—É–¥–µ—Ç —Å—Ç–∞–≤–∏—Ç—å
            "question_session_index": current_q_idx
        }
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å {current_q_idx + 1}/{actual_num_q} —Å–µ—Å—Å–∏–∏ {chat_id_str}. Poll ID: {sent_poll_msg.poll.id}. Is last: {is_last_question}")

        job_delay_seconds = poll_open_period + JOB_GRACE_PERIOD
        job_name = f"poll_end_timeout_{chat_id_str}_{sent_poll_msg.poll.id}"
        if context.job_queue:
            existing_jobs = context.job_queue.get_jobs_by_name(job_name)
            for old_job in existing_jobs: old_job.schedule_removal()
            next_question_timeout_job = context.job_queue.run_once(
                handle_current_poll_end, timedelta(seconds=job_delay_seconds),
                data={"chat_id": chat_id_str, "ended_poll_id": sent_poll_msg.poll.id},
                name=job_name
            )
            session["next_question_job"] = next_question_timeout_job # –≠—Ç–æ—Ç job –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–π–º–∞—É—Ç –¢–ï–ö–£–©–ï–ì–û –≤–æ–ø—Ä–æ—Å–∞
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Ç–µ {chat_id_str}: {e}", exc_info=True)
        await show_quiz_session_results(context, chat_id_str, error_occurred=True)


async def handle_current_poll_end(context: ContextTypes.DEFAULT_TYPE):
    if not context.job or not context.job.data:
        logger.error("handle_current_poll_end –≤—ã–∑–≤–∞–Ω –±–µ–∑ job data.")
        return

    job_data = context.job.data
    chat_id_str: str = job_data["chat_id"]
    ended_poll_id: str = job_data["ended_poll_id"]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ, –ù–ï —É–¥–∞–ª—è—è –µ–≥–æ —Å—Ä–∞–∑—É –∏–∑ state.current_poll
    # –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ poll_answer_handler –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–ª–∞–≥ next_q_triggered_by_answer
    poll_info = state.current_poll.get(ended_poll_id)
    session = state.current_quiz_session.get(chat_id_str)

    if not session:
        logger.warning(f"–°–µ—Å—Å–∏—è {chat_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ job –¥–ª—è poll {ended_poll_id}. –û–ø—Ä–æ—Å –º–æ–≥ –±—ã—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —É–¥–∞–ª–µ–Ω.")
        # –ï—Å–ª–∏ poll_info –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –±–µ–∑ —Å–µ—Å—Å–∏–∏, –Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
        if poll_info and poll_info.get("question_details"):
            await send_solution_if_available(context, chat_id_str, poll_info["question_details"], poll_info.get("question_session_index", -1))
        state.current_poll.pop(ended_poll_id, None) # –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è
        return

    if not poll_info:
        # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ poll_answer_handler –¥–ª—è –ù–ï –ü–û–°–õ–ï–î–ù–ï–ì–û –≤–æ–ø—Ä–æ—Å–∞
        # —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –¥–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –£–î–ê–õ–ò–õ poll_info –¥–ª—è ended_poll_id.
        # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –¥–∞–Ω–Ω—ã–π job –¥–ª—è ended_poll_id –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.
        logger.info(f"Poll {ended_poll_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state.current_poll –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ job (–≤–µ—Ä–æ—è—Ç–Ω–æ, –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–æ—Å—Ä–æ—á–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å). Job –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return

    # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, poll_info —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    q_idx_from_poll_info = poll_info.get("question_session_index", -1)
    logger.info(f"Job 'handle_current_poll_end' —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —á–∞—Ç–∞ {chat_id_str}, poll_id {ended_poll_id} (–≤–æ–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏ ~{q_idx_from_poll_info + 1}).")

    # 1. –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–∏–≤—à–µ–≥–æ—Å—è –ø–æ —Ç–∞–π–º-–∞—É—Ç—É –æ–ø—Ä–æ—Å–∞
    await send_solution_if_available(context, chat_id_str, poll_info["question_details"], q_idx_from_poll_info)

    is_last_q = poll_info.get("is_last_question", False)

    # 2. –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
    if is_last_q:
        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, —Ç–æ —ç—Ç–æ—Ç job (—Ç–∞–π–º-–∞—É—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞) –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        logger.info(f"–í—Ä–µ–º—è –¥–ª—è –ü–û–°–õ–ï–î–ù–ï–ì–û –≤–æ–ø—Ä–æ—Å–∞ (–∏–Ω–¥–µ–∫—Å {q_idx_from_poll_info}, poll {ended_poll_id}) —Å–µ—Å—Å–∏–∏ {chat_id_str} –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        state.current_poll.pop(ended_poll_id, None) # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ–ø—Ä–æ—Å
        await show_quiz_session_results(context, chat_id_str)
    else: # –≠—Ç–æ –±—ã–ª –ù–ï –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
        if poll_info.get("next_q_triggered_by_answer"):
            # –î–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –ù–ï –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω poll_answer_handler,
            # –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å send_next_question_in_session –∏ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç poll_info.
            # –ù–æ —Ä–∞–∑ –º—ã –∑–¥–µ—Å—å –∏ poll_info —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–Ω–∞—á–∏—Ç poll_answer_handler –ù–ï —É–¥–∞–ª–∏–ª –µ–≥–æ.
            # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ poll_answer_handler –¢–û–õ–¨–ö–û –£–°–¢–ê–ù–û–í–ò–õ –§–õ–ê–ì.
            # –≠—Ç–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ poll_answer_handler, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ—Ç poll_info.
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–æ–º—É, —á—Ç–æ –µ—Å–ª–∏ poll_info –Ω–µ—Ç - –∑–Ω–∞—á–∏—Ç –µ–≥–æ —É–¥–∞–ª–∏–ª poll_answer_handler.
            # –ï—Å–ª–∏ poll_info –ï–°–¢–¨ - –∑–Ω–∞—á–∏—Ç poll_answer_handler –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –µ–≥–æ –¥–æ—Å—Ä–æ—á–Ω–æ (–∏–ª–∏ –Ω–µ —É–¥–∞–ª–∏–ª).

            # –ü–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º: poll_answer_handler –¥–ª—è –ù–ï –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –£–î–ê–õ–Ø–ï–¢ poll_info.
            # –ó–Ω–∞—á–∏—Ç, –µ—Å–ª–∏ –º—ã –∑–¥–µ—Å—å —Å poll_info, —Ç–æ next_q_triggered_by_answer –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∑–∞–ø—É—Å–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
            # –≠—Ç–æ—Ç –±–ª–æ–∫ (else: if poll_info.get("next_q_triggered_by_answer")) —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º,
            # —Ç–∞–∫ –∫–∞–∫ –µ—Å–ª–∏ next_q_triggered_by_answer=True –∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, —Ç–æ poll_info —É–∂–µ —É–¥–∞–ª–µ–Ω.

            # –ï—Å–ª–∏ —ç—Ç–æ—Ç –ù–ï –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç–æ –∏—Å—Ç–µ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (next_q_triggered_by_answer == False)
            logger.info(f"–¢–∞–π–º-–∞—É—Ç –¥–ª—è –ù–ï –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–∏–Ω–¥–µ–∫—Å {q_idx_from_poll_info}, poll {ended_poll_id}) –≤ —Å–µ—Å—Å–∏–∏ {chat_id_str}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π.")
            state.current_poll.pop(ended_poll_id, None) # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ–ø—Ä–æ—Å
            await send_next_question_in_session(context, chat_id_str)
        else: # poll_info.get("next_q_triggered_by_answer") is False
            logger.info(f"–¢–∞–π–º-–∞—É—Ç –¥–ª—è –ù–ï –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–∏–Ω–¥–µ–∫—Å {q_idx_from_poll_info}, poll {ended_poll_id}) –≤ —Å–µ—Å—Å–∏–∏ {chat_id_str} (–±–µ–∑ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞). –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π.")
            state.current_poll.pop(ended_poll_id, None) # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ–ø—Ä–æ—Å
            await send_next_question_in_session(context, chat_id_str)


async def handle_single_quiz_poll_end(context: ContextTypes.DEFAULT_TYPE):
    # (–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–π–º–∞—É—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–≤–∏–∑–∞
    # –∏ –≤—ã–∑—ã–≤–∞–µ—Ç send_solution_if_available, —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è)
    if not context.job or not context.job.data:
        logger.error("handle_single_quiz_poll_end: Job data missing.")
        return

    job_data = context.job.data
    chat_id_str: str = job_data["chat_id_str"]
    poll_id: str = job_data["poll_id"]
    logger.info(f"Job 'handle_single_quiz_poll_end' —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è poll_id {poll_id} –≤ —á–∞—Ç–µ {chat_id_str}.")

    poll_info = state.current_poll.pop(poll_id, None) # Pop –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    if poll_info:
        question_details = poll_info.get("question_details")
        is_quiz_session_poll = poll_info.get("quiz_session", False)
        if not is_quiz_session_poll and question_details and question_details.get("solution"):
            try:
                await send_solution_if_available(context, chat_id_str, question_details) # q_index_for_log=-1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                logger.info(f"–ü–æ—è—Å–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–≤–∏–∑–∞ (poll {poll_id}) –≤ —á–∞—Ç–µ {chat_id_str} –ø–æ —Ç–∞–π–º–∞—É—Ç—É.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–≤–∏–∑–∞ (poll {poll_id}) –≤ —á–∞—Ç–µ {chat_id_str} –ø–æ —Ç–∞–π–º–∞—É—Ç—É: {e}", exc_info=True)
        logger.info(f"–û–¥–∏–Ω–æ—á–Ω—ã–π –∫–≤–∏–∑ (poll {poll_id}) –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ state.current_poll –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞.")
    else:
        logger.warning(f"handle_single_quiz_poll_end: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è poll_id {poll_id} (—á–∞—Ç {chat_id_str}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ—è—Å–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

async def show_quiz_session_results(context: ContextTypes.DEFAULT_TYPE, chat_id_str: str, error_occurred: bool = False):
    # (–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–≤–æ–µ–π –ª–æ–≥–∏–∫–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –µ–µ –≤—ã–∑–æ–≤ –±—É–¥–µ—Ç –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö/–≤—Ä–µ–º–µ–Ω–∏)
    session = state.current_quiz_session.get(chat_id_str)
    if not session:
        logger.warning(f"show_quiz_session_results: –°–µ—Å—Å–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        state.current_quiz_session.pop(chat_id_str, None)
        return

    if job := session.get("next_question_job"): # Job –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π, —Ç–æ —ç—Ç–æ job –¥–ª—è –µ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞)
        try:
            job.schedule_removal()
            session["next_question_job"] = None
        except Exception: pass
    
    # –ï—Å–ª–∏ –±—ã–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π job –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–µ—Å–ª–∏ –±—ã –º—ã –µ–≥–æ –≤–≤–æ–¥–∏–ª–∏), –µ–≥–æ —Ç–æ–∂–µ –Ω–∞–¥–æ –æ—Ç–º–µ–Ω–∏—Ç—å.
    # –ù–æ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–µ (–≥–¥–µ —Ç–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã), —ç—Ç–æ–≥–æ –Ω–µ—Ç.

    num_q_in_session = session.get("actual_num_questions", NUMBER_OF_QUESTIONS_IN_SESSION)
    results_header = "üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üèÅ\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏:\n" if not error_occurred else "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.\n\n–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏:\n"
    results_body = ""
    if not session.get("session_scores"):
        results_body = "–í —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –∏–ª–∏ –Ω–µ –Ω–∞–±—Ä–∞–ª –æ—á–∫–æ–≤."
    else:
        sorted_session_participants = sorted(
            session["session_scores"].items(),
            key=lambda item: (-item[1].get("score", 0), item[1].get("name", "").lower())
        )
        for rank, (user_id, data) in enumerate(sorted_session_participants):
            user_name = data.get("name", f"User {user_id}")
            session_score = data.get("score", 0)
            global_score_data = state.user_scores.get(chat_id_str, {}).get(user_id, {})
            global_score = global_score_data.get("score", 0)
            rank_prefix = f"{rank + 1}."
            session_display = get_player_display(user_name, session_score, separator=":")
            results_body += (f"{rank_prefix} {session_display} (–∏–∑ {num_q_in_session} –≤–æ–ø—Ä.)\n"
                             f"    –û–±—â–∏–π —Å—á—ë—Ç –≤ —á–∞—Ç–µ: {pluralize_points(global_score)}\n")
        if len(sorted_session_participants) > 3:
             results_body += "\n–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏!"
    try:
        await context.bot.send_message(chat_id=chat_id_str, text=results_header + results_body)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Ç {chat_id_str}: {e}", exc_info=True)

    current_poll_id_of_session = session.get("current_poll_id") # –≠—Ç–æ poll_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if current_poll_id_of_session and current_poll_id_of_session in state.current_poll:
        poll_data_to_check = state.current_poll.get(current_poll_id_of_session)
        if poll_data_to_check and poll_data_to_check.get("quiz_session") and poll_data_to_check.get("associated_quiz_session_chat_id") == chat_id_str:
            state.current_poll.pop(current_poll_id_of_session, None)
            logger.debug(f"Poll {current_poll_id_of_session} (—Å–µ—Å—Å–∏—è) —É–¥–∞–ª–µ–Ω –∏–∑ state.current_poll –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ {chat_id_str}.")

    state.current_quiz_session.pop(chat_id_str, None)
    logger.info(f"–°–µ—Å—Å–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –æ—á–∏—â–µ–Ω–∞.")
