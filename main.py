import logging
import os
import json
from telegram import Update, Poll
from telegram.ext import ApplicationBuilder, CommandHandler, PollAnswerHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from dotenv import load_dotenv
import random
import threading

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
def load_questions():
    try:
        with open('questions.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def load_user_data():
    if not os.path.exists('users.json'):
        save_user_data({}) # Create users.json if it doesn't exist
    try:
        with open('users.json', 'r', encoding='utf-8') as f:
            # Handle empty file case
            content = f.read()
            if not content:
                return {}
            return json.loads(content)
    except (json.JSONDecodeError, Exception) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        # If error, try to save an empty dict and return it
        save_user_data({})
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def save_user_data(data):
    with open('users.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –¥–ª—è Replit
def keep_alive():
    print("‚è∞ –ë–æ—Ç –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    # Use a daemon thread for keep_alive so it doesn't block shutdown
    timer = threading.Timer(7200, keep_alive)
    timer.daemon = True # Allow main program to exit even if timer is running
    timer.start()

if os.getenv("REPLIT_ENVIRONMENT") or os.getenv("REPLIT_CLUSTER"): # Check common Replit env vars
    keep_alive()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
quiz_data = load_questions()
user_scores = load_user_data()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
current_poll = {}  # {poll_id: {"chat_id": ..., "correct_index": ..., "message_id": ..., "quiz_session": True/False}}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∫–≤–∏–∑–∞ –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
current_quiz_session = {}
# Structure for current_quiz_session[chat_id_str]:
# {
#     "questions": [...],            # List of questions for this session
#     "session_scores": {            # Scores for THIS specific 10-question quiz
#         # user_id_str: {"name": "User Name", "score": 0}
#     },
#     "current_index": 0,            # Index of the next question to be sent
# }

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id_str = str(update.message.chat_id)
    user_id_str = str(update.effective_user.id) # Ensure user_id is string for consistency
    user_name = update.effective_user.full_name

    if chat_id_str not in user_scores:
        user_scores[chat_id_str] = {}
    if user_id_str not in user_scores[chat_id_str]:
        user_scores[chat_id_str][user_id_str] = {"name": user_name, "score": 0}
        save_user_data(user_scores)
        await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —É—Ç—Ä–µ–Ω–Ω—é—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        # Update name if it changed, preserve score
        user_scores[chat_id_str][user_id_str]["name"] = user_name
        save_user_data(user_scores)
        await update.message.reply_text(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —É—Ç—Ä–µ–Ω–Ω—é—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")

    logging.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω/–∑–∞–ø—É—â–µ–Ω –≤ —á–∞—Ç–µ {chat_id_str} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name} ({user_id_str})")

    active_chats = context.bot_data.get("active_chats", set())
    active_chats.add(chat_id_str) # chat_id_str is already a string
    context.bot_data["active_chats"] = active_chats

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤)
async def send_daily_quiz(context: ContextTypes.DEFAULT_TYPE): # Renamed for clarity
    active_chats = context.bot_data.get("active_chats", set())
    if not active_chats:
        logging.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
        return
    if not quiz_data:
        logging.warning("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
        for cid_str in active_chats:
            try:
                await context.bot.send_message(chat_id=int(cid_str), text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Ç {cid_str}: {e}")
        return

    categories = list(quiz_data.keys())
    if not categories:
        logging.warning("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç—ã.")
        return
    category = random.choice(categories)
    if not quiz_data[category]:
        logging.warning(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} –ø—É—Å—Ç–∞.")
        return

    question_data = random.choice(quiz_data[category])
    options = question_data["options"]
    correct_answer = question_data["correct"]

    for cid_str in active_chats:
        try:
            cid = int(cid_str) # API expects integer chat_id
            message = await context.bot.send_poll(
                chat_id=cid,
                question=f"‚òÄÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å:\n{question_data['question']}",
                options=options,
                type=Poll.QUIZ,
                correct_option_id=options.index(correct_answer),
                is_anonymous=False,
                explanation=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
            )
            poll_id = message.poll.id
            correct_index = options.index(correct_answer)
            current_poll[poll_id] = {
                "chat_id": str(cid), # Store as string for consistency with other IDs
                "correct_index": correct_index,
                "message_id": message.message_id,
                "quiz_session": False # This is a single daily quiz, not part of /quiz10
            }
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç {cid_str}: {e}")
            if "chat not found" in str(e).lower() or "bot was blocked by the user" in str(e).lower():
                logging.info(f"–£–¥–∞–ª—è—é –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç {cid_str} –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏.")
                active_chats.discard(cid_str)
                context.bot_data["active_chats"] = active_chats


# –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞
def get_quiz_questions(count=10):
    all_questions = []
    for category_questions in quiz_data.values(): # Iterate through lists of questions
        all_questions.extend(category_questions)
    if not all_questions:
        return []
    # Ensure we don't try to sample more questions than available
    return random.sample(all_questions, min(count, len(all_questions)))

# –ö–æ–º–∞–Ω–¥–∞ /quiz ‚Äî –≤—Ä—É—á–Ω—É—é –∑–∞–ø—É—Å–∫–∞–µ—Ç –û–î–ò–ù —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¢–û–õ–¨–ö–û –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
async def manual_single_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id_str = str(update.message.chat_id)

    if not quiz_data:
        await update.message.reply_text("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã üòï")
        return

    categories = list(quiz_data.keys())
    if not categories:
        await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç—ã.")
        return
    category = random.choice(categories)
    if not quiz_data[category]: # Check if the chosen category has questions
        await update.message.reply_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É.")
        return


    question_data = random.choice(quiz_data[category])
    options = question_data["options"]
    correct_answer = question_data["correct"]

    await update.message.reply_text("üß† –ó–∞–ø—É—Å–∫–∞—é –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å...")
    try:
        message = await context.bot.send_poll(
            chat_id=int(chat_id_str),
            question=question_data["question"],
            options=options,
            type=Poll.QUIZ,
            correct_option_id=options.index(correct_answer),
            is_anonymous=False,
            explanation=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
        )
        poll_id = message.poll.id
        correct_index = options.index(correct_answer)
        current_poll[poll_id] = {
            "chat_id": chat_id_str,
            "correct_index": correct_index,
            "message_id": message.message_id,
            "quiz_session": False # Not part of /quiz10
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä—É—á–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç {chat_id_str}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /quiz10 ‚Äî —Å–µ—Ä–∏—è –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
async def start_quiz10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id_str = str(update.message.chat_id)

    if chat_id_str in current_quiz_session:
        await update.message.reply_text("–°–µ—Ä–∏—è –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ —É–∂–µ –∏–¥–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz10 –¥–ª—è –æ—Ç–º–µ–Ω—ã (–µ—Å–ª–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞).")
        return

    questions_needed = 10
    questions = get_quiz_questions(questions_needed)
    if not questions or len(questions) < questions_needed :
        await update.message.reply_text(f"–ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑ ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {questions_needed}, –Ω–∞–π–¥–µ–Ω–æ {len(questions)}) üòï")
        return

    current_quiz_session[chat_id_str] = {
        "questions": questions,
        "session_scores": {}, # Stores {user_id_str: {"name": name, "score": 0}} for this session
        "current_index": 0
    }
    await update.message.reply_text(f"üìö –°–µ—Ä–∏—è –∏–∑ {questions_needed} –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å! üß†\n–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≤ –∫–æ–Ω—Ü–µ.")
    await send_next_quiz10_question(chat_id_str, context)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–∏–∏ /quiz10
async def send_next_quiz10_question(chat_id_str: str, context: ContextTypes.DEFAULT_TYPE):
    session = current_quiz_session.get(chat_id_str)

    if not session: # Session might have been cleaned up or never existed
        logging.warning(f"send_next_quiz10_question: –°–µ—Å—Å–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if session["current_index"] >= len(session["questions"]):
        # All questions sent, show final group results
        await show_quiz10_final_group_results(chat_id_str, context)
        if chat_id_str in current_quiz_session: # Clean up session
             del current_quiz_session[chat_id_str]
             logging.info(f"–°–µ—Å—Å–∏—è /quiz10 –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞.")
        return

    question_data = session["questions"][session["current_index"]]
    options = question_data["options"]
    correct_answer = question_data["correct"]

    try:
        message = await context.bot.send_poll(
            chat_id=int(chat_id_str), # API expects int
            question=f"üìå –í–æ–ø—Ä–æ—Å {session['current_index'] + 1}/{len(session['questions'])}:\n{question_data['question']}",
            options=options,
            type=Poll.QUIZ,
            correct_option_id=options.index(correct_answer),
            is_anonymous=False,
            explanation=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}" # Show correct answer after voting
        )
        poll_id = message.poll.id
        correct_index = options.index(correct_answer)
        current_poll[poll_id] = {
            "chat_id": chat_id_str,
            "correct_index": correct_index,
            "message_id": message.message_id,
            "quiz_session": True  # This is part of a /quiz10 series
        }
        session["current_index"] += 1
        # Do NOT save current_quiz_session here, it's stateful in memory during the quiz
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–∏–∏ /quiz10 –≤ —á–∞—Ç {chat_id_str}: {e}")
        await context.bot.send_message(chat_id=int(chat_id_str), text="‚ùå –ù–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–µ—Ä–∏—é ‚Äî –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.")
        if chat_id_str in current_quiz_session: # Clean up session on error
             del current_quiz_session[chat_id_str]
             logging.info(f"–°–µ—Å—Å–∏—è /quiz10 –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å
async def handle_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.poll_answer
    poll_id = answer.poll_id
    user_id_str = str(answer.user.id)
    user_name = answer.user.full_name # Or use answer.user.first_name etc.

    poll_info = current_poll.get(poll_id)
    if not poll_info:
        # This can happen if the poll is old, or bot restarted and lost current_poll state
        # or if it's an answer to a poll not managed by this logic (e.g. manually created by user)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π, —Å—Ç–∞—Ä—ã–π –∏–ª–∏ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –æ–ø—Ä–æ—Å {poll_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} ({user_id_str}). –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        return

    chat_id_str = poll_info["chat_id"]
    correct_index = poll_info["correct_index"]
    is_quiz_session = poll_info.get("quiz_session", False)

    selected_option_id = answer.option_ids[0] if answer.option_ids else -1 # Handle no option selected

    # Ensure user is in global scores (should be by /start, but as a fallback)
    if chat_id_str not in user_scores:
        user_scores[chat_id_str] = {}
    if user_id_str not in user_scores[chat_id_str]:
        user_scores[chat_id_str][user_id_str] = {"name": user_name, "score": 0}
    else: # Ensure name is up-to-date
        user_scores[chat_id_str][user_id_str]["name"] = user_name


    is_correct = (selected_option_id == correct_index)

    if is_correct:
        user_scores[chat_id_str][user_id_str]["score"] += 1
        # Telegram's Poll.QUIZ type automatically shows correctness to the user who voted.
        # No need for an extra "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!" message from the bot here.
    # else:
        # Telegram also shows incorrectness.

    save_user_data(user_scores) # Save global score update

    if is_quiz_session and chat_id_str in current_quiz_session:
        session = current_quiz_session[chat_id_str]

        # Update session_scores for the /quiz10
        if user_id_str not in session["session_scores"]:
            session["session_scores"][user_id_str] = {"name": user_name, "score": 0}
        else: # Update name in case it changed
             session["session_scores"][user_id_str]["name"] = user_name

        if is_correct:
            session["session_scores"][user_id_str]["score"] += 1

        # The "first answerer advances the quiz" logic:
        # If this poll_id is still in current_poll, it means this is the first answer
        # (or first processed answer) for THIS poll message.
        if poll_id in current_poll:
            del current_poll[poll_id] # Mark this poll message as "handled" for advancing.
            # Only the first answer to a specific poll message triggers the next question.
            await send_next_quiz10_question(chat_id_str, context)
        # If poll_id was already deleted, it means another user's answer to the *same poll message*
        # (or a concurrent processing of another answer) already triggered the next question.
        # This user's score is recorded, but they don't advance the quiz further from this specific answer.

# –ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –°–ï–†–ò–ò /quiz10
async def show_quiz10_final_group_results(chat_id_str: str, context: ContextTypes.DEFAULT_TYPE):
    session = current_quiz_session.get(chat_id_str) # This should be called *before* session is deleted
    if not session:
        logging.warning(f"show_quiz10_final_group_results: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Ç–µ {chat_id_str}")
        # Optionally send a message if this state is reached unexpectedly
        # await context.bot.send_message(chat_id=int(chat_id_str), text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return

    session_scores_data = session.get("session_scores", {})
    num_questions_in_session = len(session.get("questions", [])) # Get actual number of questions in session

    if num_questions_in_session == 0: # Should not happen if quiz started correctly
        logging.error(f"show_quiz10_final_group_results: –í —Å–µ—Å—Å–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id_str} 0 –≤–æ–ø—Ä–æ—Å–æ–≤.")
        await context.bot.send_message(chat_id=int(chat_id_str), text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
        return

    if not session_scores_data:
        await context.bot.send_message(chat_id=int(chat_id_str), text=f"üèÅ –°–µ—Ä–∏—è –∏–∑ {num_questions_in_session} –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
        return

    results_list = []
    for user_id, data in session_scores_data.items():
        user_name = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫")
        session_score = data.get("score", 0)
        # Fetch the latest global score
        global_score_entry = user_scores.get(chat_id_str, {}).get(user_id, {"score": 0, "name": user_name})
        global_score = global_score_entry["score"]
        results_list.append({"name": user_name, "session_score": session_score, "global_score": global_score})

    # Sort by session_score (descending), then by global_score (descending as tie-breaker), then name
    results_list.sort(key=lambda x: (-x["session_score"], -x["global_score"], x["name"]))

    result_text = f"üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Ä–∏–∏ –∏–∑ {num_questions_in_session} –≤–æ–ø—Ä–æ—Å–æ–≤: üèÅ\n\n"
    for idx, res_data in enumerate(results_list, 1):
        s_score = res_data['session_score']
        g_score = res_data['global_score']
        name = res_data['name']

        emoji = ""
        if idx == 1 and s_score > 0: emoji = "üèÜ "
        elif idx == 2 and s_score > 0: emoji = "ü•à "
        elif idx == 3 and s_score > 0: emoji = "ü•â "
        elif s_score == num_questions_in_session: emoji = "üéâ " # Perfect score
        elif s_score >= num_questions_in_session * 0.7: emoji = "‚ú® "
        elif s_score >= num_questions_in_session * 0.5: emoji = "üëè "
        else: emoji = "üëç "


        result_text += f"{idx}. {emoji}{name} ‚Äî {s_score}/{num_questions_in_session}\n"
        result_text += f"   (–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {g_score} –æ—á–∫–æ–≤)\n"

    result_text += "\nüî• –ú–æ–ª–æ–¥—Ü—ã! –¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ –µ—â—ë –±–æ–ª—å—à–µ!"

    await context.bot.send_message(chat_id=int(chat_id_str), text=result_text)
    logging.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è /quiz10 –≤ —á–∞—Ç–µ {chat_id_str}")

# –ö–æ–º–∞–Ω–¥–∞ /rating ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
async def rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id_str = str(update.message.chat_id)
    scores_in_chat = user_scores.get(chat_id_str, {})

    if not scores_in_chat:
        await update.message.reply_text("–ù–∏–∫—Ç–æ –µ—â—ë –Ω–µ –æ—Ç–≤–µ—á–∞–ª –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç.")
        return

    # Create a list of tuples (user_id, name, score) for sorting
    # Ensure names are up-to-date from the primary user_scores storage
    sorted_participants = []
    for user_id, data in scores_in_chat.items():
        sorted_participants.append({
            "id": user_id,
            "name": data.get("name", f"–ò–≥—Ä–æ–∫ {user_id[:4]}..."), # Fallback name
            "score": data.get("score", 0)
        })

    # Sort by score descending, then by name alphabetically as a tie-breaker
    sorted_participants.sort(key=lambda item: (-item['score'], item['name']))

    rating_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (–æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥):\n"
    if not sorted_participants: # Should be caught by `if not scores_in_chat` but as a safeguard
        await update.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    for idx, data in enumerate(sorted_participants, 1):
        medal = ""
        if idx == 1: medal = "ü•á "
        elif idx == 2: medal = "ü•à "
        elif idx == 3: medal = "ü•â "
        rating_text += f"{idx}. {medal}{data['name']} ‚Äî {data['score']} –æ—á–∫–æ–≤\n"

    await update.message.reply_text(rating_text)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    print("üîß –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    if not TOKEN:
        logging.error("‚ùå –¢–æ–∫–µ–Ω BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        raise ValueError("–¢–æ–∫–µ–Ω BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    if not quiz_data:
        logging.warning("‚ö†Ô∏è –§–∞–π–ª questions.json –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –ø—É—Å—Ç. –í–∏–∫—Ç–æ—Ä–∏–Ω—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        # You might want to exit or prevent quiz commands if questions are essential and missing.
        # For now, it will just log a warning.

    print(f"‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {TOKEN[:5]}...{TOKEN[-5:]}")
    application = ApplicationBuilder().token(TOKEN).build()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_scores –∏ active_chats –≤ bot_data –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ (–µ—Å–ª–∏ PTB —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
    # –û–¥–Ω–∞–∫–æ, –¥–ª—è JSON —Ñ–∞–π–ª–æ–≤, –ª—É—á—à–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å, –∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.
    # `bot_data` –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏, –Ω–æ –¥–ª—è `user_scores` —É –Ω–∞—Å –µ—Å—Ç—å `users.json`.
    # `active_chats` –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ —Ñ–∞–π–ª–µ.
    # For now, active_chats will reset on bot restart unless explicitly saved/loaded.

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("quiz", manual_single_quiz)) # For one random question
    application.add_handler(CommandHandler("quiz10", start_quiz10))
    application.add_handler(CommandHandler("rating", rating))
    application.add_handler(PollAnswerHandler(handle_poll_answer))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º –æ–∂–∏–¥–∞–Ω–∏—è–º.
    # –ù–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow', 'UTC', 'Asia/Yekaterinburg'
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å timezone, APScheduler –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å,
    # —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö —Å –¥—Ä—É–≥–∏–º TZ.
    try:
        scheduler = BackgroundScheduler(timezone="Europe/Moscow") # –ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        scheduler.add_job(send_daily_quiz, 'cron', hour=8, minute=0, args=[application])
        scheduler.start()
        print("‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 08:00 (–ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É).")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")


    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling()
