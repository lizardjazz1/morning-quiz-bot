# handlers/quiz_session_handlers.py
import random
from datetime import datetime, timedelta, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes # JobQueue –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é

from config import (logger, NUMBER_OF_QUESTIONS_IN_SESSION,
                    CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY_SHORT,
                    CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY,
                    QUIZ10_NOTIFY_DELAY_MINUTES)
import state
from quiz_logic import (get_random_questions, get_random_questions_from_all,
                        send_next_question_in_session,
                        show_quiz_session_results) # prepare_poll_options –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Å—Å–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è quiz10 –∏ quiz10notify) ---
async def _initiate_quiz10_session(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int, # –ò—Å–ø–æ–ª—å–∑—É–µ–º int –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å context.bot.send_message
    chat_id_str: str, # –°—Ç—Ä–æ–∫–∞ –¥–ª—è –∫–ª—é—á–µ–π –≤ state
    user_id: int,
    category_name: str | None # –ü–æ–ª–Ω–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ None –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö
):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é /quiz10."""
    questions_for_session = []
    intro_message_part = ""
    reply_text_to_send = "" # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö

    if category_name:
        questions_for_session = get_random_questions(category_name, NUMBER_OF_QUESTIONS_IN_SESSION)
        intro_message_part = f"–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name}"
    else:
        questions_for_session = get_random_questions_from_all(NUMBER_OF_QUESTIONS_IN_SESSION)
        intro_message_part = "–∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"

    actual_number_of_questions = len(questions_for_session)
    if actual_number_of_questions == 0:
        reply_text_to_send = f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è /quiz10 ({intro_message_part}). –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –±—É–¥–µ—Ç –Ω–∞—á–∞—Ç–∞."
        logger.debug(f"Attempting to send message to {chat_id_str} (_initiate_quiz10_session, no questions). Text: '{reply_text_to_send}'")
        try:
            await context.bot.send_message(chat_id=chat_id, text=reply_text_to_send)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—É—Å—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —á–∞—Ç {chat_id_str} (initiate_quiz10): {e}")
        return

    start_message_text = f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ {actual_number_of_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ ({intro_message_part})! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å!"
    if actual_number_of_questions < NUMBER_OF_QUESTIONS_IN_SESSION:
        # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏–∑-–∑–∞ actual_number_of_questions
        pass

    intro_message = None
    logger.debug(f"Attempting to send intro message for /quiz10 to {chat_id_str}. Text: '{start_message_text}'")
    try:
        intro_message = await context.bot.send_message(chat_id=chat_id, text=start_message_text)
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–≤–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Ç {chat_id_str}: {e}", exc_info=True)
         # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ç—Ä–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ —Å—Ç–æ–∏—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
         return

    state.current_quiz_session[chat_id_str] = {
        "questions": questions_for_session,
        "session_scores": {},
        "current_index": 0, # –ò–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
        "actual_num_questions": actual_number_of_questions,
        "message_id_intro": intro_message.message_id if intro_message else None,
        "starter_user_id": str(user_id), # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        "current_poll_id": None, # ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        "next_question_job": None, # Job –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ / –∑–∞–ø—É—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ
        "category_used": category_name
    }
    logger.info(f"/quiz10 –Ω–∞ {actual_number_of_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ ({intro_message_part}) –∑–∞–ø—É—â–µ–Ω–∞ –≤ —á–∞—Ç–µ {chat_id_str} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.")
    await send_next_question_in_session(context, chat_id_str) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å

async def quiz10_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat:
        logger.warning("quiz10_command: message or effective_chat is None.")
        return

    chat_id_str = str(update.effective_chat.id)
    chat_id_int = update.effective_chat.id # –î–ª—è context.chat_data
    reply_text_to_send = ""

    if state.current_quiz_session.get(chat_id_str):
        reply_text_to_send = "–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞ /quiz10. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz."
        logger.debug(f"Attempting to send message to {chat_id_str} (quiz10_command blocked by active session). Text: '{reply_text_to_send}'")
        await update.message.reply_text(reply_text_to_send)
        return
    if state.pending_scheduled_quizzes.get(chat_id_str):
        reply_text_to_send = f"–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∏–≥—Ä–∞ /quiz10notify. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz."
        logger.debug(f"Attempting to send message to {chat_id_str} (quiz10_command blocked by pending session). Text: '{reply_text_to_send}'")
        await update.message.reply_text(reply_text_to_send)
        return

    if not state.quiz_data:
        reply_text_to_send = "–í–æ–ø—Ä–æ—Å—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ."
        logger.debug(f"Attempting to send message to {chat_id_str} (quiz10_command, no questions loaded). Text: '{reply_text_to_send}'")
        await update.message.reply_text(reply_text_to_send)
        return

    available_categories = [cat_name for cat_name, q_list in state.quiz_data.items() if isinstance(q_list, list) and q_list]
    if not available_categories:
        reply_text_to_send = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è /quiz10."
        logger.debug(f"Attempting to send message to {chat_id_str} (quiz10_command, no categories with questions). Text: '{reply_text_to_send}'")
        await update.message.reply_text(reply_text_to_send)
        return

    keyboard = []
    category_map_for_callback: Dict[str, str] = {}
    for i, cat_name in enumerate(sorted(available_categories)): # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∫–Ω–æ–ø–æ–∫
        short_id = f"c{i}"
        category_map_for_callback[short_id] = cat_name
        callback_data = f"{CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY_SHORT}{short_id}"
        if len(callback_data.encode('utf-8')) > 64: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã callback_data
             logger.error(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π callback_data '{callback_data}' –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{cat_name}' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ü—Ä–æ–ø—É—Å–∫ –∫–Ω–æ–ø–∫–∏.")
             continue
        keyboard.append([InlineKeyboardButton(cat_name, callback_data=callback_data)])

    keyboard.append([InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY)])
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ chat_data
    chat_data_key = f"quiz10_cat_map_{chat_id_str}"
    context.chat_data[chat_data_key] = category_map_for_callback
    logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ chat_data (–∫–ª—é—á: {chat_data_key}) –¥–ª—è —á–∞—Ç–∞ {chat_id_str}.")

    reply_text_to_send = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ /quiz10:'
    logger.debug(f"Attempting to send category selection for /quiz10 to {chat_id_str}. Text: '{reply_text_to_send}'")
    await update.message.reply_text(reply_text_to_send, reply_markup=reply_markup)


async def handle_quiz10_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        logger.error("handle_quiz10_category_selection: query is None.")
        return

    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not query.message or not query.message.chat or not query.from_user:
        logger.warning("handle_quiz10_category_selection: message, chat or user is None in query.")
        return

    chat_id_int = query.message.chat.id
    chat_id_str = str(chat_id_int)
    user_id = query.from_user.id
    
    chat_data_key = f"quiz10_cat_map_{chat_id_str}"
    category_map_for_callback: Dict[str, str] | None = context.chat_data.pop(chat_data_key, None)

    if category_map_for_callback is None: # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–≥–æ –Ω–∞ None, —Ç.–∫. –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å —Ç–æ–∂–µ False
        logger.warning(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ chat_data (–∫–ª—é—á: {chat_data_key}) –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback. –û—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ –æ—à–∏–±–∫–∞.")
        message_text_on_error = "–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å /quiz10."
        try:
            await query.edit_message_text(text=message_text_on_error)
        except Exception as e_edit:
            logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (map missing): {e_edit}. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ.")
            try:
                 await context.bot.send_message(chat_id=chat_id_int, text=message_text_on_error)
            except Exception as e_send:
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (map missing): {e_send}")
        return

    logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∫–ª—é—á: {chat_data_key}) —É–¥–∞–ª–µ–Ω–∞ –∏–∑ chat_data –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è callback.")

    selected_category_name: str | None = None
    callback_data = query.data
    message_text_after_selection = ""

    if callback_data == CALLBACK_DATA_QUIZ10_RANDOM_CATEGORY:
        selected_category_name = None # –°–∏–≥–Ω–∞–ª –¥–ª—è _initiate_quiz10_session
        message_text_after_selection = "–í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ù–∞—á–∏–Ω–∞–µ–º /quiz10..."
    elif callback_data and callback_data.startswith(CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY_SHORT):
        short_id = callback_data[len(CALLBACK_DATA_PREFIX_QUIZ10_CATEGORY_SHORT):]
        selected_category_name = category_map_for_callback.get(short_id)
        if selected_category_name:
             message_text_after_selection = f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{selected_category_name}'. –ù–∞—á–∏–Ω–∞–µ–º /quiz10..."
        else:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ ID '{short_id}' –≤ –∫–∞—Ä—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id_str}. –ö–∞—Ä—Ç–∞ –±—ã–ª–∞: {category_map_for_callback}")
             message_text_after_selection = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ä—Ç–µ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /quiz10."
             # –ù–µ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
             try:
                 await query.edit_message_text(text=message_text_after_selection)
             except Exception as e:
                 logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (ID not in map): {e}")
                 await context.bot.send_message(chat_id=chat_id_int, text=message_text_after_selection)
             return # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback_data –≤ handle_quiz10_category_selection: '{callback_data}'.")
        message_text_after_selection = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤—ã–±–æ—Ä–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /quiz10."
        try:
            await query.edit_message_text(text=message_text_after_selection)
        except Exception as e:
             logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback_data: {e}")
             await context.bot.send_message(chat_id=chat_id_int, text=message_text_after_selection)
        return # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

    # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    logger.debug(f"Attempting to edit message after /quiz10 category selection in {chat_id_str}. New text: '{message_text_after_selection}'")
    try:
        await query.edit_message_text(text=message_text_after_selection)
    except Exception as e_edit_final:
        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ñ–∏–Ω–∞–ª—å–Ω–æ–µ): {e_edit_final}. –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –≥–ª–∞–≤–Ω–æ–µ - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω–∞–¥–æ

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –≤—ã–±–æ—Ä –±—ã–ª —É—Å–ø–µ—à–µ–Ω (selected_category_name –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏–ª–∏ —ç—Ç–æ RANDOM)
    # –£—Å–ª–æ–≤–∏–µ `message_text_after_selection.startswith("–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è")` –∏–ª–∏ `message_text_after_selection.startswith("–í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π")`
    # –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–∞–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞.
    if "–ù–∞—á–∏–Ω–∞–µ–º /quiz10..." in message_text_after_selection:
         await _initiate_quiz10_session(context, chat_id_int, chat_id_str, user_id, selected_category_name)


async def quiz10notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat or not update.effective_user:
        logger.warning("quiz10notify_command: message, chat or user is None.")
        return

    chat_id_int = update.effective_chat.id
    chat_id_str = str(chat_id_int)
    user_id = update.effective_user.id
    reply_text_to_send = ""

    if state.current_quiz_session.get(chat_id_str):
        reply_text_to_send = "–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞ /quiz10. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz."
        logger.debug(f"Attempting to send message to {chat_id_str} (quiz10notify blocked by active session). Text: '{reply_text_to_send}'")
        await update.message.reply_text(reply_text_to_send)
        return
        
    if state.pending_scheduled_quizzes.get(chat_id_str):
        pending_info = state.pending_scheduled_quizzes[chat_id_str]
        scheduled_dt_utc = pending_info.get("scheduled_time")
        time_left_str = "—Å–∫–æ—Ä–æ"
        if scheduled_dt_utc and isinstance(scheduled_dt_utc, datetime):
            now_utc = datetime.now(timezone.utc)
            if scheduled_dt_utc > now_utc:
                time_left = scheduled_dt_utc - now_utc
                time_left_str = f"–ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {max(1, int(time_left.total_seconds() / 60))} –º–∏–Ω."
            else: # –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –Ω–æ job –µ—â–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª/–Ω–µ —É–¥–∞–ª–∏–ª –∏–∑ pending
                time_left_str = "–æ—á–µ–Ω—å —Å–∫–æ—Ä–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å)"
        reply_text_to_send = f"–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∏–≥—Ä–∞ /quiz10notify (–Ω–∞—á–Ω–µ—Ç—Å—è {time_left_str}). –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        logger.debug(f"Attempting to send message to {chat_id_str} (quiz10notify blocked by existing pending). Text: '{reply_text_to_send}'")
        await update.message.reply_text(reply_text_to_send)
        return

    category_name_arg = " ".join(context.args) if context.args else None
    chosen_category_full_name: str | None = None # –ë—É–¥–µ—Ç None –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö
    category_display_name = "—Å–ª—É—á–∞–π–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º" # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    if not state.quiz_data:
        reply_text_to_send = "–í–æ–ø—Ä–æ—Å—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ."
        logger.debug(f"Attempting to send message to {chat_id_str} (quiz10notify, no questions loaded). Text: '{reply_text_to_send}'")
        await update.message.reply_text(reply_text_to_send)
        return

    if category_name_arg:
        # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        found_cat_name = next((cat for cat in state.quiz_data if cat.lower() == category_name_arg.lower() and state.quiz_data[cat]), None)
        if found_cat_name:
            chosen_category_full_name = found_cat_name
            category_display_name = f"–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{chosen_category_full_name}'"
        else:
            reply_text_to_send = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name_arg}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ —Å–ª—É—á–∞–π–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."
            logger.debug(f"Attempting to send message to {chat_id_str} (quiz10notify, category not found). Text: '{reply_text_to_send}'")
            await update.message.reply_text(reply_text_to_send)
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, chosen_category_full_name –æ—Å—Ç–∞–µ—Ç—Å—è None

    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–¥–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤
    if not chosen_category_full_name and category_name_arg: # –ï—Å–ª–∏ –±—ã–ª–∞ –∑–∞–¥–∞–Ω–∞, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        pass # –£–∂–µ —Å–æ–æ–±—â–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, chosen_category_full_name –æ—Å—Ç–∞–Ω–µ—Ç—Å—è None -> —Å–ª—É—á–∞–π–Ω—ã–µ
    elif not chosen_category_full_name and not category_name_arg: # –ù–µ –±—ã–ª–∞ –∑–∞–¥–∞–Ω–∞ -> —Å–ª—É—á–∞–π–Ω—ã–µ
         all_questions_flat = [q for q_list in state.quiz_data.values() for q in q_list]
         if not all_questions_flat:
             reply_text_to_send = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã (–∞–¥–º–∏–Ω)."
             logger.debug(f"Attempting to send message to {chat_id_str} (quiz10notify, no questions AT ALL). Text: '{reply_text_to_send}'")
             await update.message.reply_text(reply_text_to_send)
             return

    delay_seconds = QUIZ10_NOTIFY_DELAY_MINUTES * 60
    job_name = f"scheduled_quiz10_chat_{chat_id_str}" # –°–¥–µ–ª–∞–µ–º –∏–º—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è —á–∞—Ç–∞

    job_context_data = {"chat_id_int": chat_id_int, "user_id": user_id, "category_full_name": chosen_category_full_name}

    if context.job_queue:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∂–æ–±—ã —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        existing_jobs = context.job_queue.get_jobs_by_name(job_name)
        for old_job in existing_jobs:
            old_job.schedule_removal()
            logger.debug(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π job –¥–ª—è quiz10notify —Å –∏–º–µ–Ω–µ–º '{old_job.name}' –≤ —á–∞—Ç–µ {chat_id_str}.")

        context.job_queue.run_once(
            _start_scheduled_quiz10_job_callback,
            timedelta(seconds=delay_seconds),
            data=job_context_data,
            name=job_name
        )

        scheduled_time_utc = datetime.now(timezone.utc) + timedelta(seconds=delay_seconds)
        state.pending_scheduled_quizzes[chat_id_str] = {
            "job_name": job_name,
            "category_name": chosen_category_full_name, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–ª–∏ None
            "starter_user_id": str(user_id),
            "scheduled_time": scheduled_time_utc
        }

        reply_text_to_send = (
            f"üîî –ü—Ä–∏–Ω—è—Ç–æ! –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 –ø–æ {category_display_name} –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {QUIZ10_NOTIFY_DELAY_MINUTES} –º–∏–Ω.\n"
            "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopquiz."
        )
        logger.debug(f"Attempting to send confirmation for /quiz10notify to {chat_id_str}. Text: '{reply_text_to_send}'")
        await update.message.reply_text(reply_text_to_send)
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω /quiz10notify –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –ø–æ {category_display_name} —á–µ—Ä–µ–∑ {QUIZ10_NOTIFY_DELAY_MINUTES} –º–∏–Ω. Job: {job_name}")
    else:
        reply_text_to_send = "–û—à–∏–±–∫–∞: JobQueue –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
        logger.debug(f"Attempting to send error (JobQueue missing) for /quiz10notify to {chat_id_str}. Text: '{reply_text_to_send}'")
        await update.message.reply_text(reply_text_to_send)
        logger.error("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ quiz10notify_command.")


async def _start_scheduled_quiz10_job_callback(context: ContextTypes.DEFAULT_TYPE):
    if not context.job or not context.job.data:
        logger.error("_start_scheduled_quiz10_job_callback –≤—ã–∑–≤–∞–Ω –±–µ–∑ job data.")
        return

    job_data = context.job.data
    chat_id_int: int = job_data["chat_id_int"]
    chat_id_str = str(chat_id_int)
    user_id: int = job_data["user_id"]
    category_full_name: str | None = job_data.get("category_full_name") # –ú–æ–∂–µ—Ç –±—ã—Ç—å None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —ç—Ç–æ—Ç pending quiz –æ—Ç–º–µ–Ω–µ–Ω
    pending_quiz_info = state.pending_scheduled_quizzes.get(chat_id_str)
    if not pending_quiz_info or pending_quiz_info.get("job_name") != context.job.name:
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π quiz10 (job: {context.job.name}) –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∑–∞–º–µ–Ω–µ–Ω –¥—Ä—É–≥–∏–º. Job –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return

    # –£–¥–∞–ª—è–µ–º –∏–∑ pending, —Ç–∞–∫ –∫–∞–∫ —Å–µ–π—á–∞—Å –±—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å
    state.pending_scheduled_quizzes.pop(chat_id_str, None)
    logger.debug(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ pending_scheduled_quizzes –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ job'–∞.")

    if state.current_quiz_session.get(chat_id_str):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π quiz10 –≤ —á–∞—Ç–µ {chat_id_str}, –Ω–æ —Ç–∞–º —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –¥—Ä—É–≥–∞—è —Å–µ—Å—Å–∏—è /quiz10.")
        try:
            error_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: –≤ —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –¥—Ä—É–≥–∞—è –∏–≥—Ä–∞ /quiz10."
            logger.debug(f"Attempting to send message to {chat_id_str} (_start_scheduled_quiz10_job_callback, session conflict). Text: '{error_text}'")
            await context.bot.send_message(chat_id=chat_id_int, text=error_text)
        except Exception as e_send:
             logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ —Å–µ—Å—Å–∏–π –≤ —á–∞—Ç {chat_id_str}: {e_send}")
        return

    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π quiz10 –¥–ª—è —á–∞—Ç–∞ {chat_id_str}. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ job: {category_full_name if category_full_name else '–°–ª—É—á–∞–π–Ω—ã–µ'}")
    await _initiate_quiz10_session(context, chat_id_int, chat_id_str, user_id, category_full_name)


async def stop_quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_user or not update.effective_chat:
        logger.warning("stop_quiz_command: message, user or chat is None.")
        return

    chat_id_int = update.effective_chat.id
    chat_id_str = str(chat_id_int)
    user_id_str = str(update.effective_user.id)
    reply_text_to_send = ""

    user_is_admin = False
    if update.effective_chat.type != "private":
        try:
            chat_member = await context.bot.get_chat_member(chat_id_str, user_id_str)
            if chat_member.status in [chat_member.ADMINISTRATOR, chat_member.CREATOR]:
                user_is_admin = True
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è {user_id_str} –≤ {chat_id_str}: {e}")

    stopped_something = False

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ /quiz10
    active_session = state.current_quiz_session.get(chat_id_str)
    if active_session:
        session_starter_id = active_session.get("starter_user_id")
        if user_is_admin or user_id_str == session_starter_id:
            logger.info(f"/stopquiz –æ—Ç {user_id_str} (admin: {user_is_admin}) –≤ {chat_id_str}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ /quiz10, –Ω–∞—á–∞—Ç–æ–π {session_starter_id}.")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            current_poll_id_in_session = active_session.get("current_poll_id")
            if current_poll_id_in_session:
                poll_info = state.current_poll.get(current_poll_id_in_session)
                if poll_info and poll_info.get("message_id"):
                    try:
                        await context.bot.stop_poll(chat_id_str, poll_info["message_id"])
                        logger.debug(f"–¢–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å {current_poll_id_in_session} –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ /quiz10 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    except Exception as e_stop_poll:
                        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ {current_poll_id_in_session} —á–µ—Ä–µ–∑ /stopquiz: {e_stop_poll}")
            
            await show_quiz_session_results(context, chat_id_str, error_occurred=True) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ä–æ—á–Ω–æ
            reply_text_to_send = "–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
            logger.debug(f"Attempting to send message to {chat_id_str} (active /quiz10 stopped). Text: '{reply_text_to_send}'")
            await update.message.reply_text(reply_text_to_send)
            stopped_something = True
        else:
            reply_text_to_send = "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –Ω–∞—á–∞–ª –∞–∫—Ç–∏–≤–Ω—É—é /quiz10, –º–æ–∂–µ—Ç –µ–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å."
            logger.debug(f"Attempting to send restriction message to {chat_id_str} (stop active /quiz10). Text: '{reply_text_to_send}'")
            await update.message.reply_text(reply_text_to_send)
            return # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º pending

    # –û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π /quiz10notify
    pending_quiz = state.pending_scheduled_quizzes.get(chat_id_str)
    if pending_quiz:
        pending_starter_id = pending_quiz.get("starter_user_id")
        if user_is_admin or user_id_str == pending_starter_id:
            job_name = pending_quiz.get("job_name")
            if job_name and context.job_queue:
                jobs = context.job_queue.get_jobs_by_name(job_name)
                removed_count = 0
                for job in jobs:
                    job.schedule_removal()
                    removed_count +=1
                if removed_count > 0:
                    logger.info(f"–û—Ç–º–µ–Ω–µ–Ω(–æ) {removed_count} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π(—Ö) quiz10notify (job name pattern: {job_name}) –≤ —á–∞—Ç–µ {chat_id_str} –∫–æ–º–∞–Ω–¥–æ–π /stopquiz –æ—Ç {user_id_str} (admin: {user_is_admin}).")

            state.pending_scheduled_quizzes.pop(chat_id_str, None)
            reply_text_to_send = "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ /quiz10notify –æ—Ç–º–µ–Ω–µ–Ω–∞."
            logger.debug(f"Attempting to send message to {chat_id_str} (pending /quiz10notify cancelled). Text: '{reply_text_to_send}'")
            await update.message.reply_text(reply_text_to_send)
            stopped_something = True
        else:
            # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ò–õ–ò –Ω–µ –±—ã–ª–æ –ø—Ä–∞–≤ –µ–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å,
            # –ò —Å–µ–π—á–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é.
            if not active_session: # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ (–∏–ª–∏ –µ–µ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã—à–µ)
                 reply_text_to_send = "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª /quiz10notify, –º–æ–∂–µ—Ç –µ–µ –æ—Ç–º–µ–Ω–∏—Ç—å."
                 logger.debug(f"Attempting to send restriction message to {chat_id_str} (stop pending /quiz10notify). Text: '{reply_text_to_send}'")
                 await update.message.reply_text(reply_text_to_send)
            return

    if not stopped_something:
        reply_text_to_send = "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω /quiz10 –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏/–æ—Ç–º–µ–Ω—ã."
        logger.debug(f"Attempting to send message to {chat_id_str} (nothing to stop for /quiz10). Text: '{reply_text_to_send}'")
        await update.message.reply_text(reply_text_to_send)