# quiz_logic.py
import random
from typing import List, Dict, Any, Tuple, Optional
from datetime import timedelta
from telegram import Update, Poll # Update –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å
from telegram.ext import ContextTypes
from telegram.error import BadRequest # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

from config import (logger, NUMBER_OF_QUESTIONS_IN_SESSION,
                    DEFAULT_POLL_OPEN_PERIOD, JOB_GRACE_PERIOD)
import state
from utils import pluralize_points
from handlers.rating_handlers import get_player_display # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ show_quiz_session_results

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (get_random_questions, get_random_questions_from_all, prepare_poll_options) ---
def get_random_questions(category: str, count: int = 1) -> List[Dict[str, Any]]:
    cat_q_list = state.quiz_data.get(category)
    if not isinstance(cat_q_list, list) or not cat_q_list:
        return []
    return [q.copy() for q in random.sample(cat_q_list, min(count, len(cat_q_list)))]

def get_random_questions_from_all(count: int) -> List[Dict[str, Any]]:
    all_q = [q.copy() for questions_in_category in state.quiz_data.values() if isinstance(questions_in_category, list) for q in questions_in_category]
    if not all_q:
        return []
    return random.sample(all_q, min(count, len(all_q)))

def prepare_poll_options(q_details: Dict[str, Any]) -> Tuple[str, List[str], int, List[str]]:
    q_text, opts_orig = q_details["question"], q_details["options"]
    correct_answer_text = opts_orig[q_details["correct_option_index"]]
    opts_shuffled = list(opts_orig)
    random.shuffle(opts_shuffled)
    try:
        new_correct_idx = opts_shuffled.index(correct_answer_text)
    except ValueError:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ '{correct_answer_text}' –≤ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏—è—Ö: {opts_shuffled}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å.")
        return q_text, list(opts_orig), q_details["correct_option_index"], list(opts_orig)
    return q_text, opts_shuffled, new_correct_idx, list(opts_orig)

async def send_solution_if_available(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id_str: str,
    question_details: Dict[str, Any],
    q_index_for_log: int = -1,
    poll_id_for_placeholder_lookup: Optional[str] = None
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞."""
    solution = question_details.get("solution")
    if not solution:
        return

    q_text_for_header = question_details.get("question", "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É")
    log_q_ref_text = f"¬´{q_text_for_header[:30]}...¬ª" if len(q_text_for_header) > 30 else f"¬´{q_text_for_header}¬ª"
    log_q_ref_suffix = f" (–≤–æ–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏ {q_index_for_log + 1})" if q_index_for_log != -1 else ""
    log_q_ref = f"{log_q_ref_text}{log_q_ref_suffix}"

    solution_message_full = f"üí°{solution}"
    MAX_MESSAGE_LENGTH = 4096
    if len(solution_message_full) > MAX_MESSAGE_LENGTH:
        truncate_at = MAX_MESSAGE_LENGTH - 3
        solution_message_full = solution_message_full[:truncate_at] + "..."
        logger.warning(f"–ü–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {log_q_ref} –≤ —á–∞—Ç–µ {chat_id_str} –±—ã–ª–æ —É—Å–µ—á–µ–Ω–æ.")

    placeholder_message_id: Optional[int] = None
    if poll_id_for_placeholder_lookup:
        poll_info = state.current_poll.get(poll_id_for_placeholder_lookup)
        if poll_info:
            placeholder_message_id = poll_info.get("solution_placeholder_message_id")

    if placeholder_message_id:
        logger.debug(f"Attempting to edit solution placeholder message {placeholder_message_id} in chat {chat_id_str} for question {log_q_ref}. Text: '{solution_message_full[:100]}...'")
        try:
            await context.bot.edit_message_text(
                text=solution_message_full,
                chat_id=chat_id_str,
                message_id=placeholder_message_id
            )
            logger.info(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫–∞ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {log_q_ref} –≤ —á–∞—Ç–µ {chat_id_str}.")
            return # –£—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        except BadRequest as e:
            if "Message to edit not found" in str(e) or "message is not modified" in str(e).lower():
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É ({placeholder_message_id}) –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {log_q_ref} –≤ —á–∞—Ç–µ {chat_id_str} (–≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞): {e}. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥–ª—É—à–∫–∏ ({placeholder_message_id}) –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {log_q_ref} –≤ —á–∞—Ç–µ {chat_id_str}: {e}", exc_info=True)
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥–ª—É—à–∫–∏ ({placeholder_message_id}) –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {log_q_ref} –≤ —á–∞—Ç–µ {chat_id_str}: {e}", exc_info=True)
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–≥–ª—É—à–∫–∏ –Ω–µ –±—ã–ª–æ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
    logger.debug(f"Attempting to send new solution message to chat {chat_id_str} for question {log_q_ref}. Text: '{solution_message_full[:100]}...'")
    try:
        await context.bot.send_message(chat_id=chat_id_str, text=solution_message_full)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–æ–≤–æ–µ) –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {log_q_ref} –≤ —á–∞—Ç–µ {chat_id_str}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ (–Ω–æ–≤–æ–≥–æ) –ø–æ—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {log_q_ref} –≤ —á–∞—Ç–µ {chat_id_str}: {e}", exc_info=True)


async def send_next_question_in_session(context: ContextTypes.DEFAULT_TYPE, chat_id_str: str):
    session = state.current_quiz_session.get(chat_id_str)
    if not session:
        logger.warning(f"send_next_question_in_session: –°–µ—Å—Å–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if job := session.get("next_question_job"):
        try: job.schedule_removal()
        except Exception: pass
        session["next_question_job"] = None

    current_q_idx = session["current_index"]
    actual_num_q = session["actual_num_questions"]

    if current_q_idx >= actual_num_q:
        logger.info(f"–í—Å–µ {actual_num_q} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ—Å—Å–∏–∏ {chat_id_str} –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è handle_current_poll_end.")
        return

    q_details = session["questions"][current_q_idx]
    is_last_question = (current_q_idx == actual_num_q - 1)
    poll_open_period = DEFAULT_POLL_OPEN_PERIOD

    poll_question_text_for_api = q_details['question']
    full_poll_question_header = f"–í–æ–ø—Ä–æ—Å {current_q_idx + 1}/{actual_num_q}"
    if original_cat := q_details.get("original_category"):
        full_poll_question_header += f" (–ö–∞—Ç: {original_cat})"
    full_poll_question_header += f"\n{poll_question_text_for_api}"

    MAX_POLL_QUESTION_LENGTH = 255
    if len(full_poll_question_header) > MAX_POLL_QUESTION_LENGTH:
        truncate_at = MAX_POLL_QUESTION_LENGTH - 3
        full_poll_question_header = full_poll_question_header[:truncate_at] + "..."
        logger.warning(f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è poll –≤ —á–∞—Ç–µ {chat_id_str} –±—ã–ª —É—Å–µ—á–µ–Ω (–≤–æ–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏ {current_q_idx + 1}).")

    _, poll_options, poll_correct_option_id, _ = prepare_poll_options(q_details)

    logger.debug(f"Attempting to send /quiz10 question {current_q_idx + 1} to chat {chat_id_str}. Header: '{full_poll_question_header[:100]}...'")
    try:
        sent_poll_msg = await context.bot.send_poll(
            chat_id=chat_id_str, question=full_poll_question_header, options=poll_options,
            type=Poll.QUIZ, correct_option_id=poll_correct_option_id,
            open_period=poll_open_period, is_anonymous=False
        )
        session["current_poll_id"] = sent_poll_msg.poll.id
        session["current_index"] += 1

        current_poll_entry = {
            "chat_id": chat_id_str, "message_id": sent_poll_msg.message_id,
            "correct_index": poll_correct_option_id, "quiz_session": True,
            "question_details": q_details, "associated_quiz_session_chat_id": chat_id_str,
            "is_last_question": is_last_question,
            "next_q_triggered_by_answer": False,
            "question_session_index": current_q_idx,
            "solution_placeholder_message_id": None, # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            "processed_by_early_answer": False # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        }
        state.current_poll[sent_poll_msg.poll.id] = current_poll_entry
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å {current_q_idx + 1}/{actual_num_q} —Å–µ—Å—Å–∏–∏ {chat_id_str}. Poll ID: {sent_poll_msg.poll.id}. Is last: {is_last_question}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–ª—É—à–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–µ
        if q_details.get("solution"):
            try:
                placeholder_msg = await context.bot.send_message(chat_id=chat_id_str, text="üí°")
                state.current_poll[sent_poll_msg.poll.id]["solution_placeholder_message_id"] = placeholder_msg.message_id
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ 'üí°' –¥–ª—è poll {sent_poll_msg.poll.id} –≤ —á–∞—Ç–µ {chat_id_str}.")
            except Exception as e_sol_pl:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≥–ª—É—à–∫—É 'üí°' –¥–ª—è poll {sent_poll_msg.poll.id} –≤ —á–∞—Ç–µ {chat_id_str}: {e_sol_pl}")


        job_delay_seconds = poll_open_period + JOB_GRACE_PERIOD
        job_name = f"poll_end_timeout_chat_{chat_id_str}_poll_{sent_poll_msg.poll.id}"
        if context.job_queue:
            existing_jobs = context.job_queue.get_jobs_by_name(job_name)
            for old_job in existing_jobs: old_job.schedule_removal()

            current_poll_end_job = context.job_queue.run_once(
                handle_current_poll_end, timedelta(seconds=job_delay_seconds),
                data={"chat_id_str": chat_id_str, "ended_poll_id": sent_poll_msg.poll.id},
                name=job_name
            )
            session["next_question_job"] = current_poll_end_job
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏ ({current_q_idx + 1}) –≤ —á–∞—Ç–µ {chat_id_str}: {e}", exc_info=True)
        await show_quiz_session_results(context, chat_id_str, error_occurred=True)

async def handle_current_poll_end(context: ContextTypes.DEFAULT_TYPE):
    if not context.job or not context.job.data:
        logger.error("handle_current_poll_end –≤—ã–∑–≤–∞–Ω –±–µ–∑ job data.")
        return

    job_data = context.job.data
    chat_id_str: str = job_data["chat_id_str"]
    ended_poll_id: str = job_data["ended_poll_id"]

    poll_info = state.current_poll.get(ended_poll_id)
    session = state.current_quiz_session.get(chat_id_str) # –°–µ—Å—Å–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –µ—Å–ª–∏ —ç—Ç–æ /stopquiz

    if not poll_info:
        logger.warning(
            f"Job 'handle_current_poll_end' –¥–ª—è poll {ended_poll_id} –≤ —á–∞—Ç–µ {chat_id_str}: poll_info –Ω–µ –Ω–∞–π–¥–µ–Ω. "
            f"–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–ª–∏ poll —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–Ω–∞—á–µ."
        )
        if session: # –ï—Å–ª–∏ poll_info –Ω–µ—Ç, –Ω–æ —Å–µ—Å—Å–∏—è –µ—â–µ –µ—Å—Ç—å (–Ω–µ—à—Ç–∞—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è)
            logger.error(f"–ù–µ—à—Ç–∞—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: poll_info –¥–ª—è {ended_poll_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ —Å–µ—Å—Å–∏—è {chat_id_str} –∞–∫—Ç–∏–≤–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏.")
            await show_quiz_session_results(context, chat_id_str, error_occurred=True)
        return

    q_idx_from_poll_info = poll_info.get("question_session_index", -1)
    logger.info(f"Job 'handle_current_poll_end' —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —á–∞—Ç–∞ {chat_id_str}, poll_id {ended_poll_id} (–≤–æ–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏ ~{q_idx_from_poll_info + 1}).")

    await send_solution_if_available(
        context, chat_id_str,
        poll_info["question_details"],
        q_idx_from_poll_info,
        poll_id_for_placeholder_lookup=ended_poll_id
    )

    is_last_q_from_poll_info = poll_info.get("is_last_question", False)
    processed_early = poll_info.get("processed_by_early_answer", False)

    state.current_poll.pop(ended_poll_id, None) # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ –æ–± –æ–ø—Ä–æ—Å–µ –ü–û–°–õ–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    logger.debug(f"Poll {ended_poll_id} —É–¥–∞–ª–µ–Ω –∏–∑ state.current_poll –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞.")

    if not session: # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ /stopquiz –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
        logger.info(f"–°–µ—Å—Å–∏—è {chat_id_str} —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–º–∞—É—Ç–∞ poll {ended_poll_id}. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã–ª–∏ (–∏–ª–∏ –±—É–¥—É—Ç) –ø–æ–∫–∞–∑–∞–Ω—ã stopquiz.")
        return

    if is_last_q_from_poll_info:
        logger.info(f"–í—Ä–µ–º—è –¥–ª—è –ü–û–°–õ–ï–î–ù–ï–ì–û –≤–æ–ø—Ä–æ—Å–∞ (–∏–Ω–¥–µ–∫—Å {q_idx_from_poll_info}, poll {ended_poll_id}) —Å–µ—Å—Å–∏–∏ {chat_id_str} –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        await show_quiz_session_results(context, chat_id_str)
    else: # –ù–ï –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
        if not processed_early:
            logger.info(f"–¢–∞–π–º-–∞—É—Ç –¥–ª—è –ù–ï –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–∏–Ω–¥–µ–∫—Å {q_idx_from_poll_info}, poll {ended_poll_id}) –≤ —Å–µ—Å—Å–∏–∏ {chat_id_str}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π.")
            await send_next_question_in_session(context, chat_id_str)
        else:
            logger.info(
                f"–¢–∞–π–º–∞—É—Ç –¥–ª—è poll {ended_poll_id} (–≤–æ–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏ {q_idx_from_poll_info + 1}), "
                f"–Ω–æ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑-–∑–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
            )

async def handle_single_quiz_poll_end(context: ContextTypes.DEFAULT_TYPE):
    if not context.job or not context.job.data:
        logger.error("handle_single_quiz_poll_end: Job data missing.")
        return

    job_data = context.job.data
    chat_id_str: str = job_data["chat_id_str"]
    poll_id: str = job_data["poll_id"]
    logger.info(f"Job 'handle_single_quiz_poll_end' —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è poll_id {poll_id} –≤ —á–∞—Ç–µ {chat_id_str}.")

    poll_info = state.current_poll.get(poll_id) # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º, –ø–æ—Ç–æ–º —É–¥–∞–ª—è–µ–º

    if poll_info:
        question_details = poll_info.get("question_details")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π –∫–≤–∏–∑, –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –µ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–µ
        if not poll_info.get("quiz_session", False) and not poll_info.get("daily_quiz", False) and question_details: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π/–¥–µ–π–ª–∏
            await send_solution_if_available(
                context, chat_id_str,
                question_details,
                poll_id_for_placeholder_lookup=poll_id
            )
        state.current_poll.pop(poll_id, None) # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger.info(f"–û–¥–∏–Ω–æ—á–Ω—ã–π –∫–≤–∏–∑ (poll {poll_id}) –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ state.current_poll –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞.")
    else:
        logger.warning(f"handle_single_quiz_poll_end: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è poll_id {poll_id} (—á–∞—Ç {chat_id_str}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ—è—Å–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

async def show_quiz_session_results(context: ContextTypes.DEFAULT_TYPE, chat_id_str: str, error_occurred: bool = False):
    session = state.current_quiz_session.get(chat_id_str) # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
    # –ù–µ —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∑–¥–µ—Å—å, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º

    if not session:
        logger.warning(f"show_quiz_session_results: –°–µ—Å—Å–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞).")
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω–∞ —Ç–æ—á–Ω–æ —É–¥–∞–ª–µ–Ω–∞, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤—ã–∑–≤–∞–ª show_quiz_session_results –¥–ª—è —É–∂–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
        state.current_quiz_session.pop(chat_id_str, None)
        return

    # –û—Ç–º–µ–Ω—è–µ–º job —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –µ—Å—Ç—å
    if job := session.get("next_question_job"):
        try:
            job.schedule_removal()
            session["next_question_job"] = None # –û–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ —Å–µ—Å—Å–∏–∏
        except Exception: pass

    num_q_in_session = session.get("actual_num_questions", NUMBER_OF_QUESTIONS_IN_SESSION)
    results_header = "üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üèÅ\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏:\n" if not error_occurred else "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.\n\n–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏:\n"
    results_body = ""

    session_scores_data = session.get("session_scores")
    if not session_scores_data:
        results_body = "–í —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –∏–ª–∏ –Ω–µ –Ω–∞–±—Ä–∞–ª –æ—á–∫–æ–≤."
    else:
        sorted_session_participants = sorted(
            session_scores_data.items(),
            key=lambda item: (-item[1].get("score", 0), item[1].get("name", "").lower())
        )
        for rank, (user_id, data) in enumerate(sorted_session_participants):
            user_name = data.get("name", f"User {user_id}")
            session_score = data.get("score", 0)
            global_score_data = state.user_scores.get(chat_id_str, {}).get(user_id, {})
            global_score = global_score_data.get("score", 0)
            rank_prefix = f"{rank + 1}."

            if rank == 0 and session_score > 0 : rank_prefix = "ü•á"
            elif rank == 1 and session_score > 0 : rank_prefix = "ü•à"
            elif rank == 2 and session_score > 0 : rank_prefix = "ü•â"

            session_display = get_player_display(user_name, session_score, separator=":")
            results_body += (f"{rank_prefix} {session_display} (–∏–∑ {num_q_in_session} –≤–æ–ø—Ä.)\n"
                             f"    –û–±—â–∏–π —Å—á—ë—Ç –≤ —á–∞—Ç–µ: {pluralize_points(global_score)}\n")
        if len(sorted_session_participants) > 3:
             results_body += "\n–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏!"

    full_results_text = results_header + results_body
    logger.debug(f"Attempting to send /quiz10 session results to chat {chat_id_str}. Text: '{full_results_text[:100]}...'")
    try:
        await context.bot.send_message(chat_id=chat_id_str, text=full_results_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Ç {chat_id_str}: {e}", exc_info=True)

    # –û—á–∏—Å—Ç–∫–∞ current_poll –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—â–µ –µ—Å—Ç—å –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    # (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ poll –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –≤ handle_current_poll_end –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ)
    current_poll_id_of_session = session.get("current_poll_id")
    if current_poll_id_of_session:
        poll_info_to_remove = state.current_poll.get(current_poll_id_of_session)
        if poll_info_to_remove and \
           poll_info_to_remove.get("quiz_session") and \
           str(poll_info_to_remove.get("associated_quiz_session_chat_id")) == str(chat_id_str): # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            state.current_poll.pop(current_poll_id_of_session, None)
            logger.debug(f"Poll {current_poll_id_of_session} (—Å–µ—Å—Å–∏—è) —É–¥–∞–ª–µ–Ω –∏–∑ state.current_poll –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ {chat_id_str} (show_quiz_session_results).")

    state.current_quiz_session.pop(chat_id_str, None) # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    logger.info(f"–°–µ—Å—Å–∏—è /quiz10 –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –æ—á–∏—â–µ–Ω–∞ (show_quiz_session_results).")
