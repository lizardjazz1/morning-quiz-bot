# handlers/daily_quiz_handlers.py
import random
from datetime import timedelta
from telegram import Update
from telegram.ext import ContextTypes, JobQueue
from telegram.constants import ChatMemberStatus, ParseMode

from config import (logger, DAILY_QUIZ_SUBSCRIPTIONS_FILE, DAILY_QUIZ_QUESTIONS_COUNT,
                    DAILY_QUIZ_CATEGORIES_TO_PICK, DAILY_QUIZ_POLL_OPEN_PERIOD_SECONDS,
                    DAILY_QUIZ_QUESTION_INTERVAL_SECONDS, DAILY_QUIZ_DEFAULT_HOUR_MSK, # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
                    DAILY_QUIZ_DEFAULT_MINUTE_MSK) # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
import state
from data_manager import save_daily_quiz_subscriptions
from quiz_logic import prepare_poll_options # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def _is_user_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if not update.effective_chat or not update.effective_user:
        return False
    if update.effective_chat.type == 'private':
        return True # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ "–∞–¥–º–∏–Ω" –¥–ª—è —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
    try:
        member = await context.bot.get_chat_member(update.effective_chat.id, update.effective_user.id)
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id} –≤ —á–∞—Ç–µ {update.effective_chat.id}: {e}")
        return False

def _get_questions_for_daily_quiz(
    num_questions: int = DAILY_QUIZ_QUESTIONS_COUNT,
    num_categories_to_pick: int = DAILY_QUIZ_CATEGORIES_TO_PICK
) -> tuple[list[dict], list[str]]:
    """
    –í—ã–±–∏—Ä–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∞ –∑–∞—Ç–µ–º
    —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    questions_for_quiz: list[dict] = []
    picked_category_names: list[str] = []

    if not state.quiz_data:
        logger.warning("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (state.quiz_data –ø—É—Å—Ç) –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
        return [], []

    # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã
    available_categories_with_questions = {
        cat_name: q_list for cat_name, q_list in state.quiz_data.items() if q_list
    }

    if not available_categories_with_questions:
        logger.warning("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
        return [], []

    # –í—ã–±–∏—Ä–∞–µ–º num_categories_to_pick —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    num_to_sample = min(num_categories_to_pick, len(available_categories_with_questions))
    if num_to_sample == 0: # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ —ç—Ç–æ –ø–æ–∫—Ä—ã—Ç—å
        return [], []

    picked_category_names = random.sample(list(available_categories_with_questions.keys()), num_to_sample)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    all_questions_from_picked_categories: list[dict] = []
    for cat_name in picked_category_names:
        all_questions_from_picked_categories.extend(
            [q.copy() for q in available_categories_with_questions.get(cat_name, [])]
        )

    if not all_questions_from_picked_categories:
        logger.warning(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {picked_category_names} –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return [], picked_category_names # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–µ–Ω–∞, –Ω–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    random.shuffle(all_questions_from_picked_categories)

    # –û—Ç–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    questions_for_quiz = all_questions_from_picked_categories[:num_questions]

    logger.info(f"–î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ—Ç–æ–±—Ä–∞–Ω–æ {len(questions_for_quiz)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {picked_category_names}.")
    return questions_for_quiz, picked_category_names

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def subscribe_daily_quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat or not update.effective_user:
        return

    chat_id_str = str(update.effective_chat.id)

    if not await _is_user_admin(update, context):
        reply_text = "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É."
        logger.debug(f"Attempting to send admin restriction message to {chat_id_str}. Text: '{reply_text}'")
        await update.message.reply_text(reply_text)
        return

    if chat_id_str in state.daily_quiz_subscriptions:
        reply_text = "–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É."
    else:
        state.daily_quiz_subscriptions.add(chat_id_str)
        save_daily_quiz_subscriptions()
        reply_text = (f"‚úÖ –≠—Ç–æ—Ç —á–∞—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! "
                      f"–û–Ω–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ {DAILY_QUIZ_DEFAULT_HOUR_MSK:02d}:{DAILY_QUIZ_DEFAULT_MINUTE_MSK:02d} –ú–°–ö.\n"
                      f"–ë—É–¥–µ—Ç {DAILY_QUIZ_QUESTIONS_COUNT} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {DAILY_QUIZ_CATEGORIES_TO_PICK} —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, "
                      f"–ø–æ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –º–∏–Ω—É—Ç—É. –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç {DAILY_QUIZ_POLL_OPEN_PERIOD_SECONDS // 60} –º–∏–Ω—É—Ç.")

    logger.debug(f"Attempting to send daily quiz subscription status to {chat_id_str}. Text: '{reply_text}'")
    await update.message.reply_text(reply_text)
    logger.info(f"–ß–∞—Ç {chat_id_str} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}.")

async def unsubscribe_daily_quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat or not update.effective_user:
        return

    chat_id_str = str(update.effective_chat.id)

    if not await _is_user_admin(update, context):
        reply_text = "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."
        logger.debug(f"Attempting to send admin restriction message to {chat_id_str}. Text: '{reply_text}'")
        await update.message.reply_text(reply_text)
        return

    if chat_id_str in state.daily_quiz_subscriptions:
        state.daily_quiz_subscriptions.discard(chat_id_str)
        save_daily_quiz_subscriptions()
        reply_text = "–≠—Ç–æ—Ç —á–∞—Ç –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."
        logger.info(f"–ß–∞—Ç {chat_id_str} –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}.")
    else:
        reply_text = "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É."

    logger.debug(f"Attempting to send daily quiz unsubscription status to {chat_id_str}. Text: '{reply_text}'")
    await update.message.reply_text(reply_text)

# --- –õ–æ–≥–∏–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (Jobs) ---

async def _send_one_daily_question_job(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    if not job or not job.data:
        logger.error("_send_one_daily_question_job: Job data is missing.")
        return

    chat_id_str: str = job.data["chat_id_str"]
    current_q_idx: int = job.data["current_question_index"]
    questions_this_session: list[dict] = job.data["questions_this_session"]

    active_quiz_state = state.active_daily_quizzes.get(chat_id_str)
    if not active_quiz_state or active_quiz_state.get("current_question_index") != current_q_idx:
        logger.warning(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id_str} –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç job'—É. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ {current_q_idx + 1}.")
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∑–∞–ø—É—Å–∫–∏
        state.active_daily_quizzes.pop(chat_id_str, None)
        return

    if current_q_idx >= len(questions_this_session):
        logger.info(f"–í—Å–µ {len(questions_this_session)} –≤–æ–ø—Ä–æ—Å–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç {chat_id_str}.")
        state.active_daily_quizzes.pop(chat_id_str, None) # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        try:
            final_text = "üéâ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
            logger.debug(f"Attempting to send daily quiz completion message to {chat_id_str}. Text: '{final_text}'")
            await context.bot.send_message(chat_id=chat_id_str, text=final_text)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ —á–∞—Ç {chat_id_str}: {e}")
        return

    q_details = questions_this_session[current_q_idx]

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
    poll_question_text_for_api = q_details['question']
    full_poll_question_header = f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞! –í–æ–ø—Ä–æ—Å {current_q_idx + 1}/{len(questions_this_session)}"
    if original_cat := q_details.get("original_category"):
        full_poll_question_header += f" (–ö–∞—Ç: {original_cat})"
    full_poll_question_header += f"\n\n{poll_question_text_for_api}" # –î–æ–±–∞–≤–∏–ª \n\n –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    MAX_POLL_QUESTION_LENGTH = 255 # Telegram API limit for poll question
    if len(full_poll_question_header) > MAX_POLL_QUESTION_LENGTH:
        truncate_at = MAX_POLL_QUESTION_LENGTH - 3 # for "..."
        full_poll_question_header = full_poll_question_header[:truncate_at] + "..."
        logger.warning(f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è poll –≤ —á–∞—Ç–µ {chat_id_str} –±—ã–ª —É—Å–µ—á–µ–Ω.")

    _, poll_options, poll_correct_option_id, _ = prepare_poll_options(q_details)

    try:
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ {current_q_idx + 1} –≤ —á–∞—Ç {chat_id_str}. –¢–µ–∫—Å—Ç: '{full_poll_question_header[:100]}...'")
        sent_poll_msg = await context.bot.send_poll(
            chat_id=chat_id_str,
            question=full_poll_question_header,
            options=poll_options,
            type='quiz',
            correct_option_id=poll_correct_option_id,
            open_period=DAILY_QUIZ_POLL_OPEN_PERIOD_SECONDS,
            is_anonymous=False
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –æ–ø—Ä–æ—Å–µ –¥–ª—è poll_answer_handler
        state.current_poll[sent_poll_msg.poll.id] = {
            "chat_id": chat_id_str,
            "message_id": sent_poll_msg.message_id,
            "correct_index": poll_correct_option_id,
            "quiz_session": False, # –≠—Ç–æ –Ω–µ /quiz10 —Å–µ—Å—Å–∏—è
            "daily_quiz": True,    # –ü–æ–º–µ—Ç–∫–∞, —á—Ç–æ —ç—Ç–æ –æ–ø—Ä–æ—Å –∏–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
            "question_details": q_details,
            "question_session_index": current_q_idx, # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ poll_answer_handler
            "open_timestamp": sent_poll_msg.date.timestamp() # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞
        }
        logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å {current_q_idx + 1}/{len(questions_this_session)} (Poll ID: {sent_poll_msg.poll.id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id_str}.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ {current_q_idx + 1} –≤ —á–∞—Ç {chat_id_str}: {e}", exc_info=True)
        state.active_daily_quizzes.pop(chat_id_str, None) # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return # –ù–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    next_q_idx = current_q_idx + 1
    active_quiz_state["current_question_index"] = next_q_idx # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    if next_q_idx < len(questions_this_session):
        job_queue: JobQueue | None = context.application.job_queue
        if job_queue:
            next_job_name = f"daily_quiz_q_{next_q_idx}_chat_{chat_id_str}"
            active_quiz_state["job_name_next_q"] = next_job_name
            job_queue.run_once(
                _send_one_daily_question_job,
                timedelta(seconds=DAILY_QUIZ_QUESTION_INTERVAL_SECONDS),
                data={
                    "chat_id_str": chat_id_str,
                    "current_question_index": next_q_idx,
                    "questions_this_session": questions_this_session
                },
                name=next_job_name
            )
            logger.debug(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å ({next_q_idx + 1}) –¥–ª—è —á–∞—Ç–∞ {chat_id_str} (job: {next_job_name}).")
    else:
        # –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, —Å–ª–µ–¥—É—é—â–∏–π job –≤—ã–∑–æ–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏.
        # –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –ª–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
        # –ú–æ–∂–Ω–æ –∑–¥–µ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
        job_queue: JobQueue | None = context.application.job_queue
        if job_queue:
            final_job_name = f"daily_quiz_finish_chat_{chat_id_str}"
            active_quiz_state["job_name_next_q"] = final_job_name # –•–æ—Ç—è —ç—Ç–æ –¥–∂–æ–± –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            job_queue.run_once(
                _send_one_daily_question_job, # –û–Ω –∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–Ω–¥–µ–∫—Å–∞
                timedelta(seconds=DAILY_QUIZ_QUESTION_INTERVAL_SECONDS), # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                data={
                    "chat_id_str": chat_id_str,
                    "current_question_index": next_q_idx, # next_q_idx == len(questions_this_session)
                    "questions_this_session": questions_this_session
                },
                name=final_job_name
            )
            logger.debug(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ —á–∞—Ç–µ {chat_id_str} (job: {final_job_name}).")

async def _trigger_daily_quiz_for_chat_job(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    if not job or not job.data:
        logger.error("_trigger_daily_quiz_for_chat_job: Job data is missing.")
        return

    chat_id_str: str = job.data["chat_id_str"]

    if chat_id_str in state.active_daily_quizzes:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è —á–∞—Ç–∞ {chat_id_str}, –Ω–æ –æ–Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞. –ü—Ä–æ–ø—É—Å–∫.")
        return

    questions_for_quiz, picked_categories = _get_questions_for_daily_quiz(
        num_questions=DAILY_QUIZ_QUESTIONS_COUNT,
        num_categories_to_pick=DAILY_QUIZ_CATEGORIES_TO_PICK
    )

    if not questions_for_quiz:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ —á–∞—Ç–µ {chat_id_str}. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞.")
        try:
            error_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≤—Ç—Ä–∞!"
            logger.debug(f"Attempting to send daily quiz question fetch error to {chat_id_str}. Text: '{error_text}'")
            await context.bot.send_message(chat_id=chat_id_str, text=error_text)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —á–∞—Ç {chat_id_str} –æ–± –æ—à–∏–±–∫–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
    intro_message_parts = [
        f"üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞—á–∏–Ω–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ({len(questions_for_quiz)} –≤–æ–ø—Ä–æ—Å–æ–≤)!",
        f"–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{', '.join(picked_categories) if picked_categories else '–°–ª—É—á–∞–π–Ω—ã–µ'}</b>.",
        f"–û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É. –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω {DAILY_QUIZ_POLL_OPEN_PERIOD_SECONDS // 60} –º–∏–Ω—É—Ç."
    ]
    intro_text = "\n".join(intro_message_parts)

    try:
        logger.debug(f"Attempting to send daily quiz intro message to {chat_id_str}. Text: '{intro_text[:100]}...'")
        await context.bot.send_message(chat_id=chat_id_str, text=intro_text, parse_mode=ParseMode.HTML)
        logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id_str} —Å {len(questions_for_quiz)} –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {picked_categories}.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ —á–∞—Ç {chat_id_str}: {e}", exc_info=True)
        return # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ç—Ä–æ, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    state.active_daily_quizzes[chat_id_str] = {
        "current_question_index": 0,
        "questions": questions_for_quiz,
        "picked_categories": picked_categories,
        "job_name_next_q": None
    }

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∏–Ω—Ç—Ä–æ)
    job_queue: JobQueue | None = context.application.job_queue
    if job_queue:
        first_q_job_name = f"daily_quiz_q_0_chat_{chat_id_str}"
        state.active_daily_quizzes[chat_id_str]["job_name_next_q"] = first_q_job_name
        job_queue.run_once(
            _send_one_daily_question_job,
            timedelta(seconds=5), # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∏–Ω—Ç—Ä–æ-—Å–æ–æ–±—â–µ–Ω–∏—è
            data={
                "chat_id_str": chat_id_str,
                "current_question_index": 0,
                "questions_this_session": questions_for_quiz
            },
            name=first_q_job_name
        )
        logger.debug(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id_str} (job: {first_q_job_name}).")

async def master_daily_quiz_scheduler_job(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ó–∞–ø—É—â–µ–Ω –º–∞—Å—Ç–µ—Ä-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω.")
    if not state.daily_quiz_subscriptions:
        logger.info("–ù–µ—Ç —á–∞—Ç–æ–≤, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
        return

    job_queue: JobQueue | None = context.application.job_queue
    if not job_queue:
        logger.error("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ master_daily_quiz_scheduler_job. –í–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω–µ –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã.")
        return

    active_subscriptions = list(state.daily_quiz_subscriptions) # –ö–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(active_subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫. –ó–∞–ø—É—Å–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤.")

    for i, chat_id_str in enumerate(active_subscriptions):
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —á–∞—Ç–æ–≤, —á—Ç–æ–±—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É
        delay_seconds = i * 2 # –ù–∞–ø—Ä–∏–º–µ—Ä, 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —á–∞—Ç

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–∂–æ–±—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        for prefix in ["daily_quiz_trigger_chat_", "daily_quiz_q_", "daily_quiz_finish_chat_"]:
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –µ—Å–ª–∏ –¥–∂–æ–±–æ–≤ –º–Ω–æ–≥–æ.
            # –ë–æ–ª–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –±—ã–ª–æ –±—ã —Ö—Ä–∞–Ω–∏—Ç—å –∏–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∂–æ–±–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞.
            # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ —Ç–∞–∫, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –∏–º–µ–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã.
            # –õ—É—á—à–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª—è—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∂–æ–±—ã –¥–ª—è *—ç—Ç–æ–≥–æ* —á–∞—Ç–∞.
            # –≠—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ _trigger_daily_quiz_for_chat_job –∏ _send_one_daily_question_job (–∫–æ—Å–≤–µ–Ω–Ω–æ, —á–µ—Ä–µ–∑ state.active_daily_quizzes)
            pass

        trigger_job_name = f"daily_quiz_trigger_chat_{chat_id_str}"
        job_queue.run_once(
            _trigger_daily_quiz_for_chat_job,
            timedelta(seconds=delay_seconds),
            data={"chat_id_str": chat_id_str},
            name=trigger_job_name
        )
        logger.debug(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id_str} (job: {trigger_job_name}) —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫.")
