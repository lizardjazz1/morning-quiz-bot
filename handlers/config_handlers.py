# bot/handlers/config_handlers.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler # For dailyquiz config menu
from telegram.constants import ParseMode, ChatMemberStatus


import state
from app_config import logger, QUIZ_CONFIG, DAILY_QUIZ_MAX_CUSTOM_CATEGORIES, \
                       DAILY_QUIZ_MENU_MAX_CATEGORIES_DISPLAY, DAILY_QUIZ_CATEGORIES_TO_PICK_RANDOM, \
                       CALLBACK_DATA_PREFIX_DAILY_QUIZ_CATEGORY_SHORT, CALLBACK_DATA_DAILY_QUIZ_RANDOM_CATEGORY, \
                       CALLBACK_DATA_DAILY_QUIZ_INFO_TOO_MANY_CATS
from data_manager import save_chat_settings, get_chat_settings
from utils import escape_markdown_v2, parse_time_hh_mm, pluralize
from modules import category_manager
# Import scheduler for re-scheduling daily quiz
from .daily_quiz_scheduler import schedule_or_reschedule_daily_quiz_for_chat # Relative import


async def _is_user_chat_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if not update.effective_chat or not update.effective_user: return False
    if update.effective_chat.type == 'private': return True
    try:
        member = await context.bot.get_chat_member(update.effective_chat.id, update.effective_user.id)
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception as e:
        logger.warning(f"Error checking admin status for user {update.effective_user.id} in chat {update.effective_chat.id}: {e}")
        return False

# --- General Chat Quiz Settings ---
async def set_quiz_type_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await _is_user_chat_admin(update, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
        return
    # TODO: Implement logic to set default quiz type for /quiz (normal/session)
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è /setquiztype –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def set_quiz_questions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await _is_user_chat_admin(update, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
        return
    # TODO: Implement logic to set default number of questions for session quizzes
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è /setquizquestions –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def set_quiz_categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await _is_user_chat_admin(update, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
        return
    # TODO: Implement logic to set default categories for the chat
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è /setquizcategories –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def exclude_quiz_categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await _is_user_chat_admin(update, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
        return
    # TODO: Implement logic to set excluded categories for the chat
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è /excludecategories –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def show_chat_settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # No admin check needed for showing settings
    if not update.message or not update.effective_chat: return
    chat_id_str = str(update.effective_chat.id)
    settings = get_chat_settings(chat_id_str) # Gets merged settings with defaults

    # General settings
    quiz_type = settings.get("quiz_type_on_start", "normal")
    num_q_session = settings.get("num_questions_session", QUIZ_CONFIG.get("quiz_types_config", {}).get("session",{}).get("default_num_questions",10) )
    
    allowed_cats_list = settings.get("allowed_categories")
    allowed_cats_str = f"`{escape_markdown_v2(', '.join(allowed_cats_list))}`" if allowed_cats_list else "`–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ`"
    
    excluded_cats_list = settings.get("excluded_categories", [])
    excluded_cats_str = f"`{escape_markdown_v2(', '.join(excluded_cats_list))}`" if excluded_cats_list else "`–ù–µ—Ç`"

    # Daily quiz settings
    daily_settings = settings.get("daily_quiz", {})
    daily_enabled = daily_settings.get("enabled", False)
    daily_time_str = f"{daily_settings.get('hour_msk',0):02d}:{daily_settings.get('minute_msk',0):02d} –ú–°–ö"
    daily_cats_list = daily_settings.get("categories")
    daily_cats_str = f"`{escape_markdown_v2(', '.join(daily_cats_list))}`" if daily_cats_list else f"`–°–ª—É—á–∞–π–Ω—ã–µ ({DAILY_QUIZ_CATEGORIES_TO_PICK_RANDOM})`"
    daily_num_q = daily_settings.get("num_questions", QUIZ_CONFIG.get("quiz_types_config", {}).get("daily",{}).get("default_num_questions",10))

    reply_text = (
        f"‚öôÔ∏è *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞*:\n\n"
        f"*–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*:\n"
        f"\\- –¢–∏–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è `/quiz`: `{quiz_type}`\n"
        f"\\- –í–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: `{num_q_session}`\n"
        f"\\- –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {allowed_cats_str}\n"
        f"\\- –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {excluded_cats_str}\n\n"
        f"*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã* (`/dailyquiz`):\n"
        f"\\- –°—Ç–∞—Ç—É—Å: {'*–í–∫–ª—é—á–µ–Ω–∞*' if daily_enabled else '_–í—ã–∫–ª—é—á–µ–Ω–∞_'}\n"
    )
    if daily_enabled:
        reply_text += (
            f"\\- –í—Ä–µ–º—è: `{daily_time_str}`\n"
            f"\\- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {daily_cats_str}\n"
            f"\\- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: `{daily_num_q}`\n"
        )
    reply_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è\\."

    await update.message.reply_text(reply_text, parse_mode=ParseMode.MARKDOWN_V2)


# --- Daily Quiz Settings Commands (migrated from old daily_quiz_handlers) ---
# Conversation states for /dailyquiz main menu
SELECT_DAILY_ACTION, SET_DAILY_TIME, SET_DAILY_CATEGORIES_METHOD, SET_DAILY_CATEGORIES_TEXT = range(4)

async def daily_quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Main entry point for /dailyquiz configuration."""
    if not update.message or not update.effective_chat: return ConversationHandler.END
    chat_id_str = str(update.effective_chat.id)
    
    if not await _is_user_chat_admin(update, context): # Admin check for config
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
        return ConversationHandler.END

    settings = get_chat_settings(chat_id_str)
    daily_settings = settings.get("daily_quiz", {})
    is_enabled = daily_settings.get("enabled", False)

    keyboard = [
        [InlineKeyboardButton(f"{'–í—ã–∫–ª—é—á–∏—Ç—å' if is_enabled else '–í–∫–ª—é—á–∏—Ç—å'} –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="toggle_daily")],
    ]
    if is_enabled:
        keyboard.extend([
            [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è", callback_data="set_time_daily")],
            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="set_cats_daily")],
            [InlineKeyboardButton("–ö–æ–ª-–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ (—Å–∫–æ—Ä–æ)", callback_data="set_num_q_daily_soon")], # Placeholder
        ])
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_daily_config")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    status_str = "*–í–∫–ª—é—á–µ–Ω–∞*" if is_enabled else "_–í—ã–∫–ª—é—á–µ–Ω–∞_"
    time_str = f"{daily_settings.get('hour_msk',0):02d}:{daily_settings.get('minute_msk',0):02d} –ú–°–ö"
    cats = daily_settings.get('categories')
    cat_str = f"`{escape_markdown_v2(', '.join(cats))}`" if cats else f"`–°–ª—É—á–∞–π–Ω—ã–µ ({DAILY_QUIZ_CATEGORIES_TO_PICK_RANDOM})`"
    
    text = (f"üóìÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞*:\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_str}\n")
    if is_enabled:
        text += (f"–í—Ä–µ–º—è: `{time_str}`\n"
                 f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {cat_str}\n")
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
    return SELECT_DAILY_ACTION

async def daily_quiz_action_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handles button presses from the main /dailyquiz menu."""
    query = update.callback_query
    await query.answer()
    action = query.data
    chat_id_str = str(query.message.chat_id)

    if action == "cancel_daily_config":
        await query.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
        return ConversationHandler.END

    settings = get_chat_settings(chat_id_str)
    # Ensure 'daily_quiz' key exists and is a dict, even if loading defaults
    if "daily_quiz" not in settings or not isinstance(settings["daily_quiz"], dict):
        settings["daily_quiz"] = copy.deepcopy(QUIZ_CONFIG.get("default_chat_settings", {}).get("daily_quiz", {}))


    if action == "toggle_daily":
        current_enabled = settings.get("daily_quiz", {}).get("enabled", False)
        settings["daily_quiz"]["enabled"] = not current_enabled
        state.chat_settings[chat_id_str] = settings # Update state
        save_chat_settings()
        await schedule_or_reschedule_daily_quiz_for_chat(context.application, chat_id_str)
        status_msg = "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –í–ö–õ–Æ–ß–ï–ù–ê." if settings["daily_quiz"]["enabled"] else "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –í–´–ö–õ–Æ–ß–ï–ù–ê."
        await query.edit_message_text(status_msg + "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dailyquiz –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=None)
        return ConversationHandler.END # Or back to main menu if preferred

    elif action == "set_time_daily":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–ú–°–ö):", reply_markup=None)
        return SET_DAILY_TIME
        
    elif action == "set_cats_daily":
        # Similar to old setdailyquizcategories command logic
        # For simplicity, directly ask for text input or show menu
        keyboard_cats = [
            [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"dq_set_{CALLBACK_DATA_DAILY_QUIZ_RANDOM_CATEGORY}")],
            [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="dq_set_text_input")],
            # TODO: Add button to show category list if many
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="dq_back_to_main")]
        ]
        await query.edit_message_text(
            "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã?\n"
            f"(–ú–∞–∫—Å–∏–º—É–º {DAILY_QUIZ_MAX_CUSTOM_CATEGORIES} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –≤–≤–æ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é)",
            reply_markup=InlineKeyboardMarkup(keyboard_cats)
        )
        return SET_DAILY_CATEGORIES_METHOD
    
    elif action == "set_num_q_daily_soon":
        await query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!", show_alert=True)
        return SELECT_DAILY_ACTION # Stay in the same state

    return ConversationHandler.END # Should not happen


async def daily_quiz_set_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id_str = str(update.message.chat_id)
    time_input = update.message.text
    parsed_time = parse_time_hh_mm(time_input)

    if parsed_time is None:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30 –∏–ª–∏ 19:00).")
        return SET_DAILY_TIME # Stay in this state

    hour, minute = parsed_time
    settings = get_chat_settings(chat_id_str)
    if "daily_quiz" not in settings or not isinstance(settings["daily_quiz"], dict): # Ensure structure
        settings["daily_quiz"] = copy.deepcopy(QUIZ_CONFIG.get("default_chat_settings", {}).get("daily_quiz", {}))

    settings["daily_quiz"]["hour_msk"] = hour
    settings["daily_quiz"]["minute_msk"] = minute
    state.chat_settings[chat_id_str] = settings
    save_chat_settings()
    await schedule_or_reschedule_daily_quiz_for_chat(context.application, chat_id_str)
    await update.message.reply_text(f"–í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour:02d}:{minute:02d} –ú–°–ö.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dailyquiz –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    return ConversationHandler.END

async def daily_quiz_set_categories_method_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    action = query.data
    chat_id_str = str(query.message.chat_id)

    if action == "dq_back_to_main":
        # Re-show main menu (call daily_quiz_command logic, simplified here)
        # For a real ConvoHandler, you'd transition back. Here, just end and tell user to re-run.
        await query.edit_message_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dailyquiz.", reply_markup=None)
        return ConversationHandler.END


    if action == f"dq_set_{CALLBACK_DATA_DAILY_QUIZ_RANDOM_CATEGORY}":
        settings = get_chat_settings(chat_id_str)
        if "daily_quiz" not in settings or not isinstance(settings["daily_quiz"], dict):
             settings["daily_quiz"] = copy.deepcopy(QUIZ_CONFIG.get("default_chat_settings", {}).get("daily_quiz", {}))
        settings["daily_quiz"]["categories"] = None # None for random
        state.chat_settings[chat_id_str] = settings
        save_chat_settings()
        await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞: *—Å–ª—É—á–∞–π–Ω—ã–µ* ({DAILY_QUIZ_CATEGORIES_TO_PICK_RANDOM} —à—Ç\\.)\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dailyquiz –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫\\.", reply_markup=None, parse_mode=ParseMode.MARKDOWN_V2)
        return ConversationHandler.END
    
    elif action == "dq_set_text_input":
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: `–ò—Å—Ç–æ—Ä–∏—è, –ù–∞—É–∫–∞, –ì–µ–æ–≥—Ä–∞—Ñ–∏—è`)\\.\n"
            f"–ú–∞–∫—Å–∏–º—É–º {DAILY_QUIZ_MAX_CUSTOM_CATEGORIES} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\\. "
            f"–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ, –Ω–∞–ø–∏—à–∏—Ç–µ `—Å–ª—É—á–∞–π–Ω—ã–µ` –∏–ª–∏ `random`\\.",
            reply_markup=None, parse_mode=ParseMode.MARKDOWN_V2
        )
        return SET_DAILY_CATEGORIES_TEXT
    
    # TODO: Add logic for showing full category list with pagination if needed

    return SET_DAILY_CATEGORIES_METHOD # Stay if unhandled

async def daily_quiz_set_categories_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id_str = str(update.message.chat_id)
    text_input = update.message.text.strip()

    settings = get_chat_settings(chat_id_str)
    if "daily_quiz" not in settings or not isinstance(settings["daily_quiz"], dict):
        settings["daily_quiz"] = copy.deepcopy(QUIZ_CONFIG.get("default_chat_settings", {}).get("daily_quiz", {}))

    if text_input.lower() in ["—Å–ª—É—á–∞–π–Ω—ã–µ", "random"]:
        settings["daily_quiz"]["categories"] = None
        state.chat_settings[chat_id_str] = settings
        save_chat_settings()
        await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞: *—Å–ª—É—á–∞–π–Ω—ã–µ* ({DAILY_QUIZ_CATEGORIES_TO_PICK_RANDOM} —à—Ç\\.)", parse_mode=ParseMode.MARKDOWN_V2)
        return ConversationHandler.END

    raw_category_names = [name.strip() for name in text_input.split(',') if name.strip()]
    if not raw_category_names:
        await update.message.reply_text("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ `—Å–ª—É—á–∞–π–Ω—ã–µ`.")
        return SET_DAILY_CATEGORIES_TEXT

    available_cat_names_map = {
        name.lower(): name for name in category_manager.get_available_categories()
    }
    
    valid_chosen_categories = []
    invalid_categories_input = []

    for cat_arg in raw_category_names:
        canonical_name = available_cat_names_map.get(cat_arg.lower())
        if canonical_name and canonical_name not in valid_chosen_categories:
            valid_chosen_categories.append(canonical_name)
        else:
            invalid_categories_input.append(cat_arg)

    if len(valid_chosen_categories) > DAILY_QUIZ_MAX_CUSTOM_CATEGORIES:
        await update.message.reply_text(
            f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\\! –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ {DAILY_QUIZ_MAX_CUSTOM_CATEGORIES}\\. "
            f"–í—ã —É–∫–∞–∑–∞–ª–∏ {len(valid_chosen_categories)} –≤–∞–ª–∏–¥–Ω—ã—Ö: `{escape_markdown_v2(', '.join(valid_chosen_categories))}`\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–ø–∏—Å–æ–∫\\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return SET_DAILY_CATEGORIES_TEXT

    if not valid_chosen_categories:
        await update.message.reply_text(
            f"–£–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({escape_markdown_v2(', '.join(invalid_categories_input))}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã\\. "
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `—Å–ª—É—á–∞–π–Ω—ã–µ`\\.", parse_mode=ParseMode.MARKDOWN_V2
        )
        return SET_DAILY_CATEGORIES_TEXT
    
    settings["daily_quiz"]["categories"] = valid_chosen_categories
    state.chat_settings[chat_id_str] = settings
    save_chat_settings()

    reply_msg = f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: *{escape_markdown_v2(', '.join(valid_chosen_categories))}*\\."
    if invalid_categories_input:
        reply_msg += f"\n*–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ*: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{escape_markdown_v2(', '.join(invalid_categories_input))}` –Ω–µ –Ω–∞–π–¥–µ–Ω—ã/–ø—É—Å—Ç—ã –∏ –±—ã–ª–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã\\."
    
    await update.message.reply_text(reply_msg, parse_mode=ParseMode.MARKDOWN_V2)
    return ConversationHandler.END

async def daily_quiz_cancel_config(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Generic cancel for any state in the conversation."""
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    elif update.message:
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


# --- Standalone subscribe/unsubscribe for convenience ---
async def subscribe_daily_quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat or not update.effective_user: return
    chat_id_str = str(update.effective_chat.id)

    if not await _is_user_chat_admin(update, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
        return

    settings = get_chat_settings(chat_id_str)
    if "daily_quiz" not in settings or not isinstance(settings["daily_quiz"], dict):
        settings["daily_quiz"] = copy.deepcopy(QUIZ_CONFIG.get("default_chat_settings", {}).get("daily_quiz", {}))

    if settings["daily_quiz"].get("enabled", False):
        await update.message.reply_text("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dailyquiz –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    else:
        settings["daily_quiz"]["enabled"] = True
        # Use existing defaults or load them if not present
        settings["daily_quiz"].setdefault("hour_msk", QUIZ_CONFIG.get("default_chat_settings", {}).get("daily_quiz", {}).get("hour_msk",7) )
        settings["daily_quiz"].setdefault("minute_msk", QUIZ_CONFIG.get("default_chat_settings", {}).get("daily_quiz", {}).get("minute_msk",0) )
        settings["daily_quiz"].setdefault("categories", None) # Random
        settings["daily_quiz"].setdefault("num_questions", QUIZ_CONFIG.get("default_chat_settings", {}).get("daily_quiz", {}).get("num_questions",10) )


        state.chat_settings[chat_id_str] = settings
        save_chat_settings()
        await schedule_or_reschedule_daily_quiz_for_chat(context.application, chat_id_str)
        await update.message.reply_text("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dailyquiz –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤—Ä–µ–º—è, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏).")
        logger.info(f"Daily quiz enabled for chat {chat_id_str} by user {update.effective_user.id} via /subdaily.")

async def unsubscribe_daily_quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat or not update.effective_user: return
    chat_id_str = str(update.effective_chat.id)

    if not await _is_user_chat_admin(update, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
        return

    settings = get_chat_settings(chat_id_str)
    if not settings.get("daily_quiz", {}).get("enabled", False):
        await update.message.reply_text("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞.")
    else:
        if "daily_quiz" not in settings or not isinstance(settings["daily_quiz"], dict):
             settings["daily_quiz"] = copy.deepcopy(QUIZ_CONFIG.get("default_chat_settings", {}).get("daily_quiz", {}))
        settings["daily_quiz"]["enabled"] = False
        state.chat_settings[chat_id_str] = settings
        save_chat_settings()
        await schedule_or_reschedule_daily_quiz_for_chat(context.application, chat_id_str) # This will remove the job
        await update.message.reply_text("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        logger.info(f"Daily quiz disabled for chat {chat_id_str} by user {update.effective_user.id} via /unsubdaily.")

