#bot.py
import sys
import os

project_root = os.path.dirname(os.path.abspath(__file__))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# --- –î–∞–ª–µ–µ –∏–¥—É—Ç –≤—Å–µ –≤–∞—à–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
import logging
import asyncio
import signal
import copy # –î–ª—è deepcopy default_chat_settings

from telegram import Update, BotCommand, Message
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    CallbackQueryHandler, ContextTypes, PicklePersistence, ConversationHandler, JobQueue,
    Defaults # <--- –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Defaults
)
from telegram.constants import ParseMode
from telegram.error import BadRequest

# –ú–æ–¥—É–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app_config import AppConfig # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from state import BotState, QuizState
from data_manager import DataManager
from poll_answer_handler import CustomPollAnswerHandler # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å—ã
from utils import get_current_utc_time, schedule_job_unique, escape_markdown_v2, is_user_admin_in_update, get_mention_html, pluralize

# –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ª–æ–≥–∏–∫–∏
from modules.category_manager import CategoryManager
from modules.score_manager import ScoreManager
from modules.quiz_engine import QuizEngine

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤
from handlers.quiz_manager import QuizManager
from handlers.rating_handlers import RatingHandlers
from handlers.config_handlers import ConfigHandlers
from handlers.daily_quiz_scheduler import DailyQuizScheduler
from handlers.common_handlers import CommonHandlers
from handlers.cleanup_handler import schedule_cleanup_job

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL_DEFAULT = logging.INFO
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=LOG_LEVEL_DEFAULT,
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.INFO)
logger = logging.getLogger(__name__)

stop_event = asyncio.Event()

async def sigterm_handler(_signum, _frame):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM/SIGINT ({_signum}), –Ω–∞—á–∏–Ω–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
    stop_event.set()

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
    if isinstance(update, Update) and update.effective_chat:
        try:
            from utils import escape_markdown_v2 as local_escape_markdown_v2 # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
            error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞\\. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º\\."
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=error_text,
                parse_mode=ParseMode.MARKDOWN_V2
            )
        except Exception as e_send:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e_send}")

async def post_init_actions(application: Application) -> None:
    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è post_init_actions...")
    app_config: AppConfig = application.bot_data['app_config'] # type: ignore

    daily_quiz_scheduler: DailyQuizScheduler = application.bot_data.get('daily_quiz_scheduler') # type: ignore
    if daily_quiz_scheduler:
        await daily_quiz_scheduler.initialize_jobs()
    else:
        logger.error("DailyQuizScheduler –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ application.bot_data –≤–æ –≤—Ä–µ–º—è post_init_actions.")

    bot_commands = [
        BotCommand(app_config.commands.start, "üöÄ –ó–∞–ø—É—Å–∫/–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
        BotCommand(app_config.commands.help, "‚ùì –ü–æ–º–æ—â—å"),
        BotCommand(app_config.commands.quiz, "üéÆ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ (—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∏–ª–∏ –±—ã—Å—Ç—Ä–∞—è)"),
        BotCommand(app_config.commands.categories, "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"),
        BotCommand(app_config.commands.top, "üèÜ –†–µ–π—Ç–∏–Ω–≥ —á–∞—Ç–∞"),
        BotCommand(app_config.commands.global_top, "üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥"),
        BotCommand(app_config.commands.mystats, "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand(app_config.commands.stop_quiz, "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É (–∞–¥–º–∏–Ω/–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä)"),
        BotCommand(app_config.commands.admin_settings, "üõ†Ô∏è –ê–¥–º–∏–Ω. –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (–∞–¥–º–∏–Ω)"),
        BotCommand(app_config.commands.view_chat_config, "üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞"),
        BotCommand(app_config.commands.cancel, "‚ùå –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è/–¥–∏–∞–ª–æ–≥–∞"),
    ]
    try:
        await application.bot.set_my_commands(bot_commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e}")

    if application.job_queue:
        schedule_cleanup_job(application.job_queue)
    else:
        logger.warning("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ application.post_init. –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")

    logger.info("post_init_actions –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

async def pre_shutdown_actions(application: Application) -> None:
    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è pre_shutdown_actions (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)...")
    data_manager: DataManager = application.bot_data.get('data_manager') # type: ignore
    if data_manager:
        data_manager.save_all_data()
        logger.info("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    else:
        logger.warning("DataManager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ application.bot_data –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    logger.info("pre_shutdown_actions –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

async def main() -> None:
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    app_config = AppConfig()

    log_level_from_config_str = app_config.log_level_str
    log_level_from_config = getattr(logging, log_level_from_config_str.upper(), logging.INFO)
    logging.getLogger().setLevel(log_level_from_config)
    for handler_obj in logging.getLogger().handlers:
        handler_obj.setLevel(log_level_from_config)
    logger.info(f"–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {log_level_from_config_str}")

    if not app_config.bot_token:
        logger.critical("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    bot_state = BotState(app_config=app_config)
    data_manager = DataManager(app_config=app_config, state=bot_state)

    try:
        logger.info("–ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        data_manager.load_all_data()
        logger.info("–ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        if not bot_state.quiz_data:
             logger.warning("–î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤ (quiz_data) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã.")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        return

    persistence = PicklePersistence(filepath=app_config.paths.ptb_persistence_file)

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–¢–ê–ù–û–í–ö–ò PARSE_MODE ---
    defaults = Defaults(parse_mode=ParseMode.MARKDOWN_V2)
    application_builder = Application.builder().token(app_config.bot_token).persistence(persistence).defaults(defaults)
    # -----------------------------------------

    application_builder.post_init(post_init_actions)
    application_builder.post_shutdown(pre_shutdown_actions)
    # application_builder.parse_mode(ParseMode.MARKDOWN_V2) # <--- –≠–¢–ê –°–¢–†–û–ö–ê –ë–´–õ–ê –ù–ï–í–ï–†–ù–û–ô –ò –£–î–ê–õ–ï–ù–ê

    application = application_builder.build()

    application.bot_data['app_config'] = app_config
    application.bot_data['bot_state'] = bot_state
    application.bot_data['data_manager'] = data_manager

    category_manager = CategoryManager(state=bot_state, app_config=app_config)
    application.bot_data['category_manager'] = category_manager # –î–æ–±–∞–≤–ª—è–µ–º –≤ bot_data –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    score_manager = ScoreManager(app_config=app_config, state=bot_state, data_manager=data_manager)
    application.bot_data['score_manager'] = score_manager

    quiz_manager = QuizManager(
        app_config=app_config, state=bot_state, category_manager=category_manager,
        score_manager=score_manager, data_manager=data_manager, application=application
    )
    rating_handlers = RatingHandlers(score_manager=score_manager, app_config=app_config)
    config_handlers_instance = ConfigHandlers(
        app_config=app_config, state=bot_state, data_manager=data_manager,
        category_manager=category_manager, application=application
    )
    common_handlers_instance = CommonHandlers(app_config=app_config, category_manager=category_manager, bot_state=bot_state)

    daily_quiz_scheduler = DailyQuizScheduler(
        app_config=app_config, state=bot_state, data_manager=data_manager,
        quiz_manager=quiz_manager, application=application
    )
    config_handlers_instance.set_daily_quiz_scheduler(daily_quiz_scheduler)
    application.bot_data['daily_quiz_scheduler'] = daily_quiz_scheduler

    custom_poll_answer_handler = CustomPollAnswerHandler(
        state=bot_state, score_manager=score_manager, app_config=app_config
    )
    custom_poll_answer_handler.set_quiz_manager(quiz_manager)

    logger.info("–í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

    application.add_handler(custom_poll_answer_handler.get_handler())
    application.add_handlers(config_handlers_instance.get_handlers())
    application.add_handlers(quiz_manager.get_handlers())
    application.add_handlers(rating_handlers.get_handlers())
    application.add_handlers(common_handlers_instance.get_handlers())
    application.add_handlers(daily_quiz_scheduler.get_handlers())

    application.add_error_handler(error_handler)
    logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ PTB –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (polling)...")

    await application.initialize()
    await application.start()
    await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)

    await stop_event.wait()

    logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞...")
    await application.updater.stop()
    await application.stop()
    await application.shutdown()
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    loop = asyncio.get_event_loop()

    if sys.platform != "win32":
        if hasattr(signal, "SIGTERM"):
            try:
                loop.add_signal_handler(
                    signal.SIGTERM,
                    lambda signum_arg=signal.SIGTERM, frame_arg=None: asyncio.create_task(sigterm_handler(signum_arg, frame_arg))
                )
            except (NotImplementedError, RuntimeError) as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ SIGTERM: {e}")

        try:
            loop.add_signal_handler(
                signal.SIGINT,
                lambda signum_arg=signal.SIGINT, frame_arg=None: asyncio.create_task(sigterm_handler(signum_arg, frame_arg))
            )
        except (NotImplementedError, RuntimeError) as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ SIGINT: {e}")
    else:
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ SIGTERM/SIGINT –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ Windows. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è KeyboardInterrupt.")

    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ —á–µ—Ä–µ–∑ KeyboardInterrupt.")
        if not stop_event.is_set():
            stop_event.set()
    finally:
        if not stop_event.is_set():
            logger.warning("stop_event –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ (KeyboardInterrupt/finally). –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")
            stop_event.set()
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

