#state.py
import logging
import copy
from typing import Dict, Any, Set, Optional, List, TYPE_CHECKING
from collections import defaultdict
from datetime import datetime

from utils import get_current_utc_time # utils.py –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω

if TYPE_CHECKING:
    from app_config import AppConfig
    from telegram.ext import Application

logger = logging.getLogger(__name__)

class QuizState:
    def __init__(self,
                 chat_id: int,
                 quiz_type: str,
                 quiz_mode: str,
                 questions: List[Dict[str, Any]],
                 num_questions_to_ask: int,
                 open_period_seconds: int,
                 created_by_user_id: Optional[int] = None,
                 original_command_message_id: Optional[int] = None,
                 announce_message_id: Optional[int] = None,
                 interval_seconds: Optional[int] = None,
                 quiz_start_time: Optional[datetime] = None
                 ):

        self.chat_id: int = chat_id
        self.quiz_type: str = quiz_type
        self.quiz_mode: str = quiz_mode # 'single_question', 'serial_immediate', 'serial_interval'
        self.questions: List[Dict[str, Any]] = questions
        self.num_questions_to_ask: int = num_questions_to_ask
        self.open_period_seconds: int = open_period_seconds

        self.created_by_user_id: Optional[int] = created_by_user_id
        self.original_command_message_id: Optional[int] = original_command_message_id
        self.announce_message_id: Optional[int] = announce_message_id
        self.interval_seconds: Optional[int] = interval_seconds
        self.quiz_start_time: datetime = quiz_start_time if quiz_start_time else get_current_utc_time()

        self.current_question_index: int = 0
        self.scores: Dict[str, Dict[str, Any]] = {}

        self.active_poll_ids_in_session: Set[str] = set()
        self.latest_poll_id_sent: Optional[str] = None
        self.progression_triggered_for_poll: Dict[str, bool] = {}
        
        self.message_ids_to_delete: Set[int] = set()
        self.is_stopping: bool = False
        
        # –ò–ó–ú–ï–ù–ï–ù–û: —ç—Ç–∏ –ø–æ–ª—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã –≤ QuizState, —Ç.–∫. —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
        # self.current_poll_id: Optional[str] = None 
        # self.current_poll_message_id: Optional[int] = None
        # self.question_start_time: Optional[datetime] = None
        # self.current_poll_end_job_name: Optional[str] = None
        self.next_question_job_name: Optional[str] = None # –î–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–µ–∂–∏–º–µ serial_interval –ø–æ—Å–ª–µ —Ä–∞–Ω–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        self.poll_and_solution_message_ids: List[Dict[str, Optional[int]]] = []

    def get_current_question_data(self) -> Optional[Dict[str, Any]]:
        if 0 <= self.current_question_index < len(self.questions):
            return self.questions[self.current_question_index]
        return None

class BotState:
    def __init__(self, app_config: 'AppConfig'):
        self.app_config: 'AppConfig' = app_config
        self.application: Optional['Application'] = None
        self.data_manager: Optional['DataManager'] = None  # –î–æ–±–∞–≤–ª—è–µ–º data_manager

        self.active_quizzes: Dict[int, QuizState] = {}
        self.current_polls: Dict[str, Dict[str, Any]] = {} # poll_id -> poll_data (–≤–∫–ª—é—á–∞—è chat_id, message_id, question_details, job_poll_end_name)

        self.quiz_data: Dict[str, List[Dict[str, Any]]] = {}
        self.user_scores: Dict[str, Any] = {}
        self.chat_settings: Dict[int, Dict[str, Any]] = {}
        self.global_settings: Dict[str, Any] = {}  # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –¥—Ä.)

        self.global_command_cooldowns: Dict[str, Dict[int, datetime]] = defaultdict(dict)
        self.generic_messages_to_delete: Dict[int, Set[int]] = defaultdict(set)

    def get_active_quiz(self, chat_id: int) -> Optional[QuizState]:
        return self.active_quizzes.get(chat_id)

    def add_active_quiz(self, chat_id: int, quiz_state: QuizState) -> None:
        self.active_quizzes[chat_id] = quiz_state

    def remove_active_quiz(self, chat_id: int) -> Optional[QuizState]:
        return self.active_quizzes.pop(chat_id, None)

    def get_current_poll_data(self, poll_id: str) -> Optional[Dict[str, Any]]:
        return self.current_polls.get(poll_id)

    def add_current_poll(self, poll_id: str, poll_data: Dict[str, Any]) -> None:
        self.current_polls[poll_id] = poll_data

    def remove_current_poll(self, poll_id: str) -> Optional[Dict[str, Any]]:
        return self.current_polls.pop(poll_id, None)

    def get_chat_settings(self, chat_id: int) -> Dict[str, Any]:
        if not hasattr(self, 'app_config') or self.app_config is None:
            logger.critical("CRITICAL: BotState.app_config –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return copy.deepcopy({})

        if chat_id in self.chat_settings:
            return copy.deepcopy(self.chat_settings[chat_id])
        return copy.deepcopy(self.app_config.default_chat_settings)

    def update_chat_settings(self, chat_id: int, new_settings: Dict[str, Any]) -> None:
        self.chat_settings[chat_id] = new_settings

    def add_message_for_deletion(self, chat_id: int, message_id: int) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
        self.generic_messages_to_delete[chat_id].add(message_id)
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}. –í—Å–µ–≥–æ –≤ —á–∞—Ç–µ: {len(self.generic_messages_to_delete[chat_id])}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            if self.data_manager:
                self.data_manager.save_messages_to_delete()
                logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            else:
                logger.warning(f"‚ö†Ô∏è data_manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ BotState")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")

    def remove_message_from_deletion(self, chat_id: int, message_id: int) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
        if chat_id in self.generic_messages_to_delete:
            self.generic_messages_to_delete[chat_id].discard(message_id)
            logger.info(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}. –û—Å—Ç–∞–ª–æ—Å—å: {len(self.generic_messages_to_delete[chat_id])}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                if self.data_manager:
                    self.data_manager.save_messages_to_delete()
                    logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                else:
                    logger.warning(f"‚ö†Ô∏è data_manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ BotState")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")

